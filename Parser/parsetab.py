
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNEGATIVEleftANDnonassocLESSGREATERAND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CALL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINE\n                           | if NEW_LINE\n                           | for NEW_LINE\n                           | function NEW_LINE\n                           | call_func NEW_LINE\n                           | robot_action NEW_LINEdeclaration : type VARIABLE EQUAL expression\n                       | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETassignment : variable ASSIGN expression\n                      | variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETexpression : math_expression\n                      | variable\n                      | constant\n                      | robot_actionmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLE\n                   | VARIABLE LEFT_BRACKET index RIGHT_BRACKETtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSElist_args : LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET\n                     | list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET\n                     | list_expressionslist_expressions : list_expressions COMMA expression\n                            | expressionif : IF expression BEGINIF NEW_LINE sentence_list ENDIFfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFORfunction : return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list ENDreturn_spec : return_spec COMMA type VARIABLE EQUAL\n                       | type VARIABLE EQUAL\n                       | type VARIABLEparameters : parameters COMMA parameter\n                      | parameterparameter : type VARIABLE\n                     | type VARIABLE EQUAL constant\n                     | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETcall_func : VARIABLE\n                     | VARIABLE call_list\n                     | ret_list ASSIGN VARIABLE call_list\n                     | CALL ret_list ASSIGN VARIABLE call_list\n                     | CALL ret_list ASSIGN VARIABLE\n                     | variable ASSIGN VARIABLE call_list\n                     | type VARIABLE EQUAL VARIABLE call_listret_list : variable\n                    | ret_list COMMA variablecall_list : call_list COMMA expression\n                    | expressionind : COMMA\n               | COMMA DOUBLE_DOT\n               | DOUBLE_DOT COMMAindex : expression\n                 | list_expressions\n                 | list_expressions ind\n                 | ind list_expressions\n                 | list_args ind\n                 | ind list_args\n                 | list_args\n                 | LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETrobot_action : MOVE LEFT_BRACKET expression RIGHT_BRACKET\n                        | RIGHT\n                        | LEFT\n                        | WALL\n                        | EXITif : IF expression errorif : IF errordeclaration : type VARIABLE errorfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression error'
    
_lr_action_items = {'IF':([0,2,3,39,40,41,42,43,44,45,46,135,156,174,180,181,182,185,186,187,188,191,192,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,]),'FOR':([0,2,3,39,40,41,42,43,44,45,46,135,156,174,180,181,182,185,186,187,188,191,192,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,]),'FUNCTION':([0,2,3,16,39,40,41,42,43,44,45,46,47,73,135,156,160,174,180,181,182,185,186,187,188,191,192,],[17,17,-3,65,-2,-4,-5,-6,-7,-8,-9,-10,-63,-62,17,17,-61,17,17,17,17,17,17,17,17,17,17,]),'VARIABLE':([0,2,3,11,12,14,15,17,19,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50,56,61,65,68,69,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,102,104,106,108,110,114,118,123,124,135,142,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[12,12,-3,47,48,48,64,67,48,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-2,-4,-5,-6,-7,-8,-9,-10,48,48,97,101,104,48,48,108,48,48,48,-80,48,48,48,48,48,48,48,48,48,48,138,48,144,48,48,48,48,-81,-82,12,164,48,48,48,12,48,12,12,12,12,48,12,12,12,12,12,12,]),'CALL':([0,2,3,39,40,41,42,43,44,45,46,135,156,174,180,181,182,185,186,187,188,191,192,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,]),'MOVE':([0,2,3,12,14,39,40,41,42,43,44,45,46,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[20,20,-3,20,20,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,-80,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-81,-82,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'RIGHT':([0,2,3,12,14,39,40,41,42,43,44,45,46,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[21,21,-3,21,21,-2,-4,-5,-6,-7,-8,-9,-10,21,21,21,21,21,21,21,21,-80,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-81,-82,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LEFT':([0,2,3,12,14,39,40,41,42,43,44,45,46,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[22,22,-3,22,22,-2,-4,-5,-6,-7,-8,-9,-10,22,22,22,22,22,22,22,22,-80,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-81,-82,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'WALL':([0,2,3,12,14,39,40,41,42,43,44,45,46,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[23,23,-3,23,23,-2,-4,-5,-6,-7,-8,-9,-10,23,23,23,23,23,23,23,23,-80,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-81,-82,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'EXIT':([0,2,3,12,14,39,40,41,42,43,44,45,46,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[24,24,-3,24,24,-2,-4,-5,-6,-7,-8,-9,-10,24,24,24,24,24,24,24,24,-80,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-81,-82,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'CVINT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'VINT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CINT':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'BOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'CMBOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MBOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CVBOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'VBOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[37,37,-3,-2,-4,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'CBOOL':([0,2,3,39,40,41,42,43,44,45,46,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[38,38,-3,-2,-4,-5,-6,-7,-8,-9,-10,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'$end':([1,2,3,39,40,41,42,43,44,45,46,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,39,40,41,42,43,44,45,46,156,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,168,]),'END':([3,39,40,41,42,43,44,45,46,182,187,188,192,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,189,193,194,197,]),'ENDFOR':([3,39,40,41,42,43,44,45,46,191,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,196,]),'NEW_LINE':([4,5,6,7,8,9,10,12,21,22,23,24,48,49,51,52,53,54,55,57,58,59,60,63,74,88,89,90,94,95,97,98,99,108,109,111,112,125,126,127,128,129,130,131,134,143,144,145,146,155,163,165,166,168,171,172,177,178,179,189,193,194,196,197,],[40,41,42,43,44,45,46,-69,-92,-93,-94,-95,-30,-70,-79,-15,-16,-17,-18,-46,-47,-48,-49,-97,-98,-23,-24,-25,-28,-13,-30,135,-96,-30,-11,-78,-31,-19,-20,-21,-22,-26,-27,-29,-74,-71,-73,-91,-75,-14,174,-72,-12,-55,180,181,185,-99,186,-60,-58,-59,-56,-57,]),'ASSIGN':([12,13,18,48,70,71,105,112,],[-30,61,68,-30,106,-76,-77,-31,]),'COMMA':([12,13,16,18,21,22,23,24,47,48,49,50,51,52,53,54,55,57,58,59,60,70,71,73,77,78,80,83,88,89,90,94,105,111,112,115,116,117,121,122,125,126,127,128,129,130,131,132,133,134,139,141,143,145,146,147,148,151,154,158,160,164,165,167,173,176,183,190,195,],[-30,-76,66,69,-92,-93,-94,-95,-63,-30,75,82,-79,-15,-16,-17,-18,-46,-47,-48,-49,69,-76,-62,-54,114,120,124,-23,-24,-25,-28,-77,-78,-31,149,150,-54,150,149,-19,-20,-21,-22,-26,-27,-29,150,149,75,162,-65,75,-91,75,150,-53,149,-50,162,-61,-66,75,150,-64,-51,-67,150,-68,]),'LEFT_BRACKET':([12,20,48,67,97,101,108,],[50,72,50,103,50,137,50,]),'NEGATIVE':([12,14,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,144,149,152,157,184,],[56,56,56,56,56,56,56,56,56,56,-80,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-81,-82,56,56,56,56,56,]),'INT_BINARY':([12,14,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,144,149,152,157,175,184,],[57,57,57,57,57,57,57,57,57,57,-80,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-81,-82,57,57,57,57,57,57,]),'INT_DECIMAL':([12,14,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,144,149,152,157,175,184,],[58,58,58,58,58,58,58,58,58,58,-80,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-81,-82,58,58,58,58,58,58,]),'TRUE':([12,14,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,144,149,152,157,175,184,],[59,59,59,59,59,59,59,59,59,59,-80,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-81,-82,59,59,59,59,59,59,]),'FALSE':([12,14,50,56,61,72,73,75,79,81,82,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,123,124,144,149,152,157,175,184,],[60,60,60,60,60,60,60,60,60,60,-80,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-81,-82,60,60,60,60,60,60,]),'error':([14,21,22,23,24,47,48,52,53,54,55,57,58,59,60,62,88,89,90,94,112,125,126,127,128,129,130,131,145,169,],[63,-92,-93,-94,-95,74,-30,-15,-16,-17,-18,-46,-47,-48,-49,99,-23,-24,-25,-28,-31,-19,-20,-21,-22,-26,-27,-29,-91,178,]),'PLUS':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,84,-15,-16,-17,-18,-46,-47,-48,-49,84,84,-23,-24,-25,-28,84,-30,84,-30,84,84,-31,84,84,84,84,84,-26,-27,-29,84,-91,84,84,]),'MINUS':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,85,-15,-16,-17,-18,-46,-47,-48,-49,85,85,-23,-24,-25,-28,85,-30,85,-30,85,85,-31,85,85,85,85,85,-26,-27,-29,85,-91,85,85,]),'MATRIX_MUL':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,86,-15,-16,-17,-18,-46,-47,-48,-49,86,86,-23,-24,-25,-28,86,-30,86,-30,86,86,-31,86,86,86,86,86,-26,-27,-29,86,-91,86,86,]),'ELEMENTAL_MUL':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,87,-15,-16,-17,-18,-46,-47,-48,-49,87,87,-23,-24,-25,-28,87,-30,87,-30,87,87,-31,87,87,87,87,87,-26,-27,-29,87,-91,87,87,]),'LEFT_CYCLIC_SHIFT':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,88,-15,-16,-17,-18,-46,-47,-48,-49,88,88,-23,-24,-25,-28,88,-30,88,-30,88,88,-31,88,88,88,88,88,-26,-27,-29,88,-91,88,88,]),'RIGHT_CYCLIC_SHIFT':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,89,-15,-16,-17,-18,-46,-47,-48,-49,89,89,-23,-24,-25,-28,89,-30,89,-30,89,89,-31,89,89,89,89,89,-26,-27,-29,89,-91,89,89,]),'TRANSPOSITION':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,90,-15,-16,-17,-18,-46,-47,-48,-49,90,90,-23,-24,-25,-28,90,-30,90,-30,90,90,-31,90,90,90,90,90,-26,-27,-29,90,-91,90,90,]),'LESS':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,91,-15,-16,-17,-18,-46,-47,-48,-49,91,91,-23,-24,-25,91,91,-30,91,-30,91,91,-31,91,91,91,91,91,None,None,91,91,-91,91,91,]),'GREATER':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,92,-15,-16,-17,-18,-46,-47,-48,-49,92,92,-23,-24,-25,92,92,-30,92,-30,92,92,-31,92,92,92,92,92,None,None,92,92,-91,92,92,]),'AND':([21,22,23,24,48,51,52,53,54,55,57,58,59,60,62,77,88,89,90,94,95,97,107,108,109,111,112,117,125,126,127,128,129,130,131,136,145,148,169,],[-92,-93,-94,-95,-30,93,-15,-16,-17,-18,-46,-47,-48,-49,93,93,-23,-24,-25,93,93,-30,93,-30,93,93,-31,93,93,93,93,93,-26,-27,-29,93,-91,93,93,]),'BEGINIF':([21,22,23,24,48,52,53,54,55,57,58,59,60,62,88,89,90,94,112,125,126,127,128,129,130,131,145,],[-92,-93,-94,-95,-30,-15,-16,-17,-18,-46,-47,-48,-49,98,-23,-24,-25,-28,-31,-19,-20,-21,-22,-26,-27,-29,-91,]),'RIGHT_BRACKET':([21,22,23,24,48,52,53,54,55,57,58,59,60,76,77,78,80,88,89,90,94,103,107,112,113,114,115,116,117,119,120,123,124,125,126,127,128,129,130,131,137,139,141,145,148,153,154,158,164,173,176,183,195,],[-92,-93,-94,-95,-30,-15,-16,-17,-18,-46,-47,-48,-49,112,-54,-52,-89,-23,-24,-25,-28,140,145,-31,-85,-80,-52,-88,-54,-87,-80,-81,-82,-19,-20,-21,-22,-26,-27,-29,159,161,-65,-91,-53,-90,-50,170,-66,-64,-51,-67,-68,]),'DOUBLE_DOT':([21,22,23,24,48,50,52,53,54,55,57,58,59,60,77,78,80,82,88,89,90,94,112,114,120,125,126,127,128,129,130,131,136,145,148,154,176,],[-92,-93,-94,-95,-30,83,-15,-16,-17,-18,-46,-47,-48,-49,-54,83,83,123,-23,-24,-25,-28,-31,123,123,-19,-20,-21,-22,-26,-27,-29,157,-91,-53,-50,-51,]),'RIGHT_FIGURE_BRACKET':([21,22,23,24,48,52,53,54,55,57,58,59,60,88,89,90,94,112,117,121,122,125,126,127,128,129,130,131,132,133,145,147,148,151,154,167,176,190,],[-92,-93,-94,-95,-30,-15,-16,-17,-18,-46,-47,-48,-49,-23,-24,-25,-28,-31,-54,153,154,-19,-20,-21,-22,-26,-27,-29,155,-52,-91,166,-53,154,-50,176,-51,195,]),'BEGINFOR':([21,22,23,24,48,52,53,54,55,57,58,59,60,88,89,90,94,112,125,126,127,128,129,130,131,145,169,],[-92,-93,-94,-95,-30,-15,-16,-17,-18,-46,-47,-48,-49,-23,-24,-25,-28,-31,-19,-20,-21,-22,-26,-27,-29,-91,177,]),'EQUAL':([47,64,138,164,],[73,100,160,175,]),'LEFT_FIGURE_BRACKET':([50,61,73,79,81,82,96,110,120,123,124,150,152,175,184,],[81,96,110,118,118,-80,118,118,152,-81,-82,152,118,184,118,]),'BEGIN':([140,159,161,170,],[163,171,172,179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,135,174,180,181,185,186,],[2,156,182,187,188,191,192,]),'single_sentence':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[3,39,3,39,3,3,3,39,3,3,39,39,39,39,]),'declaration':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'call_func':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'robot_action':([0,2,12,14,50,56,61,72,73,75,79,81,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[10,10,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,10,55,55,55,10,55,10,10,10,10,55,10,10,10,10,10,10,]),'type':([0,2,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[11,11,102,142,11,142,11,142,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,14,19,50,56,61,69,72,73,75,79,81,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,135,144,149,152,156,157,174,180,181,182,184,185,186,187,188,191,192,],[13,13,53,53,71,53,53,53,105,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,13,53,53,53,13,53,13,13,13,13,53,13,13,13,13,13,13,]),'return_spec':([0,2,135,156,174,180,181,182,185,186,187,188,191,192,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'ret_list':([0,2,19,135,156,174,180,181,182,185,186,187,188,191,192,],[18,18,70,18,18,18,18,18,18,18,18,18,18,18,18,]),'int':([0,2,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'bool':([0,2,66,103,135,137,156,162,174,180,181,182,185,186,187,188,191,192,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'call_list':([12,97,104,108,144,],[49,134,143,146,165,]),'expression':([12,14,50,56,61,72,73,75,79,81,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,144,149,152,157,184,],[51,62,77,94,95,107,109,111,117,117,125,126,127,128,129,130,131,117,51,136,51,51,117,148,117,51,148,117,169,117,]),'math_expression':([12,14,50,56,61,72,73,75,79,81,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,144,149,152,157,184,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'constant':([12,14,50,56,61,72,73,75,79,81,84,85,86,87,91,92,93,96,97,100,104,108,110,114,118,144,149,152,157,175,184,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,183,54,]),'index':([50,],[76,]),'list_expressions':([50,79,81,96,110,118,152,184,],[78,115,122,133,133,151,133,133,]),'ind':([50,78,80,],[79,113,119,]),'list_args':([50,79,81,96,110,152,184,],[80,116,121,132,147,167,190,]),'parameters':([103,137,],[139,158,]),'parameter':([103,137,162,],[141,141,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',30),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',34),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',35),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',39),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',40),
  ('single_sentence -> if NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',41),
  ('single_sentence -> for NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',42),
  ('single_sentence -> function NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',43),
  ('single_sentence -> call_func NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',44),
  ('single_sentence -> robot_action NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',45),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',49),
  ('declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','declaration',6,'p_declaration','JazzParser.py',50),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',54),
  ('assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','assignment',5,'p_assignment','JazzParser.py',55),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',59),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',60),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',61),
  ('expression -> robot_action','expression',1,'p_expression','JazzParser.py',62),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',66),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',67),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',68),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',69),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',70),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',71),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',72),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',73),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',74),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',75),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',76),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',80),
  ('variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET','variable',4,'p_variable','JazzParser.py',81),
  ('type -> int','type',1,'p_type','JazzParser.py',85),
  ('type -> bool','type',1,'p_type','JazzParser.py',86),
  ('int -> INT','int',1,'p_int','JazzParser.py',90),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',91),
  ('int -> VINT','int',1,'p_int','JazzParser.py',92),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',93),
  ('int -> MINT','int',1,'p_int','JazzParser.py',94),
  ('int -> CINT','int',1,'p_int','JazzParser.py',95),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',99),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',100),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',101),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',102),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',103),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',104),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',108),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',109),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',110),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',111),
  ('list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET','list_args',3,'p_list_args','JazzParser.py',115),
  ('list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','list_args',5,'p_list_args','JazzParser.py',116),
  ('list_args -> list_expressions','list_args',1,'p_list_args','JazzParser.py',117),
  ('list_expressions -> list_expressions COMMA expression','list_expressions',3,'p_list_expressions','JazzParser.py',121),
  ('list_expressions -> expression','list_expressions',1,'p_list_expressions','JazzParser.py',122),
  ('if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF','if',6,'p_if','JazzParser.py',126),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR','for',10,'p_for','JazzParser.py',130),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',10,'p_function','JazzParser.py',134),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',135),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',136),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',8,'p_function','JazzParser.py',137),
  ('return_spec -> return_spec COMMA type VARIABLE EQUAL','return_spec',5,'p_return_spec','JazzParser.py',141),
  ('return_spec -> type VARIABLE EQUAL','return_spec',3,'p_return_spec','JazzParser.py',142),
  ('return_spec -> type VARIABLE','return_spec',2,'p_return_spec','JazzParser.py',143),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','JazzParser.py',147),
  ('parameters -> parameter','parameters',1,'p_parameters','JazzParser.py',148),
  ('parameter -> type VARIABLE','parameter',2,'p_parameter','JazzParser.py',152),
  ('parameter -> type VARIABLE EQUAL constant','parameter',4,'p_parameter','JazzParser.py',153),
  ('parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','parameter',6,'p_parameter','JazzParser.py',154),
  ('call_func -> VARIABLE','call_func',1,'p_call_func','JazzParser.py',158),
  ('call_func -> VARIABLE call_list','call_func',2,'p_call_func','JazzParser.py',159),
  ('call_func -> ret_list ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',160),
  ('call_func -> CALL ret_list ASSIGN VARIABLE call_list','call_func',5,'p_call_func','JazzParser.py',161),
  ('call_func -> CALL ret_list ASSIGN VARIABLE','call_func',4,'p_call_func','JazzParser.py',162),
  ('call_func -> variable ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',163),
  ('call_func -> type VARIABLE EQUAL VARIABLE call_list','call_func',5,'p_call_func','JazzParser.py',164),
  ('ret_list -> variable','ret_list',1,'p_ret_list','JazzParser.py',168),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','JazzParser.py',169),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','JazzParser.py',173),
  ('call_list -> expression','call_list',1,'p_call_list','JazzParser.py',174),
  ('ind -> COMMA','ind',1,'p_ind_exp','JazzParser.py',178),
  ('ind -> COMMA DOUBLE_DOT','ind',2,'p_ind_exp','JazzParser.py',179),
  ('ind -> DOUBLE_DOT COMMA','ind',2,'p_ind_exp','JazzParser.py',180),
  ('index -> expression','index',1,'p_index','JazzParser.py',184),
  ('index -> list_expressions','index',1,'p_index','JazzParser.py',185),
  ('index -> list_expressions ind','index',2,'p_index','JazzParser.py',186),
  ('index -> ind list_expressions','index',2,'p_index','JazzParser.py',187),
  ('index -> list_args ind','index',2,'p_index','JazzParser.py',188),
  ('index -> ind list_args','index',2,'p_index','JazzParser.py',189),
  ('index -> list_args','index',1,'p_index','JazzParser.py',190),
  ('index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','index',3,'p_index','JazzParser.py',191),
  ('robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET','robot_action',4,'p_robot_action','JazzParser.py',195),
  ('robot_action -> RIGHT','robot_action',1,'p_robot_action','JazzParser.py',196),
  ('robot_action -> LEFT','robot_action',1,'p_robot_action','JazzParser.py',197),
  ('robot_action -> WALL','robot_action',1,'p_robot_action','JazzParser.py',198),
  ('robot_action -> EXIT','robot_action',1,'p_robot_action','JazzParser.py',199),
  ('if -> IF expression error','if',3,'p_if_error1','JazzParser.py',203),
  ('if -> IF error','if',2,'p_if_error2','JazzParser.py',207),
  ('declaration -> type VARIABLE error','declaration',3,'p_declaration_error1','JazzParser.py',211),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression error','for',7,'p_for_error1','JazzParser.py',215),
]
