
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNEGATIVEleftANDnonassocLESSGREATERAND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINE\n                           | if NEW_LINE\n                           | for NEW_LINE\n                           | function NEW_LINEdeclaration : type VARIABLE EQUAL expression\n                       | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETassignment : variable ASSIGN expressionexpression : math_expression\n                      | variable\n                      | constantmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLEtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSElist_args : LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET\n                     | list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET\n                     | list_expressionslist_expressions : list_expressions COMMA expression\n                            | expressionif : IF expression BEGINIF NEW_LINE sentence_list ENDIFfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFORfunction : return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list ENDreturn_spec : return_spec COMMA type VARIABLE\n                       | type VARIABLE EQUALparameters : parameters COMMA parameter\n                      | parameterparameter : type VARIABLE\n                     | type VARIABLE EQUAL list_args\n                     | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET'
    
_lr_action_items = {'IF':([0,2,3,30,31,32,33,34,35,71,90,108,115,116,117,121,122,123,124,129,130,],[12,12,-3,-2,-4,-5,-6,-7,-8,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,2,3,30,31,32,33,34,35,71,90,108,115,116,117,121,122,123,124,129,130,],[13,13,-3,-2,-4,-5,-6,-7,-8,13,13,13,13,13,13,13,13,13,13,13,13,]),'FUNCTION':([0,2,3,14,30,31,32,33,34,35,51,71,81,90,108,115,116,117,121,122,123,124,129,130,],[15,15,-3,48,-2,-4,-5,-6,-7,-8,-57,15,-56,15,15,15,15,15,15,15,15,15,15,15,]),'VARIABLE':([0,2,3,9,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,42,48,51,54,55,56,57,61,62,63,65,67,70,71,85,86,90,91,101,108,109,111,115,116,117,119,121,122,123,124,129,130,],[10,10,-3,36,10,47,50,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-2,-4,-5,-6,-7,-8,10,10,66,10,10,10,10,10,10,10,10,10,81,10,10,97,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[18,18,-3,-2,-4,-5,-6,-7,-8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'CVINT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[19,19,-3,-2,-4,-5,-6,-7,-8,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'VINT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[20,20,-3,-2,-4,-5,-6,-7,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'CMINT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[21,21,-3,-2,-4,-5,-6,-7,-8,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[22,22,-3,-2,-4,-5,-6,-7,-8,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'CINT':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[23,23,-3,-2,-4,-5,-6,-7,-8,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'BOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[24,24,-3,-2,-4,-5,-6,-7,-8,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'CMBOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[25,25,-3,-2,-4,-5,-6,-7,-8,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'MBOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[26,26,-3,-2,-4,-5,-6,-7,-8,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CVBOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[27,27,-3,-2,-4,-5,-6,-7,-8,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'VBOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[28,28,-3,-2,-4,-5,-6,-7,-8,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CBOOL':([0,2,3,30,31,32,33,34,35,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[29,29,-3,-2,-4,-5,-6,-7,-8,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'$end':([1,2,3,30,31,32,33,34,35,],[0,-1,-3,-2,-4,-5,-6,-7,-8,]),'ENDIF':([3,30,31,32,33,34,35,90,],[-3,-2,-4,-5,-6,-7,-8,102,]),'END':([3,30,31,32,33,34,35,117,123,124,130,],[-3,-2,-4,-5,-6,-7,-8,125,131,132,135,]),'ENDFOR':([3,30,31,32,33,34,35,129,],[-3,-2,-4,-5,-6,-7,-8,134,]),'NEW_LINE':([4,5,6,7,8,10,39,40,41,43,44,45,46,52,53,58,59,60,64,69,72,73,74,75,76,77,78,96,99,102,105,106,113,114,125,131,132,134,135,],[31,32,33,34,35,-26,-12,-13,-14,-41,-42,-43,-44,-11,71,-19,-20,-21,-24,-9,-15,-16,-17,-18,-22,-23,-25,108,-10,-50,115,116,121,122,-55,-53,-54,-51,-52,]),'ASSIGN':([10,11,],[-26,37,]),'BEGINIF':([10,38,39,40,41,43,44,45,46,58,59,60,64,72,73,74,75,76,77,78,],[-26,53,-12,-13,-14,-41,-42,-43,-44,-19,-20,-21,-24,-15,-16,-17,-18,-22,-23,-25,]),'PLUS':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,54,-12,-13,-14,-41,-42,-43,-44,54,-19,-20,-21,-24,54,54,54,54,54,-22,-23,-25,54,54,54,54,]),'MINUS':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,55,-12,-13,-14,-41,-42,-43,-44,55,-19,-20,-21,-24,55,55,55,55,55,-22,-23,-25,55,55,55,55,]),'MATRIX_MUL':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,56,-12,-13,-14,-41,-42,-43,-44,56,-19,-20,-21,-24,56,56,56,56,56,-22,-23,-25,56,56,56,56,]),'ELEMENTAL_MUL':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,57,-12,-13,-14,-41,-42,-43,-44,57,-19,-20,-21,-24,57,57,57,57,57,-22,-23,-25,57,57,57,57,]),'LEFT_CYCLIC_SHIFT':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,58,-12,-13,-14,-41,-42,-43,-44,58,-19,-20,-21,-24,58,58,58,58,58,-22,-23,-25,58,58,58,58,]),'RIGHT_CYCLIC_SHIFT':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,59,-12,-13,-14,-41,-42,-43,-44,59,-19,-20,-21,-24,59,59,59,59,59,-22,-23,-25,59,59,59,59,]),'TRANSPOSITION':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,60,-12,-13,-14,-41,-42,-43,-44,60,-19,-20,-21,-24,60,60,60,60,60,-22,-23,-25,60,60,60,60,]),'LESS':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,61,-12,-13,-14,-41,-42,-43,-44,61,-19,-20,-21,61,61,61,61,61,61,None,None,61,61,61,61,61,]),'GREATER':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,62,-12,-13,-14,-41,-42,-43,-44,62,-19,-20,-21,62,62,62,62,62,62,None,None,62,62,62,62,62,]),'AND':([10,38,39,40,41,43,44,45,46,52,58,59,60,64,69,72,73,74,75,76,77,78,79,89,103,112,],[-26,63,-12,-13,-14,-41,-42,-43,-44,63,-19,-20,-21,63,63,63,63,63,63,-22,-23,-25,63,63,63,63,]),'DOUBLE_DOT':([10,39,40,41,43,44,45,46,58,59,60,64,72,73,74,75,76,77,78,79,],[-26,-12,-13,-14,-41,-42,-43,-44,-19,-20,-21,-24,-15,-16,-17,-18,-22,-23,-25,91,]),'COMMA':([10,14,39,40,41,43,44,45,46,51,58,59,60,64,72,73,74,75,76,77,78,81,82,84,87,88,89,92,97,98,107,110,112,118,120,126,127,128,133,],[-26,49,-12,-13,-14,-41,-42,-43,-44,-57,-19,-20,-21,-24,-15,-16,-17,-18,-22,-23,-25,-56,95,-59,100,101,-49,95,-60,101,-58,-45,-48,100,100,100,101,-46,-62,]),'RIGHT_FIGURE_BRACKET':([10,39,40,41,43,44,45,46,58,59,60,64,72,73,74,75,76,77,78,87,88,89,98,110,112,120,126,127,128,],[-26,-12,-13,-14,-41,-42,-43,-44,-19,-20,-21,-24,-15,-16,-17,-18,-22,-23,-25,99,-47,-49,110,-45,-48,128,133,110,-46,]),'BEGINFOR':([10,39,40,41,43,44,45,46,58,59,60,64,72,73,74,75,76,77,78,103,],[-26,-12,-13,-14,-41,-42,-43,-44,-19,-20,-21,-24,-15,-16,-17,-18,-22,-23,-25,113,]),'RIGHT_BRACKET':([10,39,40,41,43,44,45,46,58,59,60,64,68,72,73,74,75,76,77,78,80,82,84,88,89,92,97,107,110,112,118,128,133,],[-26,-12,-13,-14,-41,-42,-43,-44,-19,-20,-21,-24,83,-15,-16,-17,-18,-22,-23,-25,93,94,-59,-47,-49,104,-60,-58,-45,-48,-61,-46,-62,]),'NEGATIVE':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'INT_BINARY':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'INT_DECIMAL':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'TRUE':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FALSE':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'EQUAL':([36,47,97,],[51,65,109,]),'LEFT_BRACKET':([50,66,],[68,80,]),'LEFT_FIGURE_BRACKET':([51,70,100,109,111,119,],[70,86,111,119,86,86,]),'BEGIN':([83,93,94,104,],[96,105,106,114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,71,108,115,116,121,122,],[2,90,117,123,124,129,130,]),'single_sentence':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[3,30,3,30,3,3,3,30,3,3,30,30,30,30,]),'declaration':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[9,9,67,85,9,85,9,85,9,9,9,9,9,9,9,9,9,9,]),'variable':([0,2,12,37,42,51,54,55,56,57,61,62,63,65,70,71,86,90,91,101,108,109,111,115,116,117,119,121,122,123,124,129,130,],[11,11,40,40,40,40,40,40,40,40,40,40,40,40,40,11,40,11,40,40,11,40,40,11,11,11,40,11,11,11,11,11,11,]),'return_spec':([0,2,71,90,108,115,116,117,121,122,123,124,129,130,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'int':([0,2,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'bool':([0,2,49,68,71,80,90,95,108,115,116,117,121,122,123,124,129,130,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'expression':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[38,52,64,69,72,73,74,75,76,77,78,79,89,89,103,112,89,89,89,]),'math_expression':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'constant':([12,37,42,51,54,55,56,57,61,62,63,65,70,86,91,101,109,111,119,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'parameters':([68,80,],[82,92,]),'parameter':([68,80,95,],[84,84,107,]),'list_args':([70,109,111,119,],[87,118,120,126,]),'list_expressions':([70,86,109,111,119,],[88,98,88,88,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',26),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',30),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',31),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',35),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',36),
  ('single_sentence -> if NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',37),
  ('single_sentence -> for NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',38),
  ('single_sentence -> function NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',39),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',43),
  ('declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','declaration',6,'p_declaration','JazzParser.py',44),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',48),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',52),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',53),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',54),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',58),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',59),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',60),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',61),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',62),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',63),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',64),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',65),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',66),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',67),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',68),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',72),
  ('type -> int','type',1,'p_type','JazzParser.py',76),
  ('type -> bool','type',1,'p_type','JazzParser.py',77),
  ('int -> INT','int',1,'p_int','JazzParser.py',81),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',82),
  ('int -> VINT','int',1,'p_int','JazzParser.py',83),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',84),
  ('int -> MINT','int',1,'p_int','JazzParser.py',85),
  ('int -> CINT','int',1,'p_int','JazzParser.py',86),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',90),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',91),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',92),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',93),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',94),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',95),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',99),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',100),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',101),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',102),
  ('list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET','list_args',3,'p_list_args','JazzParser.py',106),
  ('list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','list_args',5,'p_list_args','JazzParser.py',107),
  ('list_args -> list_expressions','list_args',1,'p_list_args','JazzParser.py',108),
  ('list_expressions -> list_expressions COMMA expression','list_expressions',3,'p_list_expressions','JazzParser.py',112),
  ('list_expressions -> expression','list_expressions',1,'p_list_expressions','JazzParser.py',113),
  ('if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF','if',6,'p_if','JazzParser.py',117),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR','for',10,'p_for','JazzParser.py',121),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',10,'p_function','JazzParser.py',127),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',128),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',129),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',8,'p_function','JazzParser.py',130),
  ('return_spec -> return_spec COMMA type VARIABLE','return_spec',4,'p_return_spec','JazzParser.py',137),
  ('return_spec -> type VARIABLE EQUAL','return_spec',3,'p_return_spec','JazzParser.py',138),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','JazzParser.py',142),
  ('parameters -> parameter','parameters',1,'p_parameters','JazzParser.py',143),
  ('parameter -> type VARIABLE','parameter',2,'p_parameter','JazzParser.py',148),
  ('parameter -> type VARIABLE EQUAL list_args','parameter',4,'p_parameter','JazzParser.py',149),
  ('parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','parameter',6,'p_parameter','JazzParser.py',150),
]
