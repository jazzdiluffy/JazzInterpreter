
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNEGATIVEleftANDnonassocLESSGREATERAND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINE\n                           | if NEW_LINE\n                           | for NEW_LINE\n                           | function NEW_LINEdeclaration : type VARIABLE EQUAL expression\n                       | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETassignment : variable ASSIGN expression\n                      | variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETexpression : math_expression\n                      | variable\n                      | constantmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLEtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSElist_args : LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET\n                     | list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET\n                     | list_expressionslist_expressions : list_expressions COMMA expression\n                            | expressionif : IF expression BEGINIF NEW_LINE sentence_list ENDIFfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFORfunction : return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list ENDreturn_spec : return_spec COMMA type VARIABLE EQUAL\n                       | type VARIABLE EQUAL\n                       | type VARIABLEparameters : parameters COMMA parameter\n                      | parameterparameter : type VARIABLE\n                     | type VARIABLE EQUAL list_args\n                     | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET'
    
_lr_action_items = {'IF':([0,2,3,30,31,32,33,34,35,76,96,115,120,121,122,126,127,128,129,133,134,],[12,12,-3,-2,-4,-5,-6,-7,-8,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,2,3,30,31,32,33,34,35,76,96,115,120,121,122,126,127,128,129,133,134,],[13,13,-3,-2,-4,-5,-6,-7,-8,13,13,13,13,13,13,13,13,13,13,13,13,]),'FUNCTION':([0,2,3,14,30,31,32,33,34,35,36,51,76,96,100,115,120,121,122,126,127,128,129,133,134,],[15,15,-3,48,-2,-4,-5,-6,-7,-8,-59,-58,15,15,-57,15,15,15,15,15,15,15,15,15,15,]),'VARIABLE':([0,2,3,9,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,42,48,51,53,55,56,57,58,62,63,64,66,68,71,72,76,90,95,96,97,107,115,116,120,121,122,124,126,127,128,129,133,134,],[10,10,-3,36,10,47,50,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-2,-4,-5,-6,-7,-8,10,10,67,10,10,10,10,10,10,10,10,10,10,86,10,10,10,104,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[18,18,-3,-2,-4,-5,-6,-7,-8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'CVINT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[19,19,-3,-2,-4,-5,-6,-7,-8,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'VINT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[20,20,-3,-2,-4,-5,-6,-7,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'CMINT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[21,21,-3,-2,-4,-5,-6,-7,-8,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[22,22,-3,-2,-4,-5,-6,-7,-8,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'CINT':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[23,23,-3,-2,-4,-5,-6,-7,-8,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'BOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[24,24,-3,-2,-4,-5,-6,-7,-8,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'CMBOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[25,25,-3,-2,-4,-5,-6,-7,-8,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'MBOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[26,26,-3,-2,-4,-5,-6,-7,-8,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CVBOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[27,27,-3,-2,-4,-5,-6,-7,-8,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'VBOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[28,28,-3,-2,-4,-5,-6,-7,-8,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CBOOL':([0,2,3,30,31,32,33,34,35,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[29,29,-3,-2,-4,-5,-6,-7,-8,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'$end':([1,2,3,30,31,32,33,34,35,],[0,-1,-3,-2,-4,-5,-6,-7,-8,]),'ENDIF':([3,30,31,32,33,34,35,96,],[-3,-2,-4,-5,-6,-7,-8,109,]),'END':([3,30,31,32,33,34,35,122,128,129,134,],[-3,-2,-4,-5,-6,-7,-8,130,135,136,139,]),'ENDFOR':([3,30,31,32,33,34,35,133,],[-3,-2,-4,-5,-6,-7,-8,138,]),'NEW_LINE':([4,5,6,7,8,10,39,40,41,43,44,45,46,52,54,59,60,61,65,70,77,78,79,80,81,82,83,93,103,105,109,112,113,118,119,130,135,136,138,139,],[31,32,33,34,35,-27,-13,-14,-15,-42,-43,-44,-45,-11,76,-20,-21,-22,-25,-9,-16,-17,-18,-19,-23,-24,-26,-12,115,-10,-51,120,121,126,127,-56,-54,-55,-52,-53,]),'ASSIGN':([10,11,],[-27,37,]),'BEGINIF':([10,38,39,40,41,43,44,45,46,59,60,61,65,77,78,79,80,81,82,83,],[-27,54,-13,-14,-15,-42,-43,-44,-45,-20,-21,-22,-25,-16,-17,-18,-19,-23,-24,-26,]),'PLUS':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,55,-13,-14,-15,-42,-43,-44,-45,55,-20,-21,-22,-25,55,55,55,55,55,55,-23,-24,-26,55,55,55,]),'MINUS':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,56,-13,-14,-15,-42,-43,-44,-45,56,-20,-21,-22,-25,56,56,56,56,56,56,-23,-24,-26,56,56,56,]),'MATRIX_MUL':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,57,-13,-14,-15,-42,-43,-44,-45,57,-20,-21,-22,-25,57,57,57,57,57,57,-23,-24,-26,57,57,57,]),'ELEMENTAL_MUL':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,58,-13,-14,-15,-42,-43,-44,-45,58,-20,-21,-22,-25,58,58,58,58,58,58,-23,-24,-26,58,58,58,]),'LEFT_CYCLIC_SHIFT':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,59,-13,-14,-15,-42,-43,-44,-45,59,-20,-21,-22,-25,59,59,59,59,59,59,-23,-24,-26,59,59,59,]),'RIGHT_CYCLIC_SHIFT':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,60,-13,-14,-15,-42,-43,-44,-45,60,-20,-21,-22,-25,60,60,60,60,60,60,-23,-24,-26,60,60,60,]),'TRANSPOSITION':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,61,-13,-14,-15,-42,-43,-44,-45,61,-20,-21,-22,-25,61,61,61,61,61,61,-23,-24,-26,61,61,61,]),'LESS':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,62,-13,-14,-15,-42,-43,-44,-45,62,-20,-21,-22,62,62,62,62,62,62,62,None,None,62,62,62,62,]),'GREATER':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,63,-13,-14,-15,-42,-43,-44,-45,63,-20,-21,-22,63,63,63,63,63,63,63,None,None,63,63,63,63,]),'AND':([10,38,39,40,41,43,44,45,46,52,59,60,61,65,70,75,77,78,79,80,81,82,83,84,108,110,],[-27,64,-13,-14,-15,-42,-43,-44,-45,64,-20,-21,-22,64,64,64,64,64,64,64,-23,-24,-26,64,64,64,]),'COMMA':([10,14,36,39,40,41,43,44,45,46,51,59,60,61,65,73,74,75,77,78,79,80,81,82,83,87,89,91,92,98,100,104,106,108,114,117,123,125,131,132,137,],[-27,49,-59,-13,-14,-15,-42,-43,-44,-45,-58,-20,-21,-22,-25,94,95,-50,-16,-17,-18,-19,-23,-24,-26,102,-61,94,95,102,-57,-62,-46,-49,-60,94,94,-47,94,95,-64,]),'RIGHT_FIGURE_BRACKET':([10,39,40,41,43,44,45,46,59,60,61,65,73,74,75,77,78,79,80,81,82,83,91,92,106,108,117,125,131,132,],[-27,-13,-14,-15,-42,-43,-44,-45,-20,-21,-22,-25,93,-48,-50,-16,-17,-18,-19,-23,-24,-26,105,106,-46,-49,125,-47,137,106,]),'DOUBLE_DOT':([10,39,40,41,43,44,45,46,59,60,61,65,77,78,79,80,81,82,83,84,],[-27,-13,-14,-15,-42,-43,-44,-45,-20,-21,-22,-25,-16,-17,-18,-19,-23,-24,-26,97,]),'RIGHT_BRACKET':([10,39,40,41,43,44,45,46,59,60,61,65,69,74,75,77,78,79,80,81,82,83,85,87,89,98,104,106,108,114,123,125,137,],[-27,-13,-14,-15,-42,-43,-44,-45,-20,-21,-22,-25,88,-48,-50,-16,-17,-18,-19,-23,-24,-26,99,101,-61,111,-62,-46,-49,-60,-63,-47,-64,]),'BEGINFOR':([10,39,40,41,43,44,45,46,59,60,61,65,77,78,79,80,81,82,83,110,],[-27,-13,-14,-15,-42,-43,-44,-45,-20,-21,-22,-25,-16,-17,-18,-19,-23,-24,-26,118,]),'NEGATIVE':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'INT_BINARY':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'INT_DECIMAL':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'TRUE':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FALSE':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'EQUAL':([36,47,86,104,],[51,66,100,116,]),'LEFT_FIGURE_BRACKET':([37,51,53,71,94,107,116,124,],[53,71,72,72,107,72,124,72,]),'LEFT_BRACKET':([50,67,],[69,85,]),'BEGIN':([88,99,101,111,],[103,112,113,119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,76,115,120,121,126,127,],[2,96,122,128,129,133,134,]),'single_sentence':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[3,30,3,30,3,3,3,30,3,3,30,30,30,30,]),'declaration':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[9,9,68,90,9,90,9,90,9,9,9,9,9,9,9,9,9,9,]),'variable':([0,2,12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,76,95,96,97,107,115,116,120,121,122,124,126,127,128,129,133,134,],[11,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,11,40,11,40,40,11,40,11,11,11,40,11,11,11,11,11,11,]),'return_spec':([0,2,76,96,115,120,121,122,126,127,128,129,133,134,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'int':([0,2,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'bool':([0,2,49,69,76,85,96,102,115,120,121,122,126,127,128,129,133,134,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'expression':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[38,52,65,70,75,77,78,79,80,81,82,83,84,75,75,108,110,75,75,75,]),'math_expression':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'constant':([12,37,42,51,53,55,56,57,58,62,63,64,66,71,72,95,97,107,116,124,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'list_args':([53,71,107,116,124,],[73,91,117,123,131,]),'list_expressions':([53,71,72,107,116,124,],[74,74,92,74,74,132,]),'parameters':([69,85,],[87,98,]),'parameter':([69,85,102,],[89,89,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',28),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',32),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',33),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',37),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',38),
  ('single_sentence -> if NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',39),
  ('single_sentence -> for NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',40),
  ('single_sentence -> function NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',41),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',45),
  ('declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','declaration',6,'p_declaration','JazzParser.py',46),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',50),
  ('assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','assignment',5,'p_assignment','JazzParser.py',51),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',55),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',56),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',57),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',61),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',62),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',63),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',64),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',65),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',66),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',67),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',68),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',69),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',70),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',71),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',75),
  ('type -> int','type',1,'p_type','JazzParser.py',79),
  ('type -> bool','type',1,'p_type','JazzParser.py',80),
  ('int -> INT','int',1,'p_int','JazzParser.py',84),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',85),
  ('int -> VINT','int',1,'p_int','JazzParser.py',86),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',87),
  ('int -> MINT','int',1,'p_int','JazzParser.py',88),
  ('int -> CINT','int',1,'p_int','JazzParser.py',89),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',93),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',94),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',95),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',96),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',97),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',98),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',102),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',103),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',104),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',105),
  ('list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET','list_args',3,'p_list_args','JazzParser.py',109),
  ('list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','list_args',5,'p_list_args','JazzParser.py',110),
  ('list_args -> list_expressions','list_args',1,'p_list_args','JazzParser.py',111),
  ('list_expressions -> list_expressions COMMA expression','list_expressions',3,'p_list_expressions','JazzParser.py',115),
  ('list_expressions -> expression','list_expressions',1,'p_list_expressions','JazzParser.py',116),
  ('if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF','if',6,'p_if','JazzParser.py',120),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR','for',10,'p_for','JazzParser.py',124),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',10,'p_function','JazzParser.py',128),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',129),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',130),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',8,'p_function','JazzParser.py',131),
  ('return_spec -> return_spec COMMA type VARIABLE EQUAL','return_spec',5,'p_return_spec','JazzParser.py',135),
  ('return_spec -> type VARIABLE EQUAL','return_spec',3,'p_return_spec','JazzParser.py',136),
  ('return_spec -> type VARIABLE','return_spec',2,'p_return_spec','JazzParser.py',137),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','JazzParser.py',141),
  ('parameters -> parameter','parameters',1,'p_parameters','JazzParser.py',142),
  ('parameter -> type VARIABLE','parameter',2,'p_parameter','JazzParser.py',147),
  ('parameter -> type VARIABLE EQUAL list_args','parameter',4,'p_parameter','JazzParser.py',148),
  ('parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','parameter',6,'p_parameter','JazzParser.py',149),
]
