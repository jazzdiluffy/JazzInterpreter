
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINEdeclaration : type VARIABLE EQUAL expressionassignment : variable ASSIGN expressionexpression : math_expression\n                      | variable\n                      | constantmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLEtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSE'
    
_lr_action_items = {'VARIABLE':([0,2,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,33,39,40,41,42,46,47,48,],[7,7,-3,26,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-2,-4,-5,7,7,7,7,7,7,7,7,7,7,]),'INT':([0,2,3,23,24,25,],[11,11,-3,-2,-4,-5,]),'CVINT':([0,2,3,23,24,25,],[12,12,-3,-2,-4,-5,]),'VINT':([0,2,3,23,24,25,],[13,13,-3,-2,-4,-5,]),'CMINT':([0,2,3,23,24,25,],[14,14,-3,-2,-4,-5,]),'MINT':([0,2,3,23,24,25,],[15,15,-3,-2,-4,-5,]),'CINT':([0,2,3,23,24,25,],[16,16,-3,-2,-4,-5,]),'BOOL':([0,2,3,23,24,25,],[17,17,-3,-2,-4,-5,]),'CMBOOL':([0,2,3,23,24,25,],[18,18,-3,-2,-4,-5,]),'MBOOL':([0,2,3,23,24,25,],[19,19,-3,-2,-4,-5,]),'CVBOOL':([0,2,3,23,24,25,],[20,20,-3,-2,-4,-5,]),'VBOOL':([0,2,3,23,24,25,],[21,21,-3,-2,-4,-5,]),'CBOOL':([0,2,3,23,24,25,],[22,22,-3,-2,-4,-5,]),'$end':([1,2,3,23,24,25,],[0,-1,-3,-2,-4,-5,]),'NEW_LINE':([4,5,7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[24,25,-22,-9,-7,-8,-10,-37,-38,-39,-40,-6,-15,-16,-17,-20,-11,-12,-13,-14,-18,-19,-21,]),'ASSIGN':([7,8,],[-22,27,]),'PLUS':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,39,-8,-10,-37,-38,-39,-40,39,-15,-16,-17,39,39,39,39,39,39,39,39,]),'MINUS':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,40,-8,-10,-37,-38,-39,-40,40,-15,-16,-17,40,40,40,40,40,40,40,40,]),'MATRIX_MUL':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,41,-8,-10,-37,-38,-39,-40,41,-15,-16,-17,41,41,41,41,41,41,41,41,]),'ELEMENTAL_MUL':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,42,-8,-10,-37,-38,-39,-40,42,-15,-16,-17,42,42,42,42,42,42,42,42,]),'LEFT_CYCLIC_SHIFT':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,43,-8,-10,-37,-38,-39,-40,43,-15,-16,-17,43,43,43,43,43,43,43,43,]),'RIGHT_CYCLIC_SHIFT':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,44,-8,-10,-37,-38,-39,-40,44,-15,-16,-17,44,44,44,44,44,44,44,44,]),'TRANSPOSITION':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,45,-8,-10,-37,-38,-39,-40,45,-15,-16,-17,45,45,45,45,45,45,45,45,]),'LESS':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,46,-8,-10,-37,-38,-39,-40,46,-15,-16,-17,46,46,46,46,46,46,46,46,]),'GREATER':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,47,-8,-10,-37,-38,-39,-40,47,-15,-16,-17,47,47,47,47,47,47,47,47,]),'AND':([7,29,30,31,32,34,35,36,37,38,43,44,45,49,50,51,52,53,54,55,56,],[-22,-9,48,-8,-10,-37,-38,-39,-40,48,-15,-16,-17,48,48,48,48,48,48,48,48,]),'EQUAL':([26,],[28,]),'NEGATIVE':([27,28,33,39,40,41,42,46,47,48,],[33,33,33,33,33,33,33,33,33,33,]),'INT_BINARY':([27,28,33,39,40,41,42,46,47,48,],[34,34,34,34,34,34,34,34,34,34,]),'INT_DECIMAL':([27,28,33,39,40,41,42,46,47,48,],[35,35,35,35,35,35,35,35,35,35,]),'TRUE':([27,28,33,39,40,41,42,46,47,48,],[36,36,36,36,36,36,36,36,36,36,]),'FALSE':([27,28,33,39,40,41,42,46,47,48,],[37,37,37,37,37,37,37,37,37,37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,],[2,]),'single_sentence':([0,2,],[3,23,]),'declaration':([0,2,],[4,4,]),'assignment':([0,2,],[5,5,]),'type':([0,2,],[6,6,]),'variable':([0,2,27,28,33,39,40,41,42,46,47,48,],[8,8,29,29,29,29,29,29,29,29,29,29,]),'int':([0,2,],[9,9,]),'bool':([0,2,],[10,10,]),'expression':([27,28,33,39,40,41,42,46,47,48,],[30,38,49,50,51,52,53,54,55,56,]),'math_expression':([27,28,33,39,40,41,42,46,47,48,],[31,31,31,31,31,31,31,31,31,31,]),'constant':([27,28,33,39,40,41,42,46,47,48,],[32,32,32,32,32,32,32,32,32,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',15),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',19),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',20),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',28),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',29),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',33),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',39),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',45),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',46),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',47),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',51),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',52),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',53),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',54),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',55),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',56),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',57),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',58),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',59),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',60),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',61),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',67),
  ('type -> int','type',1,'p_type','JazzParser.py',71),
  ('type -> bool','type',1,'p_type','JazzParser.py',72),
  ('int -> INT','int',1,'p_int','JazzParser.py',76),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',77),
  ('int -> VINT','int',1,'p_int','JazzParser.py',78),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',79),
  ('int -> MINT','int',1,'p_int','JazzParser.py',80),
  ('int -> CINT','int',1,'p_int','JazzParser.py',81),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',85),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',86),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',87),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',88),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',89),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',90),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',94),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',95),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',96),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',97),
]
