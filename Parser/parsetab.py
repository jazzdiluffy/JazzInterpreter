
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNEGATIVEleftANDnonassocLESSGREATERAND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CALL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINE\n                           | if NEW_LINE\n                           | for NEW_LINE\n                           | function NEW_LINE\n                           | call_func NEW_LINEdeclaration : type VARIABLE EQUAL expression\n                       | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETassignment : variable ASSIGN expression\n                      | variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETexpression : math_expression\n                      | variable\n                      | constantmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLE\n                   | VARIABLE LEFT_BRACKET index RIGHT_BRACKETtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSElist_args : LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET\n                     | list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET\n                     | list_expressionslist_expressions : list_expressions COMMA expression\n                            | expressionif : IF expression BEGINIF NEW_LINE sentence_list ENDIFfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFORfunction : return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list ENDreturn_spec : return_spec COMMA type VARIABLE EQUAL\n                       | type VARIABLE EQUAL\n                       | type VARIABLEparameters : parameters COMMA parameter\n                      | parameterparameter : type VARIABLE\n                     | type VARIABLE EQUAL constant\n                     | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETcall_func : VARIABLE\n                     | VARIABLE call_list\n                     | ret_list ASSIGN VARIABLE call_list\n                     | CALL ret_list ASSIGN VARIABLE call_list\n                     | CALL ret_list ASSIGN VARIABLE\n                     | variable ASSIGN VARIABLE call_list\n                     | type VARIABLE EQUAL VARIABLE call_listret_list : variable\n                    | ret_list COMMA variablecall_list : call_list COMMA expression\n                    | expressionind : COMMA\n               | COMMA DOUBLE_DOT\n               | DOUBLE_DOT COMMAindex : expression\n                 | list_expressions\n                 | list_expressions ind\n                 | ind list_expressions\n                 | list_args ind\n                 | ind list_args\n                 | list_args\n                 | LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET'
    
_lr_action_items = {'IF':([0,2,3,33,34,35,36,37,38,39,122,142,160,165,166,167,170,171,172,173,176,177,],[13,13,-3,-2,-4,-5,-6,-7,-8,-9,13,13,13,13,13,13,13,13,13,13,13,13,]),'FOR':([0,2,3,33,34,35,36,37,38,39,122,142,160,165,166,167,170,171,172,173,176,177,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,14,14,14,14,14,14,14,14,14,14,14,14,]),'FUNCTION':([0,2,3,15,33,34,35,36,37,38,39,40,63,122,142,146,160,165,166,167,170,171,172,173,176,177,],[16,16,-3,56,-2,-4,-5,-6,-7,-8,-9,-61,-60,16,16,-59,16,16,16,16,16,16,16,16,16,16,]),'VARIABLE':([0,2,3,10,11,13,14,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,53,56,59,60,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,90,92,94,95,97,101,105,110,111,122,129,131,135,138,142,143,160,165,166,167,169,170,171,172,173,176,177,],[11,11,-3,40,41,41,55,58,41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-2,-4,-5,-6,-7,-8,-9,41,41,86,89,92,41,95,41,41,41,-78,41,41,41,41,41,41,41,41,41,41,125,41,131,41,41,41,41,-79,-80,11,150,41,41,41,11,41,11,11,11,11,41,11,11,11,11,11,11,]),'CALL':([0,2,3,33,34,35,36,37,38,39,122,142,160,165,166,167,170,171,172,173,176,177,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,18,18,18,18,18,18,18,18,18,18,18,18,]),'INT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[21,21,-3,-2,-4,-5,-6,-7,-8,-9,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'CVINT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VINT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[23,23,-3,-2,-4,-5,-6,-7,-8,-9,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'CMINT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[24,24,-3,-2,-4,-5,-6,-7,-8,-9,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'MINT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'BOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'CMBOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'MBOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CVBOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'VBOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,33,34,35,36,37,38,39,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'$end':([1,2,3,33,34,35,36,37,38,39,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,]),'ENDIF':([3,33,34,35,36,37,38,39,142,],[-3,-2,-4,-5,-6,-7,-8,-9,154,]),'END':([3,33,34,35,36,37,38,39,167,172,173,177,],[-3,-2,-4,-5,-6,-7,-8,-9,174,178,179,182,]),'ENDFOR':([3,33,34,35,36,37,38,39,176,],[-3,-2,-4,-5,-6,-7,-8,-9,181,]),'NEW_LINE':([4,5,6,7,8,9,11,41,42,44,45,46,47,49,50,51,52,77,78,79,83,84,86,87,95,96,98,99,112,113,114,115,116,117,118,121,130,131,132,141,149,151,152,154,157,158,163,164,174,178,179,181,182,],[34,35,36,37,38,39,-67,-28,-68,-77,-14,-15,-16,-44,-45,-46,-47,-21,-22,-23,-26,-12,-28,122,-28,-10,-76,-29,-17,-18,-19,-20,-24,-25,-27,-72,-69,-71,-73,-13,160,-70,-11,-53,165,166,170,171,-58,-56,-57,-54,-55,]),'ASSIGN':([11,12,17,41,61,62,93,99,],[-28,53,59,-28,94,-74,-75,-29,]),'COMMA':([11,12,15,17,40,41,42,43,44,45,46,47,49,50,51,52,61,62,63,66,67,69,72,77,78,79,83,93,98,99,102,103,104,108,109,112,113,114,115,116,117,118,119,120,121,126,128,130,132,133,134,137,140,144,146,150,151,153,159,162,168,175,180,],[-28,-74,57,60,-61,-28,64,71,-77,-14,-15,-16,-44,-45,-46,-47,60,-74,-60,-52,101,107,111,-21,-22,-23,-26,-75,-76,-29,135,136,-52,136,135,-17,-18,-19,-20,-24,-25,-27,136,135,64,148,-63,64,64,136,-51,135,-48,148,-59,-64,64,136,-62,-49,-65,136,-66,]),'LEFT_BRACKET':([11,41,58,86,89,95,],[43,43,91,43,124,43,]),'NEGATIVE':([11,13,43,48,53,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,110,111,131,135,138,143,169,],[48,48,48,48,48,48,48,48,48,-78,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-79,-80,48,48,48,48,48,]),'INT_BINARY':([11,13,43,48,53,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,110,111,131,135,138,143,161,169,],[49,49,49,49,49,49,49,49,49,-78,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-79,-80,49,49,49,49,49,49,]),'INT_DECIMAL':([11,13,43,48,53,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,110,111,131,135,138,143,161,169,],[50,50,50,50,50,50,50,50,50,-78,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-79,-80,50,50,50,50,50,50,]),'TRUE':([11,13,43,48,53,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,110,111,131,135,138,143,161,169,],[51,51,51,51,51,51,51,51,51,-78,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-79,-80,51,51,51,51,51,51,]),'FALSE':([11,13,43,48,53,63,64,68,70,71,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,110,111,131,135,138,143,161,169,],[52,52,52,52,52,52,52,52,52,-78,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-79,-80,52,52,52,52,52,52,]),'EQUAL':([40,55,125,150,],[63,88,146,161,]),'PLUS':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,73,-14,-15,-16,-44,-45,-46,-47,73,73,-21,-22,-23,-26,73,-28,-28,73,73,-29,73,73,73,73,73,-24,-25,-27,73,73,73,]),'MINUS':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,74,-14,-15,-16,-44,-45,-46,-47,74,74,-21,-22,-23,-26,74,-28,-28,74,74,-29,74,74,74,74,74,-24,-25,-27,74,74,74,]),'MATRIX_MUL':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,75,-14,-15,-16,-44,-45,-46,-47,75,75,-21,-22,-23,-26,75,-28,-28,75,75,-29,75,75,75,75,75,-24,-25,-27,75,75,75,]),'ELEMENTAL_MUL':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,76,-14,-15,-16,-44,-45,-46,-47,76,76,-21,-22,-23,-26,76,-28,-28,76,76,-29,76,76,76,76,76,-24,-25,-27,76,76,76,]),'LEFT_CYCLIC_SHIFT':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,77,-14,-15,-16,-44,-45,-46,-47,77,77,-21,-22,-23,-26,77,-28,-28,77,77,-29,77,77,77,77,77,-24,-25,-27,77,77,77,]),'RIGHT_CYCLIC_SHIFT':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,78,-14,-15,-16,-44,-45,-46,-47,78,78,-21,-22,-23,-26,78,-28,-28,78,78,-29,78,78,78,78,78,-24,-25,-27,78,78,78,]),'TRANSPOSITION':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,79,-14,-15,-16,-44,-45,-46,-47,79,79,-21,-22,-23,-26,79,-28,-28,79,79,-29,79,79,79,79,79,-24,-25,-27,79,79,79,]),'LESS':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,80,-14,-15,-16,-44,-45,-46,-47,80,80,-21,-22,-23,80,80,-28,-28,80,80,-29,80,80,80,80,80,None,None,80,80,80,80,]),'GREATER':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,81,-14,-15,-16,-44,-45,-46,-47,81,81,-21,-22,-23,81,81,-28,-28,81,81,-29,81,81,81,81,81,None,None,81,81,81,81,]),'AND':([41,44,45,46,47,49,50,51,52,54,66,77,78,79,83,84,86,95,96,98,99,104,112,113,114,115,116,117,118,123,134,155,],[-28,82,-14,-15,-16,-44,-45,-46,-47,82,82,-21,-22,-23,82,82,-28,-28,82,82,-29,82,82,82,82,82,-24,-25,-27,82,82,82,]),'BEGINIF':([41,45,46,47,49,50,51,52,54,77,78,79,83,99,112,113,114,115,116,117,118,],[-28,-14,-15,-16,-44,-45,-46,-47,87,-21,-22,-23,-26,-29,-17,-18,-19,-20,-24,-25,-27,]),'RIGHT_BRACKET':([41,45,46,47,49,50,51,52,65,66,67,69,77,78,79,83,91,99,100,101,102,103,104,106,107,110,111,112,113,114,115,116,117,118,124,126,128,134,139,140,144,150,159,162,168,180,],[-28,-14,-15,-16,-44,-45,-46,-47,99,-52,-50,-87,-21,-22,-23,-26,127,-29,-83,-78,-50,-86,-52,-85,-78,-79,-80,-17,-18,-19,-20,-24,-25,-27,145,147,-63,-51,-88,-48,156,-64,-62,-49,-65,-66,]),'DOUBLE_DOT':([41,43,45,46,47,49,50,51,52,66,67,69,71,77,78,79,83,99,101,107,112,113,114,115,116,117,118,123,134,140,162,],[-28,72,-14,-15,-16,-44,-45,-46,-47,-52,72,72,110,-21,-22,-23,-26,-29,110,110,-17,-18,-19,-20,-24,-25,-27,143,-51,-48,-49,]),'RIGHT_FIGURE_BRACKET':([41,45,46,47,49,50,51,52,77,78,79,83,99,104,108,109,112,113,114,115,116,117,118,119,120,133,134,137,140,153,162,175,],[-28,-14,-15,-16,-44,-45,-46,-47,-21,-22,-23,-26,-29,-52,139,140,-17,-18,-19,-20,-24,-25,-27,141,-50,152,-51,140,-48,162,-49,180,]),'BEGINFOR':([41,45,46,47,49,50,51,52,77,78,79,83,99,112,113,114,115,116,117,118,155,],[-28,-14,-15,-16,-44,-45,-46,-47,-21,-22,-23,-26,-29,-17,-18,-19,-20,-24,-25,-27,163,]),'LEFT_FIGURE_BRACKET':([43,53,63,68,70,71,85,97,107,110,111,136,138,161,169,],[70,85,97,105,105,-78,105,105,138,-79,-80,138,105,169,105,]),'BEGIN':([127,145,147,156,],[149,157,158,164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,122,160,165,166,170,171,],[2,142,167,172,173,176,177,]),'single_sentence':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[3,33,3,33,3,3,3,33,3,3,33,33,33,33,]),'declaration':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'call_func':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[10,10,90,129,10,129,10,129,10,10,10,10,10,10,10,10,10,10,]),'variable':([0,2,11,13,18,43,48,53,60,63,64,68,70,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,122,131,135,138,142,143,160,165,166,167,169,170,171,172,173,176,177,],[12,12,46,46,62,46,46,46,93,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,12,46,46,46,12,46,12,12,12,12,46,12,12,12,12,12,12,]),'return_spec':([0,2,122,142,160,165,166,167,170,171,172,173,176,177,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'ret_list':([0,2,18,122,142,160,165,166,167,170,171,172,173,176,177,],[17,17,61,17,17,17,17,17,17,17,17,17,17,17,17,]),'int':([0,2,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'bool':([0,2,57,91,122,124,142,148,160,165,166,167,170,171,172,173,176,177,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'call_list':([11,86,92,95,131,],[42,121,130,132,151,]),'expression':([11,13,43,48,53,63,64,68,70,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,131,135,138,143,169,],[44,54,66,83,84,96,98,104,104,112,113,114,115,116,117,118,104,44,123,44,44,104,134,104,44,134,104,155,104,]),'math_expression':([11,13,43,48,53,63,64,68,70,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,131,135,138,143,169,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'constant':([11,13,43,48,53,63,64,68,70,73,74,75,76,80,81,82,85,86,88,92,95,97,101,105,131,135,138,143,161,169,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,168,47,]),'index':([43,],[65,]),'list_expressions':([43,68,70,85,97,105,138,169,],[67,102,109,120,120,137,120,120,]),'ind':([43,67,69,],[68,100,106,]),'list_args':([43,68,70,85,97,138,169,],[69,103,108,119,133,153,175,]),'parameters':([91,124,],[126,144,]),'parameter':([91,124,148,],[128,128,159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',30),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',34),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',35),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',39),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',40),
  ('single_sentence -> if NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',41),
  ('single_sentence -> for NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',42),
  ('single_sentence -> function NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',43),
  ('single_sentence -> call_func NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',44),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',48),
  ('declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','declaration',6,'p_declaration','JazzParser.py',49),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',53),
  ('assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','assignment',5,'p_assignment','JazzParser.py',54),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',58),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',59),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',60),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',64),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',65),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',66),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',67),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',68),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',69),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',70),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',71),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',72),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',73),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',74),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',78),
  ('variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET','variable',4,'p_variable','JazzParser.py',79),
  ('type -> int','type',1,'p_type','JazzParser.py',83),
  ('type -> bool','type',1,'p_type','JazzParser.py',84),
  ('int -> INT','int',1,'p_int','JazzParser.py',88),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',89),
  ('int -> VINT','int',1,'p_int','JazzParser.py',90),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',91),
  ('int -> MINT','int',1,'p_int','JazzParser.py',92),
  ('int -> CINT','int',1,'p_int','JazzParser.py',93),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',97),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',98),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',99),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',100),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',101),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',102),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',106),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',107),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',108),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',109),
  ('list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET','list_args',3,'p_list_args','JazzParser.py',113),
  ('list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','list_args',5,'p_list_args','JazzParser.py',114),
  ('list_args -> list_expressions','list_args',1,'p_list_args','JazzParser.py',115),
  ('list_expressions -> list_expressions COMMA expression','list_expressions',3,'p_list_expressions','JazzParser.py',119),
  ('list_expressions -> expression','list_expressions',1,'p_list_expressions','JazzParser.py',120),
  ('if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF','if',6,'p_if','JazzParser.py',124),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR','for',10,'p_for','JazzParser.py',128),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',10,'p_function','JazzParser.py',132),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',133),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',134),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',8,'p_function','JazzParser.py',135),
  ('return_spec -> return_spec COMMA type VARIABLE EQUAL','return_spec',5,'p_return_spec','JazzParser.py',139),
  ('return_spec -> type VARIABLE EQUAL','return_spec',3,'p_return_spec','JazzParser.py',140),
  ('return_spec -> type VARIABLE','return_spec',2,'p_return_spec','JazzParser.py',141),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','JazzParser.py',145),
  ('parameters -> parameter','parameters',1,'p_parameters','JazzParser.py',146),
  ('parameter -> type VARIABLE','parameter',2,'p_parameter','JazzParser.py',150),
  ('parameter -> type VARIABLE EQUAL constant','parameter',4,'p_parameter','JazzParser.py',151),
  ('parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','parameter',6,'p_parameter','JazzParser.py',152),
  ('call_func -> VARIABLE','call_func',1,'p_call_func','JazzParser.py',156),
  ('call_func -> VARIABLE call_list','call_func',2,'p_call_func','JazzParser.py',157),
  ('call_func -> ret_list ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',158),
  ('call_func -> CALL ret_list ASSIGN VARIABLE call_list','call_func',5,'p_call_func','JazzParser.py',159),
  ('call_func -> CALL ret_list ASSIGN VARIABLE','call_func',4,'p_call_func','JazzParser.py',160),
  ('call_func -> variable ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',161),
  ('call_func -> type VARIABLE EQUAL VARIABLE call_list','call_func',5,'p_call_func','JazzParser.py',162),
  ('ret_list -> variable','ret_list',1,'p_ret_list','JazzParser.py',166),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','JazzParser.py',167),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','JazzParser.py',171),
  ('call_list -> expression','call_list',1,'p_call_list','JazzParser.py',172),
  ('ind -> COMMA','ind',1,'p_ind_exp','JazzParser.py',176),
  ('ind -> COMMA DOUBLE_DOT','ind',2,'p_ind_exp','JazzParser.py',177),
  ('ind -> DOUBLE_DOT COMMA','ind',2,'p_ind_exp','JazzParser.py',178),
  ('index -> expression','index',1,'p_index','JazzParser.py',182),
  ('index -> list_expressions','index',1,'p_index','JazzParser.py',183),
  ('index -> list_expressions ind','index',2,'p_index','JazzParser.py',184),
  ('index -> ind list_expressions','index',2,'p_index','JazzParser.py',185),
  ('index -> list_args ind','index',2,'p_index','JazzParser.py',186),
  ('index -> ind list_args','index',2,'p_index','JazzParser.py',187),
  ('index -> list_args','index',1,'p_index','JazzParser.py',188),
  ('index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','index',3,'p_index','JazzParser.py',189),
]
