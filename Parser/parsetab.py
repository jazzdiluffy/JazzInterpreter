
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNEGATIVEleftANDnonassocLESSGREATERAND ASSIGN BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COMMA CVBOOL CVINT DOUBLE_DOT ELEMENTAL_MUL END ENDFOR ENDIF EQUAL EXIT FALSE FOR FUNCTION GREATER IF INT INT_BINARY INT_DECIMAL LEFT LEFT_BRACKET LEFT_CYCLIC_SHIFT LEFT_FIGURE_BRACKET LESS MATRIX_MUL MBOOL MINT MINUS MOVE NEGATIVE NEW_LINE PLUS RIGHT RIGHT_BRACKET RIGHT_CYCLIC_SHIFT RIGHT_FIGURE_BRACKET SUM TRANSPOSITION TRUE VARIABLE VBOOL VINT WALLprogram : sentence_listsentence_list : sentence_list single_sentence\n                         | single_sentencesingle_sentence : declaration NEW_LINE\n                           | assignment NEW_LINE\n                           | if NEW_LINE\n                           | for NEW_LINE\n                           | function NEW_LINE\n                           | call_func NEW_LINEdeclaration : type VARIABLE EQUAL expression\n                       | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETassignment : variable ASSIGN expression\n                      | variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETexpression : math_expression\n                      | variable\n                      | constantmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | expression MATRIX_MUL expression\n                           | expression ELEMENTAL_MUL expression\n                           | expression LEFT_CYCLIC_SHIFT\n                           | expression RIGHT_CYCLIC_SHIFT\n                           | expression TRANSPOSITION\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | NEGATIVE expression\n                           | expression AND expressionvariable : VARIABLEtype : int\n                | boolint : INT\n               | CVINT\n               | VINT\n               | CMINT\n               | MINT\n               | CINTbool : BOOL\n                | CMBOOL\n                | MBOOL\n                | CVBOOL\n                | VBOOL\n                | CBOOLconstant : INT_BINARY\n                    | INT_DECIMAL\n                    | TRUE\n                    | FALSElist_args : LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET\n                     | list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET\n                     | list_expressionslist_expressions : list_expressions COMMA expression\n                            | expressionif : IF expression BEGINIF NEW_LINE sentence_list ENDIFfor : FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFORfunction : return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END\n                    | FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list ENDreturn_spec : return_spec COMMA type VARIABLE EQUAL\n                       | type VARIABLE EQUAL\n                       | type VARIABLEparameters : parameters COMMA parameter\n                      | parameterparameter : type VARIABLE\n                     | type VARIABLE EQUAL constant\n                     | type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKETcall_func : VARIABLE\n                         | VARIABLE call_list\n                         | ret_list ASSIGN VARIABLE call_list\n                         | ret_list ASSIGN VARIABLE\n                         | variable ASSIGN VARIABLE call_list\n                         | type VARIABLE EQUAL VARIABLE call_listret_list : variable\n                    | ret_list COMMA variablecall_list : call_list COMMA expression\n                    | expression'
    
_lr_action_items = {'IF':([0,2,3,32,33,34,35,36,37,38,98,113,132,137,138,139,143,144,145,146,149,150,],[13,13,-3,-2,-4,-5,-6,-7,-8,-9,13,13,13,13,13,13,13,13,13,13,13,13,]),'FOR':([0,2,3,32,33,34,35,36,37,38,98,113,132,137,138,139,143,144,145,146,149,150,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,14,14,14,14,14,14,14,14,14,14,14,14,]),'FUNCTION':([0,2,3,15,32,33,34,35,36,37,38,39,59,98,113,117,132,137,138,139,143,144,145,146,149,150,],[16,16,-3,54,-2,-4,-5,-6,-7,-8,-9,-60,-59,16,16,-58,16,16,16,16,16,16,16,16,16,16,]),'VARIABLE':([0,2,3,10,11,13,14,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,46,51,54,57,58,59,60,61,62,63,64,68,69,70,73,74,76,78,80,82,84,93,98,105,112,113,114,124,132,137,138,139,141,143,144,145,146,149,150,],[11,11,-3,39,40,40,53,56,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-2,-4,-5,-6,-7,-8,-9,40,74,77,80,40,82,40,40,40,40,40,40,40,40,40,40,40,101,40,40,40,40,11,121,40,11,40,40,11,11,11,11,40,11,11,11,11,11,11,]),'INT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'CVINT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[21,21,-3,-2,-4,-5,-6,-7,-8,-9,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'VINT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'CMINT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[23,23,-3,-2,-4,-5,-6,-7,-8,-9,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'MINT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[24,24,-3,-2,-4,-5,-6,-7,-8,-9,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'CINT':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'BOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CMBOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MBOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVBOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'VBOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CBOOL':([0,2,3,32,33,34,35,36,37,38,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'$end':([1,2,3,32,33,34,35,36,37,38,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,]),'ENDIF':([3,32,33,34,35,36,37,38,113,],[-3,-2,-4,-5,-6,-7,-8,-9,126,]),'END':([3,32,33,34,35,36,37,38,139,145,146,150,],[-3,-2,-4,-5,-6,-7,-8,-9,147,151,152,155,]),'ENDFOR':([3,32,33,34,35,36,37,38,149,],[-3,-2,-4,-5,-6,-7,-8,-9,154,]),'NEW_LINE':([4,5,6,7,8,9,11,40,41,42,43,44,45,47,48,49,50,65,66,67,71,72,74,75,80,82,83,85,86,87,88,89,90,91,92,97,106,107,110,120,122,126,129,130,135,136,147,151,152,154,155,],[33,34,35,36,37,38,-66,-28,-67,-75,-14,-15,-16,-43,-44,-45,-46,-21,-22,-23,-26,-12,-28,98,-69,-28,-10,-74,-17,-18,-19,-20,-24,-25,-27,-70,-68,-71,-13,132,-11,-52,137,138,143,144,-57,-55,-56,-53,-54,]),'ASSIGN':([11,12,17,40,81,],[-28,51,57,-28,-73,]),'COMMA':([11,12,15,17,39,40,41,42,43,44,45,47,48,49,50,59,65,66,67,71,81,85,86,87,88,89,90,91,92,94,95,96,97,102,104,106,107,108,109,115,117,121,123,125,131,134,140,142,148,153,],[-28,-72,55,58,-60,-28,60,-75,-14,-15,-16,-43,-44,-45,-46,-59,-21,-22,-23,-26,-73,-74,-17,-18,-19,-20,-24,-25,-27,111,112,-51,60,119,-62,60,60,111,112,119,-58,-63,-47,-50,-61,111,-64,-48,111,-65,]),'NEGATIVE':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,141,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'INT_BINARY':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,133,141,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INT_DECIMAL':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,133,141,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,133,141,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,133,141,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'EQUAL':([39,53,101,121,],[59,76,117,133,]),'PLUS':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,61,-14,-15,-16,-43,-44,-45,-46,61,-21,-22,-23,-26,61,-28,-28,61,61,61,61,61,61,-24,-25,-27,61,61,61,61,]),'MINUS':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,62,-14,-15,-16,-43,-44,-45,-46,62,-21,-22,-23,-26,62,-28,-28,62,62,62,62,62,62,-24,-25,-27,62,62,62,62,]),'MATRIX_MUL':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,63,-14,-15,-16,-43,-44,-45,-46,63,-21,-22,-23,-26,63,-28,-28,63,63,63,63,63,63,-24,-25,-27,63,63,63,63,]),'ELEMENTAL_MUL':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,64,-14,-15,-16,-43,-44,-45,-46,64,-21,-22,-23,-26,64,-28,-28,64,64,64,64,64,64,-24,-25,-27,64,64,64,64,]),'LEFT_CYCLIC_SHIFT':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,65,-14,-15,-16,-43,-44,-45,-46,65,-21,-22,-23,-26,65,-28,-28,65,65,65,65,65,65,-24,-25,-27,65,65,65,65,]),'RIGHT_CYCLIC_SHIFT':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,66,-14,-15,-16,-43,-44,-45,-46,66,-21,-22,-23,-26,66,-28,-28,66,66,66,66,66,66,-24,-25,-27,66,66,66,66,]),'TRANSPOSITION':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,67,-14,-15,-16,-43,-44,-45,-46,67,-21,-22,-23,-26,67,-28,-28,67,67,67,67,67,67,-24,-25,-27,67,67,67,67,]),'LESS':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,68,-14,-15,-16,-43,-44,-45,-46,68,-21,-22,-23,68,68,-28,-28,68,68,68,68,68,68,None,None,68,68,68,68,68,]),'GREATER':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,69,-14,-15,-16,-43,-44,-45,-46,69,-21,-22,-23,69,69,-28,-28,69,69,69,69,69,69,None,None,69,69,69,69,69,]),'AND':([40,42,43,44,45,47,48,49,50,52,65,66,67,71,72,74,82,83,85,86,87,88,89,90,91,92,96,99,125,127,],[-28,70,-14,-15,-16,-43,-44,-45,-46,70,-21,-22,-23,70,70,-28,-28,70,70,70,70,70,70,-24,-25,-27,70,70,70,70,]),'BEGINIF':([40,43,44,45,47,48,49,50,52,65,66,67,71,86,87,88,89,90,91,92,],[-28,-14,-15,-16,-43,-44,-45,-46,75,-21,-22,-23,-26,-17,-18,-19,-20,-24,-25,-27,]),'RIGHT_FIGURE_BRACKET':([40,43,44,45,47,48,49,50,65,66,67,71,86,87,88,89,90,91,92,94,95,96,108,109,123,125,134,142,148,],[-28,-14,-15,-16,-43,-44,-45,-46,-21,-22,-23,-26,-17,-18,-19,-20,-24,-25,-27,110,-49,-51,122,123,-47,-50,142,-48,153,]),'DOUBLE_DOT':([40,43,44,45,47,48,49,50,65,66,67,71,86,87,88,89,90,91,92,99,],[-28,-14,-15,-16,-43,-44,-45,-46,-21,-22,-23,-26,-17,-18,-19,-20,-24,-25,-27,114,]),'BEGINFOR':([40,43,44,45,47,48,49,50,65,66,67,71,86,87,88,89,90,91,92,127,],[-28,-14,-15,-16,-43,-44,-45,-46,-21,-22,-23,-26,-17,-18,-19,-20,-24,-25,-27,135,]),'RIGHT_BRACKET':([47,48,49,50,79,100,102,104,115,121,131,140,153,],[-43,-44,-45,-46,103,116,118,-62,128,-63,-61,-64,-65,]),'LEFT_FIGURE_BRACKET':([51,59,73,84,111,124,133,141,],[73,84,93,93,124,93,141,93,]),'LEFT_BRACKET':([56,77,],[79,100,]),'BEGIN':([103,116,118,128,],[120,129,130,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence_list':([0,98,132,137,138,143,144,],[2,113,139,145,146,149,150,]),'single_sentence':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[3,32,3,32,3,3,3,32,3,3,32,32,32,32,]),'declaration':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'for':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'call_func':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[10,10,78,105,10,105,10,105,10,10,10,10,10,10,10,10,10,10,]),'variable':([0,2,11,13,46,51,58,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,98,112,113,114,124,132,137,138,139,141,143,144,145,146,149,150,],[12,12,44,44,44,44,81,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,12,44,12,44,44,12,12,12,12,44,12,12,12,12,12,12,]),'return_spec':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'ret_list':([0,2,98,113,132,137,138,139,143,144,145,146,149,150,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'int':([0,2,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'bool':([0,2,55,79,98,100,113,119,132,137,138,139,143,144,145,146,149,150,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'call_list':([11,74,80,82,],[41,97,106,107,]),'expression':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,141,],[42,52,71,72,83,85,86,87,88,89,90,91,92,96,42,99,42,42,96,96,125,127,96,96,]),'math_expression':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,141,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'constant':([11,13,46,51,59,60,61,62,63,64,68,69,70,73,74,76,80,82,84,93,112,114,124,133,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,140,45,]),'list_args':([73,84,124,141,],[94,108,134,148,]),'list_expressions':([73,84,93,124,141,],[95,95,109,95,95,]),'parameters':([79,100,],[102,115,]),'parameter':([79,100,119,],[104,104,131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence_list','program',1,'p_program','JazzParser.py',30),
  ('sentence_list -> sentence_list single_sentence','sentence_list',2,'p_sentence_list','JazzParser.py',34),
  ('sentence_list -> single_sentence','sentence_list',1,'p_sentence_list','JazzParser.py',35),
  ('single_sentence -> declaration NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',39),
  ('single_sentence -> assignment NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',40),
  ('single_sentence -> if NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',41),
  ('single_sentence -> for NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',42),
  ('single_sentence -> function NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',43),
  ('single_sentence -> call_func NEW_LINE','single_sentence',2,'p_single_sentence','JazzParser.py',44),
  ('declaration -> type VARIABLE EQUAL expression','declaration',4,'p_declaration','JazzParser.py',48),
  ('declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','declaration',6,'p_declaration','JazzParser.py',49),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','JazzParser.py',53),
  ('assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','assignment',5,'p_assignment','JazzParser.py',54),
  ('expression -> math_expression','expression',1,'p_expression','JazzParser.py',58),
  ('expression -> variable','expression',1,'p_expression','JazzParser.py',59),
  ('expression -> constant','expression',1,'p_expression','JazzParser.py',60),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','JazzParser.py',64),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','JazzParser.py',65),
  ('math_expression -> expression MATRIX_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',66),
  ('math_expression -> expression ELEMENTAL_MUL expression','math_expression',3,'p_math_expression','JazzParser.py',67),
  ('math_expression -> expression LEFT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',68),
  ('math_expression -> expression RIGHT_CYCLIC_SHIFT','math_expression',2,'p_math_expression','JazzParser.py',69),
  ('math_expression -> expression TRANSPOSITION','math_expression',2,'p_math_expression','JazzParser.py',70),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','JazzParser.py',71),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','JazzParser.py',72),
  ('math_expression -> NEGATIVE expression','math_expression',2,'p_math_expression','JazzParser.py',73),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','JazzParser.py',74),
  ('variable -> VARIABLE','variable',1,'p_variable','JazzParser.py',78),
  ('type -> int','type',1,'p_type','JazzParser.py',83),
  ('type -> bool','type',1,'p_type','JazzParser.py',84),
  ('int -> INT','int',1,'p_int','JazzParser.py',88),
  ('int -> CVINT','int',1,'p_int','JazzParser.py',89),
  ('int -> VINT','int',1,'p_int','JazzParser.py',90),
  ('int -> CMINT','int',1,'p_int','JazzParser.py',91),
  ('int -> MINT','int',1,'p_int','JazzParser.py',92),
  ('int -> CINT','int',1,'p_int','JazzParser.py',93),
  ('bool -> BOOL','bool',1,'p_bool','JazzParser.py',97),
  ('bool -> CMBOOL','bool',1,'p_bool','JazzParser.py',98),
  ('bool -> MBOOL','bool',1,'p_bool','JazzParser.py',99),
  ('bool -> CVBOOL','bool',1,'p_bool','JazzParser.py',100),
  ('bool -> VBOOL','bool',1,'p_bool','JazzParser.py',101),
  ('bool -> CBOOL','bool',1,'p_bool','JazzParser.py',102),
  ('constant -> INT_BINARY','constant',1,'p_constant','JazzParser.py',106),
  ('constant -> INT_DECIMAL','constant',1,'p_constant','JazzParser.py',107),
  ('constant -> TRUE','constant',1,'p_constant','JazzParser.py',108),
  ('constant -> FALSE','constant',1,'p_constant','JazzParser.py',109),
  ('list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET','list_args',3,'p_list_args','JazzParser.py',113),
  ('list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','list_args',5,'p_list_args','JazzParser.py',114),
  ('list_args -> list_expressions','list_args',1,'p_list_args','JazzParser.py',115),
  ('list_expressions -> list_expressions COMMA expression','list_expressions',3,'p_list_expressions','JazzParser.py',119),
  ('list_expressions -> expression','list_expressions',1,'p_list_expressions','JazzParser.py',120),
  ('if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF','if',6,'p_if','JazzParser.py',124),
  ('for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR','for',10,'p_for','JazzParser.py',128),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',10,'p_function','JazzParser.py',132),
  ('function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',133),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',9,'p_function','JazzParser.py',134),
  ('function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END','function',8,'p_function','JazzParser.py',135),
  ('return_spec -> return_spec COMMA type VARIABLE EQUAL','return_spec',5,'p_return_spec','JazzParser.py',139),
  ('return_spec -> type VARIABLE EQUAL','return_spec',3,'p_return_spec','JazzParser.py',140),
  ('return_spec -> type VARIABLE','return_spec',2,'p_return_spec','JazzParser.py',141),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','JazzParser.py',145),
  ('parameters -> parameter','parameters',1,'p_parameters','JazzParser.py',146),
  ('parameter -> type VARIABLE','parameter',2,'p_parameter','JazzParser.py',150),
  ('parameter -> type VARIABLE EQUAL constant','parameter',4,'p_parameter','JazzParser.py',151),
  ('parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET','parameter',6,'p_parameter','JazzParser.py',152),
  ('call_func -> VARIABLE','call_func',1,'p_call_func','JazzParser.py',156),
  ('call_func -> VARIABLE call_list','call_func',2,'p_call_func','JazzParser.py',157),
  ('call_func -> ret_list ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',158),
  ('call_func -> ret_list ASSIGN VARIABLE','call_func',3,'p_call_func','JazzParser.py',159),
  ('call_func -> variable ASSIGN VARIABLE call_list','call_func',4,'p_call_func','JazzParser.py',160),
  ('call_func -> type VARIABLE EQUAL VARIABLE call_list','call_func',5,'p_call_func','JazzParser.py',161),
  ('ret_list -> variable','ret_list',1,'p_ret_list','JazzParser.py',165),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','JazzParser.py',166),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','JazzParser.py',170),
  ('call_list -> expression','call_list',1,'p_call_list','JazzParser.py',171),
]
