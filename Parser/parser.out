Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SUM

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence_list
Rule 2     sentence_list -> sentence_list single_sentence
Rule 3     sentence_list -> single_sentence
Rule 4     single_sentence -> declaration NEW_LINE
Rule 5     single_sentence -> assignment NEW_LINE
Rule 6     single_sentence -> if NEW_LINE
Rule 7     single_sentence -> for NEW_LINE
Rule 8     single_sentence -> function NEW_LINE
Rule 9     single_sentence -> call_func NEW_LINE
Rule 10    single_sentence -> robot_action NEW_LINE
Rule 11    declaration -> type VARIABLE EQUAL expression
Rule 12    declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 13    assignment -> variable ASSIGN expression
Rule 14    assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 15    expression -> math_expression
Rule 16    expression -> variable
Rule 17    expression -> constant
Rule 18    expression -> robot_action
Rule 19    math_expression -> expression PLUS expression
Rule 20    math_expression -> expression MINUS expression
Rule 21    math_expression -> expression MATRIX_MUL expression
Rule 22    math_expression -> expression ELEMENTAL_MUL expression
Rule 23    math_expression -> expression LEFT_CYCLIC_SHIFT
Rule 24    math_expression -> expression RIGHT_CYCLIC_SHIFT
Rule 25    math_expression -> expression TRANSPOSITION
Rule 26    math_expression -> expression LESS expression
Rule 27    math_expression -> expression GREATER expression
Rule 28    math_expression -> NEGATIVE expression
Rule 29    math_expression -> expression AND expression
Rule 30    variable -> VARIABLE
Rule 31    variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET
Rule 32    type -> int
Rule 33    type -> bool
Rule 34    int -> INT
Rule 35    int -> CVINT
Rule 36    int -> VINT
Rule 37    int -> CMINT
Rule 38    int -> MINT
Rule 39    int -> CINT
Rule 40    bool -> BOOL
Rule 41    bool -> CMBOOL
Rule 42    bool -> MBOOL
Rule 43    bool -> CVBOOL
Rule 44    bool -> VBOOL
Rule 45    bool -> CBOOL
Rule 46    constant -> INT_BINARY
Rule 47    constant -> INT_DECIMAL
Rule 48    constant -> TRUE
Rule 49    constant -> FALSE
Rule 50    list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
Rule 51    list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 52    list_args -> list_expressions
Rule 53    list_expressions -> list_expressions COMMA expression
Rule 54    list_expressions -> expression
Rule 55    if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF
Rule 56    for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
Rule 57    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 58    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 59    function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 60    function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 61    return_spec -> return_spec COMMA type VARIABLE EQUAL
Rule 62    return_spec -> type VARIABLE EQUAL
Rule 63    return_spec -> type VARIABLE
Rule 64    parameters -> parameters COMMA parameter
Rule 65    parameters -> parameter
Rule 66    parameter -> type VARIABLE
Rule 67    parameter -> type VARIABLE EQUAL constant
Rule 68    parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 69    call_func -> VARIABLE
Rule 70    call_func -> VARIABLE call_list
Rule 71    call_func -> ret_list ASSIGN VARIABLE call_list
Rule 72    call_func -> CALL ret_list ASSIGN VARIABLE call_list
Rule 73    call_func -> CALL ret_list ASSIGN VARIABLE
Rule 74    call_func -> variable ASSIGN VARIABLE call_list
Rule 75    call_func -> type VARIABLE EQUAL VARIABLE call_list
Rule 76    ret_list -> variable
Rule 77    ret_list -> ret_list COMMA variable
Rule 78    call_list -> call_list COMMA expression
Rule 79    call_list -> expression
Rule 80    ind -> COMMA
Rule 81    ind -> COMMA DOUBLE_DOT
Rule 82    ind -> DOUBLE_DOT COMMA
Rule 83    index -> expression
Rule 84    index -> list_expressions
Rule 85    index -> list_expressions ind
Rule 86    index -> ind list_expressions
Rule 87    index -> list_args ind
Rule 88    index -> ind list_args
Rule 89    index -> list_args
Rule 90    index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 91    robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET
Rule 92    robot_action -> RIGHT
Rule 93    robot_action -> LEFT
Rule 94    robot_action -> WALL
Rule 95    robot_action -> EXIT
Rule 96    if -> IF expression error
Rule 97    if -> IF error
Rule 98    declaration -> type VARIABLE error
Rule 99    for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression error

Terminals, with rules where they appear

AND                  : 29
ASSIGN               : 13 14 71 72 73 74
BEGIN                : 57 58 59 60
BEGINFOR             : 56
BEGINIF              : 55
BOOL                 : 40
CALL                 : 72 73
CBOOL                : 45
CINT                 : 39
CMBOOL               : 41
CMINT                : 37
COMMA                : 51 53 61 64 77 78 80 81 82
CVBOOL               : 43
CVINT                : 35
DOUBLE_DOT           : 56 81 82 99
ELEMENTAL_MUL        : 22
END                  : 57 58 59 60
ENDFOR               : 56
ENDIF                : 55
EQUAL                : 11 12 56 61 62 67 68 75 99
EXIT                 : 95
FALSE                : 49
FOR                  : 56 99
FUNCTION             : 57 58 59 60
GREATER              : 27
IF                   : 55 96 97
INT                  : 34
INT_BINARY           : 46
INT_DECIMAL          : 47
LEFT                 : 93
LEFT_BRACKET         : 31 57 58 59 60 91
LEFT_CYCLIC_SHIFT    : 23
LEFT_FIGURE_BRACKET  : 12 14 50 51 68 90
LESS                 : 26
MATRIX_MUL           : 21
MBOOL                : 42
MINT                 : 38
MINUS                : 20
MOVE                 : 91
NEGATIVE             : 28
NEW_LINE             : 4 5 6 7 8 9 10 55 56 57 58 59 60
PLUS                 : 19
RIGHT                : 92
RIGHT_BRACKET        : 31 57 58 59 60 91
RIGHT_CYCLIC_SHIFT   : 24
RIGHT_FIGURE_BRACKET : 12 14 50 51 68 90
SUM                  : 
TRANSPOSITION        : 25
TRUE                 : 48
VARIABLE             : 11 12 30 31 56 57 58 59 60 61 62 63 66 67 68 69 70 71 72 73 74 75 75 98 99
VBOOL                : 44
VINT                 : 36
WALL                 : 94
error                : 96 97 98 99

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 33
call_func            : 9
call_list            : 70 71 72 74 75 78
constant             : 17 67
declaration          : 4
expression           : 11 13 19 19 20 20 21 21 22 22 23 24 25 26 26 27 27 28 29 29 53 54 55 56 56 78 79 83 91 96 99 99
for                  : 7
function             : 8
if                   : 6
ind                  : 85 86 87 88
index                : 31
int                  : 32
list_args            : 12 14 51 51 68 87 88 89 90
list_expressions     : 50 52 53 84 85 86
math_expression      : 15
parameter            : 64 65
parameters           : 57 59 64
program              : 0
ret_list             : 71 72 73 77
return_spec          : 57 58 61
robot_action         : 10 18
sentence_list        : 1 2 55 56 57 58 59 60
single_sentence      : 2 3
type                 : 11 12 61 62 63 66 67 68 75 98
variable             : 13 14 16 74 76 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence_list
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    program                        shift and go to state 1
    sentence_list                  shift and go to state 2
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence_list .
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    $end            reduce using rule 1 (program -> sentence_list .)
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 3

    (3) sentence_list -> single_sentence .

    IF              reduce using rule 3 (sentence_list -> single_sentence .)
    FOR             reduce using rule 3 (sentence_list -> single_sentence .)
    FUNCTION        reduce using rule 3 (sentence_list -> single_sentence .)
    VARIABLE        reduce using rule 3 (sentence_list -> single_sentence .)
    CALL            reduce using rule 3 (sentence_list -> single_sentence .)
    MOVE            reduce using rule 3 (sentence_list -> single_sentence .)
    RIGHT           reduce using rule 3 (sentence_list -> single_sentence .)
    LEFT            reduce using rule 3 (sentence_list -> single_sentence .)
    WALL            reduce using rule 3 (sentence_list -> single_sentence .)
    EXIT            reduce using rule 3 (sentence_list -> single_sentence .)
    INT             reduce using rule 3 (sentence_list -> single_sentence .)
    CVINT           reduce using rule 3 (sentence_list -> single_sentence .)
    VINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CMINT           reduce using rule 3 (sentence_list -> single_sentence .)
    MINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CINT            reduce using rule 3 (sentence_list -> single_sentence .)
    BOOL            reduce using rule 3 (sentence_list -> single_sentence .)
    CMBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    MBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CVBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    VBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    $end            reduce using rule 3 (sentence_list -> single_sentence .)
    ENDIF           reduce using rule 3 (sentence_list -> single_sentence .)
    END             reduce using rule 3 (sentence_list -> single_sentence .)
    ENDFOR          reduce using rule 3 (sentence_list -> single_sentence .)


state 4

    (4) single_sentence -> declaration . NEW_LINE

    NEW_LINE        shift and go to state 40


state 5

    (5) single_sentence -> assignment . NEW_LINE

    NEW_LINE        shift and go to state 41


state 6

    (6) single_sentence -> if . NEW_LINE

    NEW_LINE        shift and go to state 42


state 7

    (7) single_sentence -> for . NEW_LINE

    NEW_LINE        shift and go to state 43


state 8

    (8) single_sentence -> function . NEW_LINE

    NEW_LINE        shift and go to state 44


state 9

    (9) single_sentence -> call_func . NEW_LINE

    NEW_LINE        shift and go to state 45


state 10

    (10) single_sentence -> robot_action . NEW_LINE

    NEW_LINE        shift and go to state 46


state 11

    (11) declaration -> type . VARIABLE EQUAL expression
    (12) declaration -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> type . VARIABLE error
    (75) call_func -> type . VARIABLE EQUAL VARIABLE call_list
    (62) return_spec -> type . VARIABLE EQUAL
    (63) return_spec -> type . VARIABLE

    VARIABLE        shift and go to state 47


state 12

    (69) call_func -> VARIABLE .
    (70) call_func -> VARIABLE . call_list
    (30) variable -> VARIABLE .
    (31) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEW_LINE        reduce using rule 69 (call_func -> VARIABLE .)
    ASSIGN          reduce using rule 30 (variable -> VARIABLE .)
    COMMA           reduce using rule 30 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 50
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    call_list                      shift and go to state 49
    expression                     shift and go to state 51
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 13

    (13) assignment -> variable . ASSIGN expression
    (14) assignment -> variable . ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (74) call_func -> variable . ASSIGN VARIABLE call_list
    (76) ret_list -> variable .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 61
    COMMA           reduce using rule 76 (ret_list -> variable .)

  ! ASSIGN          [ reduce using rule 76 (ret_list -> variable .) ]


state 14

    (55) if -> IF . expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> IF . expression error
    (97) if -> IF . error
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    error           shift and go to state 63
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 62
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 15

    (56) for -> FOR . VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR . VARIABLE EQUAL expression DOUBLE_DOT expression error

    VARIABLE        shift and go to state 64


state 16

    (57) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (61) return_spec -> return_spec . COMMA type VARIABLE EQUAL

    FUNCTION        shift and go to state 65
    COMMA           shift and go to state 66


state 17

    (59) function -> FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 67


state 18

    (71) call_func -> ret_list . ASSIGN VARIABLE call_list
    (77) ret_list -> ret_list . COMMA variable

    ASSIGN          shift and go to state 68
    COMMA           shift and go to state 69


state 19

    (72) call_func -> CALL . ret_list ASSIGN VARIABLE call_list
    (73) call_func -> CALL . ret_list ASSIGN VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET

    VARIABLE        shift and go to state 48

    ret_list                       shift and go to state 70
    variable                       shift and go to state 71

state 20

    (91) robot_action -> MOVE . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 72


state 21

    (92) robot_action -> RIGHT .

    NEW_LINE        reduce using rule 92 (robot_action -> RIGHT .)
    PLUS            reduce using rule 92 (robot_action -> RIGHT .)
    MINUS           reduce using rule 92 (robot_action -> RIGHT .)
    MATRIX_MUL      reduce using rule 92 (robot_action -> RIGHT .)
    ELEMENTAL_MUL   reduce using rule 92 (robot_action -> RIGHT .)
    LEFT_CYCLIC_SHIFT reduce using rule 92 (robot_action -> RIGHT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 92 (robot_action -> RIGHT .)
    TRANSPOSITION   reduce using rule 92 (robot_action -> RIGHT .)
    LESS            reduce using rule 92 (robot_action -> RIGHT .)
    GREATER         reduce using rule 92 (robot_action -> RIGHT .)
    AND             reduce using rule 92 (robot_action -> RIGHT .)
    COMMA           reduce using rule 92 (robot_action -> RIGHT .)
    BEGINIF         reduce using rule 92 (robot_action -> RIGHT .)
    error           reduce using rule 92 (robot_action -> RIGHT .)
    RIGHT_BRACKET   reduce using rule 92 (robot_action -> RIGHT .)
    DOUBLE_DOT      reduce using rule 92 (robot_action -> RIGHT .)
    RIGHT_FIGURE_BRACKET reduce using rule 92 (robot_action -> RIGHT .)
    BEGINFOR        reduce using rule 92 (robot_action -> RIGHT .)


state 22

    (93) robot_action -> LEFT .

    NEW_LINE        reduce using rule 93 (robot_action -> LEFT .)
    PLUS            reduce using rule 93 (robot_action -> LEFT .)
    MINUS           reduce using rule 93 (robot_action -> LEFT .)
    MATRIX_MUL      reduce using rule 93 (robot_action -> LEFT .)
    ELEMENTAL_MUL   reduce using rule 93 (robot_action -> LEFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 93 (robot_action -> LEFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 93 (robot_action -> LEFT .)
    TRANSPOSITION   reduce using rule 93 (robot_action -> LEFT .)
    LESS            reduce using rule 93 (robot_action -> LEFT .)
    GREATER         reduce using rule 93 (robot_action -> LEFT .)
    AND             reduce using rule 93 (robot_action -> LEFT .)
    COMMA           reduce using rule 93 (robot_action -> LEFT .)
    BEGINIF         reduce using rule 93 (robot_action -> LEFT .)
    error           reduce using rule 93 (robot_action -> LEFT .)
    RIGHT_BRACKET   reduce using rule 93 (robot_action -> LEFT .)
    DOUBLE_DOT      reduce using rule 93 (robot_action -> LEFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 93 (robot_action -> LEFT .)
    BEGINFOR        reduce using rule 93 (robot_action -> LEFT .)


state 23

    (94) robot_action -> WALL .

    NEW_LINE        reduce using rule 94 (robot_action -> WALL .)
    PLUS            reduce using rule 94 (robot_action -> WALL .)
    MINUS           reduce using rule 94 (robot_action -> WALL .)
    MATRIX_MUL      reduce using rule 94 (robot_action -> WALL .)
    ELEMENTAL_MUL   reduce using rule 94 (robot_action -> WALL .)
    LEFT_CYCLIC_SHIFT reduce using rule 94 (robot_action -> WALL .)
    RIGHT_CYCLIC_SHIFT reduce using rule 94 (robot_action -> WALL .)
    TRANSPOSITION   reduce using rule 94 (robot_action -> WALL .)
    LESS            reduce using rule 94 (robot_action -> WALL .)
    GREATER         reduce using rule 94 (robot_action -> WALL .)
    AND             reduce using rule 94 (robot_action -> WALL .)
    COMMA           reduce using rule 94 (robot_action -> WALL .)
    BEGINIF         reduce using rule 94 (robot_action -> WALL .)
    error           reduce using rule 94 (robot_action -> WALL .)
    RIGHT_BRACKET   reduce using rule 94 (robot_action -> WALL .)
    DOUBLE_DOT      reduce using rule 94 (robot_action -> WALL .)
    RIGHT_FIGURE_BRACKET reduce using rule 94 (robot_action -> WALL .)
    BEGINFOR        reduce using rule 94 (robot_action -> WALL .)


state 24

    (95) robot_action -> EXIT .

    NEW_LINE        reduce using rule 95 (robot_action -> EXIT .)
    PLUS            reduce using rule 95 (robot_action -> EXIT .)
    MINUS           reduce using rule 95 (robot_action -> EXIT .)
    MATRIX_MUL      reduce using rule 95 (robot_action -> EXIT .)
    ELEMENTAL_MUL   reduce using rule 95 (robot_action -> EXIT .)
    LEFT_CYCLIC_SHIFT reduce using rule 95 (robot_action -> EXIT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 95 (robot_action -> EXIT .)
    TRANSPOSITION   reduce using rule 95 (robot_action -> EXIT .)
    LESS            reduce using rule 95 (robot_action -> EXIT .)
    GREATER         reduce using rule 95 (robot_action -> EXIT .)
    AND             reduce using rule 95 (robot_action -> EXIT .)
    COMMA           reduce using rule 95 (robot_action -> EXIT .)
    BEGINIF         reduce using rule 95 (robot_action -> EXIT .)
    error           reduce using rule 95 (robot_action -> EXIT .)
    RIGHT_BRACKET   reduce using rule 95 (robot_action -> EXIT .)
    DOUBLE_DOT      reduce using rule 95 (robot_action -> EXIT .)
    RIGHT_FIGURE_BRACKET reduce using rule 95 (robot_action -> EXIT .)
    BEGINFOR        reduce using rule 95 (robot_action -> EXIT .)


state 25

    (32) type -> int .

    VARIABLE        reduce using rule 32 (type -> int .)


state 26

    (33) type -> bool .

    VARIABLE        reduce using rule 33 (type -> bool .)


state 27

    (34) int -> INT .

    VARIABLE        reduce using rule 34 (int -> INT .)


state 28

    (35) int -> CVINT .

    VARIABLE        reduce using rule 35 (int -> CVINT .)


state 29

    (36) int -> VINT .

    VARIABLE        reduce using rule 36 (int -> VINT .)


state 30

    (37) int -> CMINT .

    VARIABLE        reduce using rule 37 (int -> CMINT .)


state 31

    (38) int -> MINT .

    VARIABLE        reduce using rule 38 (int -> MINT .)


state 32

    (39) int -> CINT .

    VARIABLE        reduce using rule 39 (int -> CINT .)


state 33

    (40) bool -> BOOL .

    VARIABLE        reduce using rule 40 (bool -> BOOL .)


state 34

    (41) bool -> CMBOOL .

    VARIABLE        reduce using rule 41 (bool -> CMBOOL .)


state 35

    (42) bool -> MBOOL .

    VARIABLE        reduce using rule 42 (bool -> MBOOL .)


state 36

    (43) bool -> CVBOOL .

    VARIABLE        reduce using rule 43 (bool -> CVBOOL .)


state 37

    (44) bool -> VBOOL .

    VARIABLE        reduce using rule 44 (bool -> VBOOL .)


state 38

    (45) bool -> CBOOL .

    VARIABLE        reduce using rule 45 (bool -> CBOOL .)


state 39

    (2) sentence_list -> sentence_list single_sentence .

    IF              reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FOR             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FUNCTION        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VARIABLE        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CALL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MOVE            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    RIGHT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    LEFT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    WALL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    EXIT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    INT             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    BOOL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    $end            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDIF           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    END             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDFOR          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)


state 40

    (4) single_sentence -> declaration NEW_LINE .

    IF              reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FOR             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FUNCTION        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VARIABLE        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CALL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MOVE            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    RIGHT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    LEFT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    WALL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    EXIT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    INT             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    BOOL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    $end            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDIF           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    END             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDFOR          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)


state 41

    (5) single_sentence -> assignment NEW_LINE .

    IF              reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FOR             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FUNCTION        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VARIABLE        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CALL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MOVE            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    RIGHT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    LEFT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    WALL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    EXIT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    INT             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    BOOL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    $end            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDIF           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    END             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDFOR          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)


state 42

    (6) single_sentence -> if NEW_LINE .

    IF              reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FOR             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FUNCTION        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VARIABLE        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CALL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MOVE            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    RIGHT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    LEFT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    WALL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    EXIT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    INT             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    BOOL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    $end            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDIF           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    END             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDFOR          reduce using rule 6 (single_sentence -> if NEW_LINE .)


state 43

    (7) single_sentence -> for NEW_LINE .

    IF              reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FOR             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FUNCTION        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VARIABLE        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CALL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MOVE            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    RIGHT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    LEFT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    WALL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    EXIT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    INT             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    BOOL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    $end            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDIF           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    END             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDFOR          reduce using rule 7 (single_sentence -> for NEW_LINE .)


state 44

    (8) single_sentence -> function NEW_LINE .

    IF              reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FOR             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FUNCTION        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VARIABLE        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CALL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MOVE            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    RIGHT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    LEFT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    WALL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    EXIT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    INT             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    BOOL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    $end            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDIF           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    END             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDFOR          reduce using rule 8 (single_sentence -> function NEW_LINE .)


state 45

    (9) single_sentence -> call_func NEW_LINE .

    IF              reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FOR             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FUNCTION        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VARIABLE        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CALL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MOVE            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    RIGHT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    LEFT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    WALL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    EXIT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    INT             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    BOOL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    $end            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDIF           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    END             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDFOR          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)


state 46

    (10) single_sentence -> robot_action NEW_LINE .

    IF              reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    FOR             reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    FUNCTION        reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    VARIABLE        reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CALL            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    MOVE            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    RIGHT           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    LEFT            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    WALL            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    EXIT            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    INT             reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CVINT           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    VINT            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CMINT           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    MINT            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CINT            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    BOOL            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CMBOOL          reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    MBOOL           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CVBOOL          reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    VBOOL           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    CBOOL           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    $end            reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    ENDIF           reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    END             reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)
    ENDFOR          reduce using rule 10 (single_sentence -> robot_action NEW_LINE .)


state 47

    (11) declaration -> type VARIABLE . EQUAL expression
    (12) declaration -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> type VARIABLE . error
    (75) call_func -> type VARIABLE . EQUAL VARIABLE call_list
    (62) return_spec -> type VARIABLE . EQUAL
    (63) return_spec -> type VARIABLE .

    EQUAL           shift and go to state 73
    error           shift and go to state 74
    FUNCTION        reduce using rule 63 (return_spec -> type VARIABLE .)
    COMMA           reduce using rule 63 (return_spec -> type VARIABLE .)


state 48

    (30) variable -> VARIABLE .
    (31) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET

    PLUS            reduce using rule 30 (variable -> VARIABLE .)
    MINUS           reduce using rule 30 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 30 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 30 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 30 (variable -> VARIABLE .)
    LESS            reduce using rule 30 (variable -> VARIABLE .)
    GREATER         reduce using rule 30 (variable -> VARIABLE .)
    AND             reduce using rule 30 (variable -> VARIABLE .)
    COMMA           reduce using rule 30 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 30 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 30 (variable -> VARIABLE .)
    error           reduce using rule 30 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 30 (variable -> VARIABLE .)
    RIGHT_BRACKET   reduce using rule 30 (variable -> VARIABLE .)
    DOUBLE_DOT      reduce using rule 30 (variable -> VARIABLE .)
    RIGHT_FIGURE_BRACKET reduce using rule 30 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 30 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 50


state 49

    (70) call_func -> VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 70 (call_func -> VARIABLE call_list .)
    COMMA           shift and go to state 75


state 50

    (31) variable -> VARIABLE LEFT_BRACKET . index RIGHT_BRACKET
    (83) index -> . expression
    (84) index -> . list_expressions
    (85) index -> . list_expressions ind
    (86) index -> . ind list_expressions
    (87) index -> . list_args ind
    (88) index -> . ind list_args
    (89) index -> . list_args
    (90) index -> . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (80) ind -> . COMMA
    (81) ind -> . COMMA DOUBLE_DOT
    (82) ind -> . DOUBLE_DOT COMMA
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 81
    COMMA           shift and go to state 82
    DOUBLE_DOT      shift and go to state 83
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    index                          shift and go to state 76
    expression                     shift and go to state 77
    list_expressions               shift and go to state 78
    ind                            shift and go to state 79
    list_args                      shift and go to state 80
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 51

    (79) call_list -> expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    COMMA           reduce using rule 79 (call_list -> expression .)
    NEW_LINE        reduce using rule 79 (call_list -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 52

    (15) expression -> math_expression .

    PLUS            reduce using rule 15 (expression -> math_expression .)
    MINUS           reduce using rule 15 (expression -> math_expression .)
    MATRIX_MUL      reduce using rule 15 (expression -> math_expression .)
    ELEMENTAL_MUL   reduce using rule 15 (expression -> math_expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 15 (expression -> math_expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 15 (expression -> math_expression .)
    TRANSPOSITION   reduce using rule 15 (expression -> math_expression .)
    LESS            reduce using rule 15 (expression -> math_expression .)
    GREATER         reduce using rule 15 (expression -> math_expression .)
    AND             reduce using rule 15 (expression -> math_expression .)
    COMMA           reduce using rule 15 (expression -> math_expression .)
    NEW_LINE        reduce using rule 15 (expression -> math_expression .)
    BEGINIF         reduce using rule 15 (expression -> math_expression .)
    error           reduce using rule 15 (expression -> math_expression .)
    RIGHT_BRACKET   reduce using rule 15 (expression -> math_expression .)
    DOUBLE_DOT      reduce using rule 15 (expression -> math_expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 15 (expression -> math_expression .)
    BEGINFOR        reduce using rule 15 (expression -> math_expression .)


state 53

    (16) expression -> variable .

    PLUS            reduce using rule 16 (expression -> variable .)
    MINUS           reduce using rule 16 (expression -> variable .)
    MATRIX_MUL      reduce using rule 16 (expression -> variable .)
    ELEMENTAL_MUL   reduce using rule 16 (expression -> variable .)
    LEFT_CYCLIC_SHIFT reduce using rule 16 (expression -> variable .)
    RIGHT_CYCLIC_SHIFT reduce using rule 16 (expression -> variable .)
    TRANSPOSITION   reduce using rule 16 (expression -> variable .)
    LESS            reduce using rule 16 (expression -> variable .)
    GREATER         reduce using rule 16 (expression -> variable .)
    AND             reduce using rule 16 (expression -> variable .)
    COMMA           reduce using rule 16 (expression -> variable .)
    NEW_LINE        reduce using rule 16 (expression -> variable .)
    BEGINIF         reduce using rule 16 (expression -> variable .)
    error           reduce using rule 16 (expression -> variable .)
    RIGHT_BRACKET   reduce using rule 16 (expression -> variable .)
    DOUBLE_DOT      reduce using rule 16 (expression -> variable .)
    RIGHT_FIGURE_BRACKET reduce using rule 16 (expression -> variable .)
    BEGINFOR        reduce using rule 16 (expression -> variable .)


state 54

    (17) expression -> constant .

    PLUS            reduce using rule 17 (expression -> constant .)
    MINUS           reduce using rule 17 (expression -> constant .)
    MATRIX_MUL      reduce using rule 17 (expression -> constant .)
    ELEMENTAL_MUL   reduce using rule 17 (expression -> constant .)
    LEFT_CYCLIC_SHIFT reduce using rule 17 (expression -> constant .)
    RIGHT_CYCLIC_SHIFT reduce using rule 17 (expression -> constant .)
    TRANSPOSITION   reduce using rule 17 (expression -> constant .)
    LESS            reduce using rule 17 (expression -> constant .)
    GREATER         reduce using rule 17 (expression -> constant .)
    AND             reduce using rule 17 (expression -> constant .)
    COMMA           reduce using rule 17 (expression -> constant .)
    NEW_LINE        reduce using rule 17 (expression -> constant .)
    BEGINIF         reduce using rule 17 (expression -> constant .)
    error           reduce using rule 17 (expression -> constant .)
    RIGHT_BRACKET   reduce using rule 17 (expression -> constant .)
    DOUBLE_DOT      reduce using rule 17 (expression -> constant .)
    RIGHT_FIGURE_BRACKET reduce using rule 17 (expression -> constant .)
    BEGINFOR        reduce using rule 17 (expression -> constant .)


state 55

    (18) expression -> robot_action .

    PLUS            reduce using rule 18 (expression -> robot_action .)
    MINUS           reduce using rule 18 (expression -> robot_action .)
    MATRIX_MUL      reduce using rule 18 (expression -> robot_action .)
    ELEMENTAL_MUL   reduce using rule 18 (expression -> robot_action .)
    LEFT_CYCLIC_SHIFT reduce using rule 18 (expression -> robot_action .)
    RIGHT_CYCLIC_SHIFT reduce using rule 18 (expression -> robot_action .)
    TRANSPOSITION   reduce using rule 18 (expression -> robot_action .)
    LESS            reduce using rule 18 (expression -> robot_action .)
    GREATER         reduce using rule 18 (expression -> robot_action .)
    AND             reduce using rule 18 (expression -> robot_action .)
    COMMA           reduce using rule 18 (expression -> robot_action .)
    NEW_LINE        reduce using rule 18 (expression -> robot_action .)
    BEGINIF         reduce using rule 18 (expression -> robot_action .)
    error           reduce using rule 18 (expression -> robot_action .)
    RIGHT_BRACKET   reduce using rule 18 (expression -> robot_action .)
    DOUBLE_DOT      reduce using rule 18 (expression -> robot_action .)
    RIGHT_FIGURE_BRACKET reduce using rule 18 (expression -> robot_action .)
    BEGINFOR        reduce using rule 18 (expression -> robot_action .)


state 56

    (28) math_expression -> NEGATIVE . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 94
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 57

    (46) constant -> INT_BINARY .

    PLUS            reduce using rule 46 (constant -> INT_BINARY .)
    MINUS           reduce using rule 46 (constant -> INT_BINARY .)
    MATRIX_MUL      reduce using rule 46 (constant -> INT_BINARY .)
    ELEMENTAL_MUL   reduce using rule 46 (constant -> INT_BINARY .)
    LEFT_CYCLIC_SHIFT reduce using rule 46 (constant -> INT_BINARY .)
    RIGHT_CYCLIC_SHIFT reduce using rule 46 (constant -> INT_BINARY .)
    TRANSPOSITION   reduce using rule 46 (constant -> INT_BINARY .)
    LESS            reduce using rule 46 (constant -> INT_BINARY .)
    GREATER         reduce using rule 46 (constant -> INT_BINARY .)
    AND             reduce using rule 46 (constant -> INT_BINARY .)
    COMMA           reduce using rule 46 (constant -> INT_BINARY .)
    NEW_LINE        reduce using rule 46 (constant -> INT_BINARY .)
    BEGINIF         reduce using rule 46 (constant -> INT_BINARY .)
    error           reduce using rule 46 (constant -> INT_BINARY .)
    RIGHT_BRACKET   reduce using rule 46 (constant -> INT_BINARY .)
    DOUBLE_DOT      reduce using rule 46 (constant -> INT_BINARY .)
    RIGHT_FIGURE_BRACKET reduce using rule 46 (constant -> INT_BINARY .)
    BEGINFOR        reduce using rule 46 (constant -> INT_BINARY .)


state 58

    (47) constant -> INT_DECIMAL .

    PLUS            reduce using rule 47 (constant -> INT_DECIMAL .)
    MINUS           reduce using rule 47 (constant -> INT_DECIMAL .)
    MATRIX_MUL      reduce using rule 47 (constant -> INT_DECIMAL .)
    ELEMENTAL_MUL   reduce using rule 47 (constant -> INT_DECIMAL .)
    LEFT_CYCLIC_SHIFT reduce using rule 47 (constant -> INT_DECIMAL .)
    RIGHT_CYCLIC_SHIFT reduce using rule 47 (constant -> INT_DECIMAL .)
    TRANSPOSITION   reduce using rule 47 (constant -> INT_DECIMAL .)
    LESS            reduce using rule 47 (constant -> INT_DECIMAL .)
    GREATER         reduce using rule 47 (constant -> INT_DECIMAL .)
    AND             reduce using rule 47 (constant -> INT_DECIMAL .)
    COMMA           reduce using rule 47 (constant -> INT_DECIMAL .)
    NEW_LINE        reduce using rule 47 (constant -> INT_DECIMAL .)
    BEGINIF         reduce using rule 47 (constant -> INT_DECIMAL .)
    error           reduce using rule 47 (constant -> INT_DECIMAL .)
    RIGHT_BRACKET   reduce using rule 47 (constant -> INT_DECIMAL .)
    DOUBLE_DOT      reduce using rule 47 (constant -> INT_DECIMAL .)
    RIGHT_FIGURE_BRACKET reduce using rule 47 (constant -> INT_DECIMAL .)
    BEGINFOR        reduce using rule 47 (constant -> INT_DECIMAL .)


state 59

    (48) constant -> TRUE .

    PLUS            reduce using rule 48 (constant -> TRUE .)
    MINUS           reduce using rule 48 (constant -> TRUE .)
    MATRIX_MUL      reduce using rule 48 (constant -> TRUE .)
    ELEMENTAL_MUL   reduce using rule 48 (constant -> TRUE .)
    LEFT_CYCLIC_SHIFT reduce using rule 48 (constant -> TRUE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 48 (constant -> TRUE .)
    TRANSPOSITION   reduce using rule 48 (constant -> TRUE .)
    LESS            reduce using rule 48 (constant -> TRUE .)
    GREATER         reduce using rule 48 (constant -> TRUE .)
    AND             reduce using rule 48 (constant -> TRUE .)
    COMMA           reduce using rule 48 (constant -> TRUE .)
    NEW_LINE        reduce using rule 48 (constant -> TRUE .)
    BEGINIF         reduce using rule 48 (constant -> TRUE .)
    error           reduce using rule 48 (constant -> TRUE .)
    RIGHT_BRACKET   reduce using rule 48 (constant -> TRUE .)
    DOUBLE_DOT      reduce using rule 48 (constant -> TRUE .)
    RIGHT_FIGURE_BRACKET reduce using rule 48 (constant -> TRUE .)
    BEGINFOR        reduce using rule 48 (constant -> TRUE .)


state 60

    (49) constant -> FALSE .

    PLUS            reduce using rule 49 (constant -> FALSE .)
    MINUS           reduce using rule 49 (constant -> FALSE .)
    MATRIX_MUL      reduce using rule 49 (constant -> FALSE .)
    ELEMENTAL_MUL   reduce using rule 49 (constant -> FALSE .)
    LEFT_CYCLIC_SHIFT reduce using rule 49 (constant -> FALSE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 49 (constant -> FALSE .)
    TRANSPOSITION   reduce using rule 49 (constant -> FALSE .)
    LESS            reduce using rule 49 (constant -> FALSE .)
    GREATER         reduce using rule 49 (constant -> FALSE .)
    AND             reduce using rule 49 (constant -> FALSE .)
    COMMA           reduce using rule 49 (constant -> FALSE .)
    NEW_LINE        reduce using rule 49 (constant -> FALSE .)
    BEGINIF         reduce using rule 49 (constant -> FALSE .)
    error           reduce using rule 49 (constant -> FALSE .)
    RIGHT_BRACKET   reduce using rule 49 (constant -> FALSE .)
    DOUBLE_DOT      reduce using rule 49 (constant -> FALSE .)
    RIGHT_FIGURE_BRACKET reduce using rule 49 (constant -> FALSE .)
    BEGINFOR        reduce using rule 49 (constant -> FALSE .)


state 61

    (13) assignment -> variable ASSIGN . expression
    (14) assignment -> variable ASSIGN . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (74) call_func -> variable ASSIGN . VARIABLE call_list
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 96
    VARIABLE        shift and go to state 97
    NEGATIVE        shift and go to state 56
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    variable                       shift and go to state 53
    expression                     shift and go to state 95
    math_expression                shift and go to state 52
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 62

    (55) if -> IF expression . BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> IF expression . error
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    BEGINIF         shift and go to state 98
    error           shift and go to state 99
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 63

    (97) if -> IF error .

    NEW_LINE        reduce using rule 97 (if -> IF error .)


state 64

    (56) for -> FOR VARIABLE . EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR VARIABLE . EQUAL expression DOUBLE_DOT expression error

    EQUAL           shift and go to state 100


state 65

    (57) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 101


state 66

    (61) return_spec -> return_spec COMMA . type VARIABLE EQUAL
    (32) type -> . int
    (33) type -> . bool
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    type                           shift and go to state 102
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 67

    (59) function -> FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 103


state 68

    (71) call_func -> ret_list ASSIGN . VARIABLE call_list

    VARIABLE        shift and go to state 104


state 69

    (77) ret_list -> ret_list COMMA . variable
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET

    VARIABLE        shift and go to state 48

    variable                       shift and go to state 105

state 70

    (72) call_func -> CALL ret_list . ASSIGN VARIABLE call_list
    (73) call_func -> CALL ret_list . ASSIGN VARIABLE
    (77) ret_list -> ret_list . COMMA variable

    ASSIGN          shift and go to state 106
    COMMA           shift and go to state 69


state 71

    (76) ret_list -> variable .

    ASSIGN          reduce using rule 76 (ret_list -> variable .)
    COMMA           reduce using rule 76 (ret_list -> variable .)


state 72

    (91) robot_action -> MOVE LEFT_BRACKET . expression RIGHT_BRACKET
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 107
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 73

    (11) declaration -> type VARIABLE EQUAL . expression
    (12) declaration -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (75) call_func -> type VARIABLE EQUAL . VARIABLE call_list
    (62) return_spec -> type VARIABLE EQUAL .
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 110
    VARIABLE        shift and go to state 108
    FUNCTION        reduce using rule 62 (return_spec -> type VARIABLE EQUAL .)
    COMMA           reduce using rule 62 (return_spec -> type VARIABLE EQUAL .)
    NEGATIVE        shift and go to state 56
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 109
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 74

    (98) declaration -> type VARIABLE error .

    NEW_LINE        reduce using rule 98 (declaration -> type VARIABLE error .)


state 75

    (78) call_list -> call_list COMMA . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 111
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 76

    (31) variable -> VARIABLE LEFT_BRACKET index . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 112


state 77

    (83) index -> expression .
    (54) list_expressions -> expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 54 (list_expressions -> expression .)
    COMMA           reduce using rule 54 (list_expressions -> expression .)
    DOUBLE_DOT      reduce using rule 54 (list_expressions -> expression .)
    RIGHT_BRACKET   reduce using rule 54 (list_expressions -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! RIGHT_BRACKET   [ reduce using rule 83 (index -> expression .) ]


state 78

    (84) index -> list_expressions .
    (85) index -> list_expressions . ind
    (53) list_expressions -> list_expressions . COMMA expression
    (52) list_args -> list_expressions .
    (80) ind -> . COMMA
    (81) ind -> . COMMA DOUBLE_DOT
    (82) ind -> . DOUBLE_DOT COMMA

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 52 (list_args -> list_expressions .)
  ! shift/reduce conflict for DOUBLE_DOT resolved as shift
    COMMA           shift and go to state 114
    RIGHT_BRACKET   reduce using rule 52 (list_args -> list_expressions .)
    DOUBLE_DOT      shift and go to state 83

  ! RIGHT_BRACKET   [ reduce using rule 84 (index -> list_expressions .) ]
  ! COMMA           [ reduce using rule 52 (list_args -> list_expressions .) ]
  ! DOUBLE_DOT      [ reduce using rule 52 (list_args -> list_expressions .) ]

    ind                            shift and go to state 113

state 79

    (86) index -> ind . list_expressions
    (88) index -> ind . list_args
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_expressions               shift and go to state 115
    list_args                      shift and go to state 116
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 80

    (87) index -> list_args . ind
    (89) index -> list_args .
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (80) ind -> . COMMA
    (81) ind -> . COMMA DOUBLE_DOT
    (82) ind -> . DOUBLE_DOT COMMA

    RIGHT_BRACKET   reduce using rule 89 (index -> list_args .)
    COMMA           shift and go to state 120
    DOUBLE_DOT      shift and go to state 83

    ind                            shift and go to state 119

state 81

    (90) index -> LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_args                      shift and go to state 121
    list_expressions               shift and go to state 122
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 82

    (80) ind -> COMMA .
    (81) ind -> COMMA . DOUBLE_DOT

    LEFT_FIGURE_BRACKET reduce using rule 80 (ind -> COMMA .)
    NEGATIVE        reduce using rule 80 (ind -> COMMA .)
    VARIABLE        reduce using rule 80 (ind -> COMMA .)
    INT_BINARY      reduce using rule 80 (ind -> COMMA .)
    INT_DECIMAL     reduce using rule 80 (ind -> COMMA .)
    TRUE            reduce using rule 80 (ind -> COMMA .)
    FALSE           reduce using rule 80 (ind -> COMMA .)
    MOVE            reduce using rule 80 (ind -> COMMA .)
    RIGHT           reduce using rule 80 (ind -> COMMA .)
    LEFT            reduce using rule 80 (ind -> COMMA .)
    WALL            reduce using rule 80 (ind -> COMMA .)
    EXIT            reduce using rule 80 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 123


state 83

    (82) ind -> DOUBLE_DOT . COMMA

    COMMA           shift and go to state 124


state 84

    (19) math_expression -> expression PLUS . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 125
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 85

    (20) math_expression -> expression MINUS . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 126
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 86

    (21) math_expression -> expression MATRIX_MUL . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 127
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 87

    (22) math_expression -> expression ELEMENTAL_MUL . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 128
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 88

    (23) math_expression -> expression LEFT_CYCLIC_SHIFT .

    PLUS            reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LESS            reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    AND             reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    error           reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 23 (math_expression -> expression LEFT_CYCLIC_SHIFT .)


state 89

    (24) math_expression -> expression RIGHT_CYCLIC_SHIFT .

    PLUS            reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LESS            reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    AND             reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    error           reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 24 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)


state 90

    (25) math_expression -> expression TRANSPOSITION .

    PLUS            reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    MINUS           reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    MATRIX_MUL      reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    ELEMENTAL_MUL   reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    LEFT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    RIGHT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    TRANSPOSITION   reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    LESS            reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    GREATER         reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    AND             reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    COMMA           reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    NEW_LINE        reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    BEGINIF         reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    error           reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    RIGHT_BRACKET   reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    DOUBLE_DOT      reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    RIGHT_FIGURE_BRACKET reduce using rule 25 (math_expression -> expression TRANSPOSITION .)
    BEGINFOR        reduce using rule 25 (math_expression -> expression TRANSPOSITION .)


state 91

    (26) math_expression -> expression LESS . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 129
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 92

    (27) math_expression -> expression GREATER . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 130
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 93

    (29) math_expression -> expression AND . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 131
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 94

    (28) math_expression -> NEGATIVE expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    PLUS            reduce using rule 28 (math_expression -> NEGATIVE expression .)
    MINUS           reduce using rule 28 (math_expression -> NEGATIVE expression .)
    MATRIX_MUL      reduce using rule 28 (math_expression -> NEGATIVE expression .)
    ELEMENTAL_MUL   reduce using rule 28 (math_expression -> NEGATIVE expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (math_expression -> NEGATIVE expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (math_expression -> NEGATIVE expression .)
    TRANSPOSITION   reduce using rule 28 (math_expression -> NEGATIVE expression .)
    COMMA           reduce using rule 28 (math_expression -> NEGATIVE expression .)
    NEW_LINE        reduce using rule 28 (math_expression -> NEGATIVE expression .)
    BEGINIF         reduce using rule 28 (math_expression -> NEGATIVE expression .)
    error           reduce using rule 28 (math_expression -> NEGATIVE expression .)
    RIGHT_BRACKET   reduce using rule 28 (math_expression -> NEGATIVE expression .)
    DOUBLE_DOT      reduce using rule 28 (math_expression -> NEGATIVE expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 28 (math_expression -> NEGATIVE expression .)
    BEGINFOR        reduce using rule 28 (math_expression -> NEGATIVE expression .)
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! LESS            [ reduce using rule 28 (math_expression -> NEGATIVE expression .) ]
  ! GREATER         [ reduce using rule 28 (math_expression -> NEGATIVE expression .) ]
  ! AND             [ reduce using rule 28 (math_expression -> NEGATIVE expression .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MATRIX_MUL      [ shift and go to state 86 ]
  ! ELEMENTAL_MUL   [ shift and go to state 87 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 88 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 89 ]
  ! TRANSPOSITION   [ shift and go to state 90 ]


state 95

    (13) assignment -> variable ASSIGN expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 13 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 96

    (14) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    variable                       shift and go to state 53
    list_args                      shift and go to state 132
    list_expressions               shift and go to state 133
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 97

    (74) call_func -> variable ASSIGN VARIABLE . call_list
    (30) variable -> VARIABLE .
    (31) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    PLUS            reduce using rule 30 (variable -> VARIABLE .)
    MINUS           reduce using rule 30 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 30 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 30 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 30 (variable -> VARIABLE .)
    LESS            reduce using rule 30 (variable -> VARIABLE .)
    GREATER         reduce using rule 30 (variable -> VARIABLE .)
    AND             reduce using rule 30 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 30 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 50
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    variable                       shift and go to state 53
    call_list                      shift and go to state 134
    expression                     shift and go to state 51
    math_expression                shift and go to state 52
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 98

    (55) if -> IF expression BEGINIF . NEW_LINE sentence_list ENDIF

    NEW_LINE        shift and go to state 135


state 99

    (96) if -> IF expression error .

    NEW_LINE        reduce using rule 96 (if -> IF expression error .)


state 100

    (56) for -> FOR VARIABLE EQUAL . expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR VARIABLE EQUAL . expression DOUBLE_DOT expression error
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 136
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 101

    (57) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 137


state 102

    (61) return_spec -> return_spec COMMA type . VARIABLE EQUAL

    VARIABLE        shift and go to state 138


state 103

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (64) parameters -> . parameters COMMA parameter
    (65) parameters -> . parameter
    (66) parameter -> . type VARIABLE
    (67) parameter -> . type VARIABLE EQUAL constant
    (68) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (32) type -> . int
    (33) type -> . bool
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 140
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    parameters                     shift and go to state 139
    parameter                      shift and go to state 141
    type                           shift and go to state 142
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 104

    (71) call_func -> ret_list ASSIGN VARIABLE . call_list
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    call_list                      shift and go to state 143
    expression                     shift and go to state 51
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 105

    (77) ret_list -> ret_list COMMA variable .

    ASSIGN          reduce using rule 77 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 77 (ret_list -> ret_list COMMA variable .)


state 106

    (72) call_func -> CALL ret_list ASSIGN . VARIABLE call_list
    (73) call_func -> CALL ret_list ASSIGN . VARIABLE

    VARIABLE        shift and go to state 144


state 107

    (91) robot_action -> MOVE LEFT_BRACKET expression . RIGHT_BRACKET
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    RIGHT_BRACKET   shift and go to state 145
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 108

    (75) call_func -> type VARIABLE EQUAL VARIABLE . call_list
    (30) variable -> VARIABLE .
    (31) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    PLUS            reduce using rule 30 (variable -> VARIABLE .)
    MINUS           reduce using rule 30 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 30 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 30 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 30 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 30 (variable -> VARIABLE .)
    LESS            reduce using rule 30 (variable -> VARIABLE .)
    GREATER         reduce using rule 30 (variable -> VARIABLE .)
    AND             reduce using rule 30 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 30 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 50
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    call_list                      shift and go to state 146
    expression                     shift and go to state 51
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 109

    (11) declaration -> type VARIABLE EQUAL expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 11 (declaration -> type VARIABLE EQUAL expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 110

    (12) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_args                      shift and go to state 147
    list_expressions               shift and go to state 133
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 111

    (78) call_list -> call_list COMMA expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    COMMA           reduce using rule 78 (call_list -> call_list COMMA expression .)
    NEW_LINE        reduce using rule 78 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 112

    (31) variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .

    ASSIGN          reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    COMMA           reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    PLUS            reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    MINUS           reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    MATRIX_MUL      reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    ELEMENTAL_MUL   reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    LEFT_CYCLIC_SHIFT reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_CYCLIC_SHIFT reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    TRANSPOSITION   reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    LESS            reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    GREATER         reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    AND             reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    NEW_LINE        reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    BEGINIF         reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    error           reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    DOUBLE_DOT      reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    BEGINFOR        reduce using rule 31 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)


state 113

    (85) index -> list_expressions ind .

    RIGHT_BRACKET   reduce using rule 85 (index -> list_expressions ind .)


state 114

    (53) list_expressions -> list_expressions COMMA . expression
    (80) ind -> COMMA .
    (81) ind -> COMMA . DOUBLE_DOT
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    RIGHT_BRACKET   reduce using rule 80 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 123
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 148
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 115

    (86) index -> ind list_expressions .
    (53) list_expressions -> list_expressions . COMMA expression
    (52) list_args -> list_expressions .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 52 (list_args -> list_expressions .)
    COMMA           shift and go to state 149
    RIGHT_BRACKET   reduce using rule 52 (list_args -> list_expressions .)

  ! RIGHT_BRACKET   [ reduce using rule 86 (index -> ind list_expressions .) ]
  ! COMMA           [ reduce using rule 52 (list_args -> list_expressions .) ]


state 116

    (88) index -> ind list_args .
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 88 (index -> ind list_args .)
    COMMA           shift and go to state 150


state 117

    (54) list_expressions -> expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    COMMA           reduce using rule 54 (list_expressions -> expression .)
    RIGHT_BRACKET   reduce using rule 54 (list_expressions -> expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 54 (list_expressions -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 118

    (50) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_expressions               shift and go to state 151
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 119

    (87) index -> list_args ind .

    RIGHT_BRACKET   reduce using rule 87 (index -> list_args ind .)


state 120

    (51) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (80) ind -> COMMA .
    (81) ind -> COMMA . DOUBLE_DOT

    LEFT_FIGURE_BRACKET shift and go to state 152
    RIGHT_BRACKET   reduce using rule 80 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 123


state 121

    (90) index -> LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 153
    COMMA           shift and go to state 150


state 122

    (50) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (52) list_args -> list_expressions .
    (53) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for RIGHT_FIGURE_BRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET shift and go to state 154
    COMMA           shift and go to state 149

  ! RIGHT_FIGURE_BRACKET [ reduce using rule 52 (list_args -> list_expressions .) ]
  ! COMMA           [ reduce using rule 52 (list_args -> list_expressions .) ]


state 123

    (81) ind -> COMMA DOUBLE_DOT .

    LEFT_FIGURE_BRACKET reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    NEGATIVE        reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    VARIABLE        reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    INT_BINARY      reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    INT_DECIMAL     reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    TRUE            reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    FALSE           reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    MOVE            reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    RIGHT           reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    LEFT            reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    WALL            reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    EXIT            reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)
    RIGHT_BRACKET   reduce using rule 81 (ind -> COMMA DOUBLE_DOT .)


state 124

    (82) ind -> DOUBLE_DOT COMMA .

    LEFT_FIGURE_BRACKET reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    NEGATIVE        reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    VARIABLE        reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    INT_BINARY      reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    INT_DECIMAL     reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    TRUE            reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    FALSE           reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    MOVE            reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    RIGHT           reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    LEFT            reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    WALL            reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    EXIT            reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)
    RIGHT_BRACKET   reduce using rule 82 (ind -> DOUBLE_DOT COMMA .)


state 125

    (19) math_expression -> expression PLUS expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 19 (math_expression -> expression PLUS expression .)
    NEW_LINE        reduce using rule 19 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 19 (math_expression -> expression PLUS expression .)
    error           reduce using rule 19 (math_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 19 (math_expression -> expression PLUS expression .)
    DOUBLE_DOT      reduce using rule 19 (math_expression -> expression PLUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 19 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 19 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! PLUS            [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 19 (math_expression -> expression PLUS expression .) ]


state 126

    (20) math_expression -> expression MINUS expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 20 (math_expression -> expression MINUS expression .)
    NEW_LINE        reduce using rule 20 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 20 (math_expression -> expression MINUS expression .)
    error           reduce using rule 20 (math_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 20 (math_expression -> expression MINUS expression .)
    DOUBLE_DOT      reduce using rule 20 (math_expression -> expression MINUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 20 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 20 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! PLUS            [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 20 (math_expression -> expression MINUS expression .) ]


state 127

    (21) math_expression -> expression MATRIX_MUL expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    NEW_LINE        reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    BEGINIF         reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    error           reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_BRACKET   reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    DOUBLE_DOT      reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    BEGINFOR        reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! PLUS            [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MINUS           [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LESS            [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! GREATER         [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]
  ! AND             [ reduce using rule 21 (math_expression -> expression MATRIX_MUL expression .) ]


state 128

    (22) math_expression -> expression ELEMENTAL_MUL expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    NEW_LINE        reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINIF         reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    error           reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_BRACKET   reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    DOUBLE_DOT      reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINFOR        reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93

  ! PLUS            [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MINUS           [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LESS            [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! GREATER         [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! AND             [ reduce using rule 22 (math_expression -> expression ELEMENTAL_MUL expression .) ]


state 129

    (26) math_expression -> expression LESS expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    PLUS            reduce using rule 26 (math_expression -> expression LESS expression .)
    MINUS           reduce using rule 26 (math_expression -> expression LESS expression .)
    MATRIX_MUL      reduce using rule 26 (math_expression -> expression LESS expression .)
    ELEMENTAL_MUL   reduce using rule 26 (math_expression -> expression LESS expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> expression LESS expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> expression LESS expression .)
    TRANSPOSITION   reduce using rule 26 (math_expression -> expression LESS expression .)
    LESS            reduce using rule 26 (math_expression -> expression LESS expression .)
    GREATER         reduce using rule 26 (math_expression -> expression LESS expression .)
    AND             reduce using rule 26 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 26 (math_expression -> expression LESS expression .)
    NEW_LINE        reduce using rule 26 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 26 (math_expression -> expression LESS expression .)
    error           reduce using rule 26 (math_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 26 (math_expression -> expression LESS expression .)
    DOUBLE_DOT      reduce using rule 26 (math_expression -> expression LESS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 26 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 26 (math_expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MATRIX_MUL      [ shift and go to state 86 ]
  ! ELEMENTAL_MUL   [ shift and go to state 87 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 88 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 89 ]
  ! TRANSPOSITION   [ shift and go to state 90 ]
  ! LESS            [ shift and go to state 91 ]
  ! GREATER         [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]


state 130

    (27) math_expression -> expression GREATER expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    PLUS            reduce using rule 27 (math_expression -> expression GREATER expression .)
    MINUS           reduce using rule 27 (math_expression -> expression GREATER expression .)
    MATRIX_MUL      reduce using rule 27 (math_expression -> expression GREATER expression .)
    ELEMENTAL_MUL   reduce using rule 27 (math_expression -> expression GREATER expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression GREATER expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression GREATER expression .)
    TRANSPOSITION   reduce using rule 27 (math_expression -> expression GREATER expression .)
    LESS            reduce using rule 27 (math_expression -> expression GREATER expression .)
    GREATER         reduce using rule 27 (math_expression -> expression GREATER expression .)
    AND             reduce using rule 27 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 27 (math_expression -> expression GREATER expression .)
    NEW_LINE        reduce using rule 27 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 27 (math_expression -> expression GREATER expression .)
    error           reduce using rule 27 (math_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 27 (math_expression -> expression GREATER expression .)
    DOUBLE_DOT      reduce using rule 27 (math_expression -> expression GREATER expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 27 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 27 (math_expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MATRIX_MUL      [ shift and go to state 86 ]
  ! ELEMENTAL_MUL   [ shift and go to state 87 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 88 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 89 ]
  ! TRANSPOSITION   [ shift and go to state 90 ]
  ! LESS            [ shift and go to state 91 ]
  ! GREATER         [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]


state 131

    (29) math_expression -> expression AND expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    PLUS            reduce using rule 29 (math_expression -> expression AND expression .)
    MINUS           reduce using rule 29 (math_expression -> expression AND expression .)
    MATRIX_MUL      reduce using rule 29 (math_expression -> expression AND expression .)
    ELEMENTAL_MUL   reduce using rule 29 (math_expression -> expression AND expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 29 (math_expression -> expression AND expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 29 (math_expression -> expression AND expression .)
    TRANSPOSITION   reduce using rule 29 (math_expression -> expression AND expression .)
    AND             reduce using rule 29 (math_expression -> expression AND expression .)
    COMMA           reduce using rule 29 (math_expression -> expression AND expression .)
    NEW_LINE        reduce using rule 29 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 29 (math_expression -> expression AND expression .)
    error           reduce using rule 29 (math_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 29 (math_expression -> expression AND expression .)
    DOUBLE_DOT      reduce using rule 29 (math_expression -> expression AND expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 29 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 29 (math_expression -> expression AND expression .)
    LESS            shift and go to state 91
    GREATER         shift and go to state 92

  ! LESS            [ reduce using rule 29 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 29 (math_expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MATRIX_MUL      [ shift and go to state 86 ]
  ! ELEMENTAL_MUL   [ shift and go to state 87 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 88 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 89 ]
  ! TRANSPOSITION   [ shift and go to state 90 ]
  ! AND             [ shift and go to state 93 ]


state 132

    (14) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 155
    COMMA           shift and go to state 150


state 133

    (52) list_args -> list_expressions .
    (53) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET reduce using rule 52 (list_args -> list_expressions .)
    COMMA           shift and go to state 149

  ! COMMA           [ reduce using rule 52 (list_args -> list_expressions .) ]


state 134

    (74) call_func -> variable ASSIGN VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 74 (call_func -> variable ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 75


state 135

    (55) if -> IF expression BEGINIF NEW_LINE . sentence_list ENDIF
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    sentence_list                  shift and go to state 156
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 136

    (56) for -> FOR VARIABLE EQUAL expression . DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR VARIABLE EQUAL expression . DOUBLE_DOT expression error
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    DOUBLE_DOT      shift and go to state 157
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 137

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (64) parameters -> . parameters COMMA parameter
    (65) parameters -> . parameter
    (66) parameter -> . type VARIABLE
    (67) parameter -> . type VARIABLE EQUAL constant
    (68) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (32) type -> . int
    (33) type -> . bool
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 159
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    parameters                     shift and go to state 158
    parameter                      shift and go to state 141
    type                           shift and go to state 142
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 138

    (61) return_spec -> return_spec COMMA type VARIABLE . EQUAL

    EQUAL           shift and go to state 160


state 139

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (64) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 161
    COMMA           shift and go to state 162


state 140

    (60) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 163


state 141

    (65) parameters -> parameter .

    RIGHT_BRACKET   reduce using rule 65 (parameters -> parameter .)
    COMMA           reduce using rule 65 (parameters -> parameter .)


state 142

    (66) parameter -> type . VARIABLE
    (67) parameter -> type . VARIABLE EQUAL constant
    (68) parameter -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    VARIABLE        shift and go to state 164


state 143

    (71) call_func -> ret_list ASSIGN VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 71 (call_func -> ret_list ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 75


state 144

    (72) call_func -> CALL ret_list ASSIGN VARIABLE . call_list
    (73) call_func -> CALL ret_list ASSIGN VARIABLE .
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEW_LINE        reduce using rule 73 (call_func -> CALL ret_list ASSIGN VARIABLE .)
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    call_list                      shift and go to state 165
    expression                     shift and go to state 51
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 145

    (91) robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .

    NEW_LINE        reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    MATRIX_MUL      reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    ELEMENTAL_MUL   reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_CYCLIC_SHIFT reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_CYCLIC_SHIFT reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    TRANSPOSITION   reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    BEGINIF         reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    error           reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    DOUBLE_DOT      reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)
    BEGINFOR        reduce using rule 91 (robot_action -> MOVE LEFT_BRACKET expression RIGHT_BRACKET .)


state 146

    (75) call_func -> type VARIABLE EQUAL VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 75 (call_func -> type VARIABLE EQUAL VARIABLE call_list .)
    COMMA           shift and go to state 75


state 147

    (12) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 166
    COMMA           shift and go to state 150


state 148

    (53) list_expressions -> list_expressions COMMA expression .
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    COMMA           reduce using rule 53 (list_expressions -> list_expressions COMMA expression .)
    DOUBLE_DOT      reduce using rule 53 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_BRACKET   reduce using rule 53 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 53 (list_expressions -> list_expressions COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 149

    (53) list_expressions -> list_expressions COMMA . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 148
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 150

    (51) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    LEFT_FIGURE_BRACKET shift and go to state 152


state 151

    (50) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (53) list_expressions -> list_expressions . COMMA expression

    RIGHT_FIGURE_BRACKET shift and go to state 154
    COMMA           shift and go to state 149


state 152

    (51) list_args -> list_args COMMA LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_args                      shift and go to state 167
    list_expressions               shift and go to state 133
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 153

    (90) index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 90 (index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 154

    (50) list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .

    COMMA           reduce using rule 50 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    DOUBLE_DOT      reduce using rule 50 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 50 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 50 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)


state 155

    (14) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 14 (assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 156

    (55) if -> IF expression BEGINIF NEW_LINE sentence_list . ENDIF
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    ENDIF           shift and go to state 168
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 157

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT . expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT . expression error
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    expression                     shift and go to state 169
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 158

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (64) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 170
    COMMA           shift and go to state 162


state 159

    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 171


state 160

    (61) return_spec -> return_spec COMMA type VARIABLE EQUAL .

    FUNCTION        reduce using rule 61 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)
    COMMA           reduce using rule 61 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)


state 161

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 172


state 162

    (64) parameters -> parameters COMMA . parameter
    (66) parameter -> . type VARIABLE
    (67) parameter -> . type VARIABLE EQUAL constant
    (68) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (32) type -> . int
    (33) type -> . bool
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    parameter                      shift and go to state 173
    type                           shift and go to state 142
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 163

    (60) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 174


state 164

    (66) parameter -> type VARIABLE .
    (67) parameter -> type VARIABLE . EQUAL constant
    (68) parameter -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 66 (parameter -> type VARIABLE .)
    COMMA           reduce using rule 66 (parameter -> type VARIABLE .)
    EQUAL           shift and go to state 175


state 165

    (72) call_func -> CALL ret_list ASSIGN VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 72 (call_func -> CALL ret_list ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 75


state 166

    (12) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 12 (declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 167

    (51) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 176
    COMMA           shift and go to state 150


state 168

    (55) if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .

    NEW_LINE        reduce using rule 55 (if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .)


state 169

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression . BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression . error
    (19) math_expression -> expression . PLUS expression
    (20) math_expression -> expression . MINUS expression
    (21) math_expression -> expression . MATRIX_MUL expression
    (22) math_expression -> expression . ELEMENTAL_MUL expression
    (23) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (24) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (25) math_expression -> expression . TRANSPOSITION
    (26) math_expression -> expression . LESS expression
    (27) math_expression -> expression . GREATER expression
    (29) math_expression -> expression . AND expression

    BEGINFOR        shift and go to state 177
    error           shift and go to state 178
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MATRIX_MUL      shift and go to state 86
    ELEMENTAL_MUL   shift and go to state 87
    LEFT_CYCLIC_SHIFT shift and go to state 88
    RIGHT_CYCLIC_SHIFT shift and go to state 89
    TRANSPOSITION   shift and go to state 90
    LESS            shift and go to state 91
    GREATER         shift and go to state 92
    AND             shift and go to state 93


state 170

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 179


state 171

    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 180


state 172

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 181


state 173

    (64) parameters -> parameters COMMA parameter .

    RIGHT_BRACKET   reduce using rule 64 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 64 (parameters -> parameters COMMA parameter .)


state 174

    (60) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    sentence_list                  shift and go to state 182
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 175

    (67) parameter -> type VARIABLE EQUAL . constant
    (68) parameter -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 184
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    constant                       shift and go to state 183

state 176

    (51) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    COMMA           reduce using rule 51 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    DOUBLE_DOT      reduce using rule 51 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 51 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 51 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 177

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR . NEW_LINE sentence_list ENDFOR

    NEW_LINE        shift and go to state 185


state 178

    (99) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression error .

    NEW_LINE        reduce using rule 99 (for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression error .)


state 179

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 186


state 180

    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    return_spec                    shift and go to state 16
    sentence_list                  shift and go to state 187
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 181

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    sentence_list                  shift and go to state 188
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 182

    (60) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    END             shift and go to state 189
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 183

    (67) parameter -> type VARIABLE EQUAL constant .

    RIGHT_BRACKET   reduce using rule 67 (parameter -> type VARIABLE EQUAL constant .)
    COMMA           reduce using rule 67 (parameter -> type VARIABLE EQUAL constant .)


state 184

    (68) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (51) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) list_args -> . list_expressions
    (53) list_expressions -> . list_expressions COMMA expression
    (54) list_expressions -> . expression
    (15) expression -> . math_expression
    (16) expression -> . variable
    (17) expression -> . constant
    (18) expression -> . robot_action
    (19) math_expression -> . expression PLUS expression
    (20) math_expression -> . expression MINUS expression
    (21) math_expression -> . expression MATRIX_MUL expression
    (22) math_expression -> . expression ELEMENTAL_MUL expression
    (23) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (24) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (25) math_expression -> . expression TRANSPOSITION
    (26) math_expression -> . expression LESS expression
    (27) math_expression -> . expression GREATER expression
    (28) math_expression -> . NEGATIVE expression
    (29) math_expression -> . expression AND expression
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (46) constant -> . INT_BINARY
    (47) constant -> . INT_DECIMAL
    (48) constant -> . TRUE
    (49) constant -> . FALSE
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT

    LEFT_FIGURE_BRACKET shift and go to state 118
    NEGATIVE        shift and go to state 56
    VARIABLE        shift and go to state 48
    INT_BINARY      shift and go to state 57
    INT_DECIMAL     shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24

    list_args                      shift and go to state 190
    list_expressions               shift and go to state 133
    expression                     shift and go to state 117
    math_expression                shift and go to state 52
    variable                       shift and go to state 53
    constant                       shift and go to state 54
    robot_action                   shift and go to state 55

state 185

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE . sentence_list ENDFOR
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    sentence_list                  shift and go to state 191
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 186

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    return_spec                    shift and go to state 16
    sentence_list                  shift and go to state 192
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 187

    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    END             shift and go to state 193
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    return_spec                    shift and go to state 16
    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 188

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    END             shift and go to state 194
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 189

    (60) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 60 (function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 190

    (68) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (51) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 195
    COMMA           shift and go to state 150


state 191

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list . ENDFOR
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    ENDFOR          shift and go to state 196
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_spec                    shift and go to state 16
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 192

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) single_sentence -> . robot_action NEW_LINE
    (11) declaration -> . type VARIABLE EQUAL expression
    (12) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (98) declaration -> . type VARIABLE error
    (13) assignment -> . variable ASSIGN expression
    (14) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (55) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (96) if -> . IF expression error
    (97) if -> . IF error
    (56) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (99) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression error
    (57) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (69) call_func -> . VARIABLE
    (70) call_func -> . VARIABLE call_list
    (71) call_func -> . ret_list ASSIGN VARIABLE call_list
    (72) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (73) call_func -> . CALL ret_list ASSIGN VARIABLE
    (74) call_func -> . variable ASSIGN VARIABLE call_list
    (75) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (91) robot_action -> . MOVE LEFT_BRACKET expression RIGHT_BRACKET
    (92) robot_action -> . RIGHT
    (93) robot_action -> . LEFT
    (94) robot_action -> . WALL
    (95) robot_action -> . EXIT
    (32) type -> . int
    (33) type -> . bool
    (30) variable -> . VARIABLE
    (31) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (61) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (62) return_spec -> . type VARIABLE EQUAL
    (63) return_spec -> . type VARIABLE
    (76) ret_list -> . variable
    (77) ret_list -> . ret_list COMMA variable
    (34) int -> . INT
    (35) int -> . CVINT
    (36) int -> . VINT
    (37) int -> . CMINT
    (38) int -> . MINT
    (39) int -> . CINT
    (40) bool -> . BOOL
    (41) bool -> . CMBOOL
    (42) bool -> . MBOOL
    (43) bool -> . CVBOOL
    (44) bool -> . VBOOL
    (45) bool -> . CBOOL

    END             shift and go to state 197
    IF              shift and go to state 14
    FOR             shift and go to state 15
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 12
    CALL            shift and go to state 19
    MOVE            shift and go to state 20
    RIGHT           shift and go to state 21
    LEFT            shift and go to state 22
    WALL            shift and go to state 23
    EXIT            shift and go to state 24
    INT             shift and go to state 27
    CVINT           shift and go to state 28
    VINT            shift and go to state 29
    CMINT           shift and go to state 30
    MINT            shift and go to state 31
    CINT            shift and go to state 32
    BOOL            shift and go to state 33
    CMBOOL          shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    VBOOL           shift and go to state 37
    CBOOL           shift and go to state 38

    return_spec                    shift and go to state 16
    single_sentence                shift and go to state 39
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    robot_action                   shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 18
    int                            shift and go to state 25
    bool                           shift and go to state 26

state 193

    (58) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 58 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 194

    (59) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 59 (function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 195

    (68) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 68 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 68 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 196

    (56) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .

    NEW_LINE        reduce using rule 56 (for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .)


state 197

    (57) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 57 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 13 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_DOT in state 78 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 115 resolved as shift
WARNING: shift/reduce conflict for RIGHT_FIGURE_BRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 125 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 125 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 125 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 125 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 126 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 126 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 126 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 126 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 127 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 127 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 127 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 127 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 127 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 128 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 128 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 128 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 128 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 128 resolved as shift
WARNING: shift/reduce conflict for LESS in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 133 resolved as shift
WARNING: reduce/reduce conflict in state 77 resolved using rule (list_expressions -> expression)
WARNING: rejected rule (index -> expression) in state 77
WARNING: reduce/reduce conflict in state 78 resolved using rule (list_args -> list_expressions)
WARNING: rejected rule (index -> list_expressions) in state 78
WARNING: reduce/reduce conflict in state 115 resolved using rule (list_args -> list_expressions)
WARNING: rejected rule (index -> ind list_expressions) in state 115
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index -> list_expressions) is never reduced
WARNING: Rule (index -> ind list_expressions) is never reduced
