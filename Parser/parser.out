Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    LEFT
    MOVE
    RIGHT
    SUM
    WALL

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence_list
Rule 2     sentence_list -> sentence_list single_sentence
Rule 3     sentence_list -> single_sentence
Rule 4     single_sentence -> declaration NEW_LINE
Rule 5     single_sentence -> assignment NEW_LINE
Rule 6     single_sentence -> if NEW_LINE
Rule 7     single_sentence -> for NEW_LINE
Rule 8     single_sentence -> function NEW_LINE
Rule 9     single_sentence -> call_func NEW_LINE
Rule 10    declaration -> type VARIABLE EQUAL expression
Rule 11    declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 12    assignment -> variable ASSIGN expression
Rule 13    assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 14    expression -> math_expression
Rule 15    expression -> variable
Rule 16    expression -> constant
Rule 17    math_expression -> expression PLUS expression
Rule 18    math_expression -> expression MINUS expression
Rule 19    math_expression -> expression MATRIX_MUL expression
Rule 20    math_expression -> expression ELEMENTAL_MUL expression
Rule 21    math_expression -> expression LEFT_CYCLIC_SHIFT
Rule 22    math_expression -> expression RIGHT_CYCLIC_SHIFT
Rule 23    math_expression -> expression TRANSPOSITION
Rule 24    math_expression -> expression LESS expression
Rule 25    math_expression -> expression GREATER expression
Rule 26    math_expression -> NEGATIVE expression
Rule 27    math_expression -> expression AND expression
Rule 28    variable -> VARIABLE
Rule 29    type -> int
Rule 30    type -> bool
Rule 31    int -> INT
Rule 32    int -> CVINT
Rule 33    int -> VINT
Rule 34    int -> CMINT
Rule 35    int -> MINT
Rule 36    int -> CINT
Rule 37    bool -> BOOL
Rule 38    bool -> CMBOOL
Rule 39    bool -> MBOOL
Rule 40    bool -> CVBOOL
Rule 41    bool -> VBOOL
Rule 42    bool -> CBOOL
Rule 43    constant -> INT_BINARY
Rule 44    constant -> INT_DECIMAL
Rule 45    constant -> TRUE
Rule 46    constant -> FALSE
Rule 47    list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
Rule 48    list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 49    list_args -> list_expressions
Rule 50    list_expressions -> list_expressions COMMA expression
Rule 51    list_expressions -> expression
Rule 52    if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF
Rule 53    for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
Rule 54    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 55    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 56    function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 57    function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 58    return_spec -> return_spec COMMA type VARIABLE EQUAL
Rule 59    return_spec -> type VARIABLE EQUAL
Rule 60    return_spec -> type VARIABLE
Rule 61    parameters -> parameters COMMA parameter
Rule 62    parameters -> parameter
Rule 63    parameter -> type VARIABLE
Rule 64    parameter -> type VARIABLE EQUAL constant
Rule 65    parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 66    call_func -> VARIABLE
Rule 67    call_func -> VARIABLE call_list
Rule 68    call_func -> ret_list ASSIGN VARIABLE call_list
Rule 69    call_func -> ret_list ASSIGN VARIABLE
Rule 70    call_func -> variable ASSIGN VARIABLE call_list
Rule 71    call_func -> type VARIABLE EQUAL VARIABLE call_list
Rule 72    ret_list -> variable
Rule 73    ret_list -> ret_list COMMA variable
Rule 74    call_list -> call_list COMMA expression
Rule 75    call_list -> expression

Terminals, with rules where they appear

AND                  : 27
ASSIGN               : 12 13 68 69 70
BEGIN                : 54 55 56 57
BEGINFOR             : 53
BEGINIF              : 52
BOOL                 : 37
CBOOL                : 42
CINT                 : 36
CMBOOL               : 38
CMINT                : 34
COMMA                : 48 50 58 61 73 74
CVBOOL               : 40
CVINT                : 32
DOUBLE_DOT           : 53
ELEMENTAL_MUL        : 20
END                  : 54 55 56 57
ENDFOR               : 53
ENDIF                : 52
EQUAL                : 10 11 53 58 59 64 65 71
EXIT                 : 
FALSE                : 46
FOR                  : 53
FUNCTION             : 54 55 56 57
GREATER              : 25
IF                   : 52
INT                  : 31
INT_BINARY           : 43
INT_DECIMAL          : 44
LEFT                 : 
LEFT_BRACKET         : 54 55 56 57
LEFT_CYCLIC_SHIFT    : 21
LEFT_FIGURE_BRACKET  : 11 13 47 48 65
LESS                 : 24
MATRIX_MUL           : 19
MBOOL                : 39
MINT                 : 35
MINUS                : 18
MOVE                 : 
NEGATIVE             : 26
NEW_LINE             : 4 5 6 7 8 9 52 53 54 55 56 57
PLUS                 : 17
RIGHT                : 
RIGHT_BRACKET        : 54 55 56 57
RIGHT_CYCLIC_SHIFT   : 22
RIGHT_FIGURE_BRACKET : 11 13 47 48 65
SUM                  : 
TRANSPOSITION        : 23
TRUE                 : 45
VARIABLE             : 10 11 28 53 54 55 56 57 58 59 60 63 64 65 66 67 68 69 70 71 71
VBOOL                : 41
VINT                 : 33
WALL                 : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 30
call_func            : 9
call_list            : 67 68 70 71 74
constant             : 16 64
declaration          : 4
expression           : 10 12 17 17 18 18 19 19 20 20 21 22 23 24 24 25 25 26 27 27 50 51 52 53 53 74 75
for                  : 7
function             : 8
if                   : 6
int                  : 29
list_args            : 11 13 48 48 65
list_expressions     : 47 49 50
math_expression      : 14
parameter            : 61 62
parameters           : 54 56 61
program              : 0
ret_list             : 68 69 73
return_spec          : 54 55 58
sentence_list        : 1 2 52 53 54 55 56 57
single_sentence      : 2 3
type                 : 10 11 58 59 60 63 64 65 71
variable             : 12 13 15 70 72 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence_list
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    program                        shift and go to state 1
    sentence_list                  shift and go to state 2
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence_list .
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    $end            reduce using rule 1 (program -> sentence_list .)
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 3

    (3) sentence_list -> single_sentence .

    IF              reduce using rule 3 (sentence_list -> single_sentence .)
    FOR             reduce using rule 3 (sentence_list -> single_sentence .)
    FUNCTION        reduce using rule 3 (sentence_list -> single_sentence .)
    VARIABLE        reduce using rule 3 (sentence_list -> single_sentence .)
    INT             reduce using rule 3 (sentence_list -> single_sentence .)
    CVINT           reduce using rule 3 (sentence_list -> single_sentence .)
    VINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CMINT           reduce using rule 3 (sentence_list -> single_sentence .)
    MINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CINT            reduce using rule 3 (sentence_list -> single_sentence .)
    BOOL            reduce using rule 3 (sentence_list -> single_sentence .)
    CMBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    MBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CVBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    VBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    $end            reduce using rule 3 (sentence_list -> single_sentence .)
    ENDIF           reduce using rule 3 (sentence_list -> single_sentence .)
    END             reduce using rule 3 (sentence_list -> single_sentence .)
    ENDFOR          reduce using rule 3 (sentence_list -> single_sentence .)


state 4

    (4) single_sentence -> declaration . NEW_LINE

    NEW_LINE        shift and go to state 33


state 5

    (5) single_sentence -> assignment . NEW_LINE

    NEW_LINE        shift and go to state 34


state 6

    (6) single_sentence -> if . NEW_LINE

    NEW_LINE        shift and go to state 35


state 7

    (7) single_sentence -> for . NEW_LINE

    NEW_LINE        shift and go to state 36


state 8

    (8) single_sentence -> function . NEW_LINE

    NEW_LINE        shift and go to state 37


state 9

    (9) single_sentence -> call_func . NEW_LINE

    NEW_LINE        shift and go to state 38


state 10

    (10) declaration -> type . VARIABLE EQUAL expression
    (11) declaration -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (71) call_func -> type . VARIABLE EQUAL VARIABLE call_list
    (59) return_spec -> type . VARIABLE EQUAL
    (60) return_spec -> type . VARIABLE

    VARIABLE        shift and go to state 39


state 11

    (66) call_func -> VARIABLE .
    (67) call_func -> VARIABLE . call_list
    (28) variable -> VARIABLE .
    (74) call_list -> . call_list COMMA expression
    (75) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEW_LINE        reduce using rule 66 (call_func -> VARIABLE .)
    ASSIGN          reduce using rule 28 (variable -> VARIABLE .)
    COMMA           reduce using rule 28 (variable -> VARIABLE .)
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    call_list                      shift and go to state 41
    expression                     shift and go to state 42
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 12

    (12) assignment -> variable . ASSIGN expression
    (13) assignment -> variable . ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (70) call_func -> variable . ASSIGN VARIABLE call_list
    (72) ret_list -> variable .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 51
    COMMA           reduce using rule 72 (ret_list -> variable .)

  ! ASSIGN          [ reduce using rule 72 (ret_list -> variable .) ]


state 13

    (52) if -> IF . expression BEGINIF NEW_LINE sentence_list ENDIF
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 52
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 14

    (53) for -> FOR . VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    VARIABLE        shift and go to state 53


state 15

    (54) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) return_spec -> return_spec . COMMA type VARIABLE EQUAL

    FUNCTION        shift and go to state 54
    COMMA           shift and go to state 55


state 16

    (56) function -> FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 56


state 17

    (68) call_func -> ret_list . ASSIGN VARIABLE call_list
    (69) call_func -> ret_list . ASSIGN VARIABLE
    (73) ret_list -> ret_list . COMMA variable

    ASSIGN          shift and go to state 57
    COMMA           shift and go to state 58


state 18

    (29) type -> int .

    VARIABLE        reduce using rule 29 (type -> int .)


state 19

    (30) type -> bool .

    VARIABLE        reduce using rule 30 (type -> bool .)


state 20

    (31) int -> INT .

    VARIABLE        reduce using rule 31 (int -> INT .)


state 21

    (32) int -> CVINT .

    VARIABLE        reduce using rule 32 (int -> CVINT .)


state 22

    (33) int -> VINT .

    VARIABLE        reduce using rule 33 (int -> VINT .)


state 23

    (34) int -> CMINT .

    VARIABLE        reduce using rule 34 (int -> CMINT .)


state 24

    (35) int -> MINT .

    VARIABLE        reduce using rule 35 (int -> MINT .)


state 25

    (36) int -> CINT .

    VARIABLE        reduce using rule 36 (int -> CINT .)


state 26

    (37) bool -> BOOL .

    VARIABLE        reduce using rule 37 (bool -> BOOL .)


state 27

    (38) bool -> CMBOOL .

    VARIABLE        reduce using rule 38 (bool -> CMBOOL .)


state 28

    (39) bool -> MBOOL .

    VARIABLE        reduce using rule 39 (bool -> MBOOL .)


state 29

    (40) bool -> CVBOOL .

    VARIABLE        reduce using rule 40 (bool -> CVBOOL .)


state 30

    (41) bool -> VBOOL .

    VARIABLE        reduce using rule 41 (bool -> VBOOL .)


state 31

    (42) bool -> CBOOL .

    VARIABLE        reduce using rule 42 (bool -> CBOOL .)


state 32

    (2) sentence_list -> sentence_list single_sentence .

    IF              reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FOR             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FUNCTION        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VARIABLE        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    INT             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    BOOL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    $end            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDIF           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    END             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDFOR          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)


state 33

    (4) single_sentence -> declaration NEW_LINE .

    IF              reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FOR             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FUNCTION        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VARIABLE        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    INT             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    BOOL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    $end            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDIF           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    END             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDFOR          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)


state 34

    (5) single_sentence -> assignment NEW_LINE .

    IF              reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FOR             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FUNCTION        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VARIABLE        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    INT             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    BOOL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    $end            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDIF           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    END             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDFOR          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)


state 35

    (6) single_sentence -> if NEW_LINE .

    IF              reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FOR             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FUNCTION        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VARIABLE        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    INT             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    BOOL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    $end            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDIF           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    END             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDFOR          reduce using rule 6 (single_sentence -> if NEW_LINE .)


state 36

    (7) single_sentence -> for NEW_LINE .

    IF              reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FOR             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FUNCTION        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VARIABLE        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    INT             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    BOOL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    $end            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDIF           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    END             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDFOR          reduce using rule 7 (single_sentence -> for NEW_LINE .)


state 37

    (8) single_sentence -> function NEW_LINE .

    IF              reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FOR             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FUNCTION        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VARIABLE        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    INT             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    BOOL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    $end            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDIF           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    END             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDFOR          reduce using rule 8 (single_sentence -> function NEW_LINE .)


state 38

    (9) single_sentence -> call_func NEW_LINE .

    IF              reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FOR             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FUNCTION        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VARIABLE        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    INT             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    BOOL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    $end            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDIF           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    END             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDFOR          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)


state 39

    (10) declaration -> type VARIABLE . EQUAL expression
    (11) declaration -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (71) call_func -> type VARIABLE . EQUAL VARIABLE call_list
    (59) return_spec -> type VARIABLE . EQUAL
    (60) return_spec -> type VARIABLE .

    EQUAL           shift and go to state 59
    FUNCTION        reduce using rule 60 (return_spec -> type VARIABLE .)
    COMMA           reduce using rule 60 (return_spec -> type VARIABLE .)


state 40

    (28) variable -> VARIABLE .

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    COMMA           reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_FIGURE_BRACKET reduce using rule 28 (variable -> VARIABLE .)
    DOUBLE_DOT      reduce using rule 28 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 28 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 28 (variable -> VARIABLE .)


state 41

    (67) call_func -> VARIABLE call_list .
    (74) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 67 (call_func -> VARIABLE call_list .)
    COMMA           shift and go to state 60


state 42

    (75) call_list -> expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 75 (call_list -> expression .)
    NEW_LINE        reduce using rule 75 (call_list -> expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 43

    (14) expression -> math_expression .

    PLUS            reduce using rule 14 (expression -> math_expression .)
    MINUS           reduce using rule 14 (expression -> math_expression .)
    MATRIX_MUL      reduce using rule 14 (expression -> math_expression .)
    ELEMENTAL_MUL   reduce using rule 14 (expression -> math_expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 14 (expression -> math_expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 14 (expression -> math_expression .)
    TRANSPOSITION   reduce using rule 14 (expression -> math_expression .)
    LESS            reduce using rule 14 (expression -> math_expression .)
    GREATER         reduce using rule 14 (expression -> math_expression .)
    AND             reduce using rule 14 (expression -> math_expression .)
    COMMA           reduce using rule 14 (expression -> math_expression .)
    NEW_LINE        reduce using rule 14 (expression -> math_expression .)
    BEGINIF         reduce using rule 14 (expression -> math_expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 14 (expression -> math_expression .)
    DOUBLE_DOT      reduce using rule 14 (expression -> math_expression .)
    BEGINFOR        reduce using rule 14 (expression -> math_expression .)


state 44

    (15) expression -> variable .

    PLUS            reduce using rule 15 (expression -> variable .)
    MINUS           reduce using rule 15 (expression -> variable .)
    MATRIX_MUL      reduce using rule 15 (expression -> variable .)
    ELEMENTAL_MUL   reduce using rule 15 (expression -> variable .)
    LEFT_CYCLIC_SHIFT reduce using rule 15 (expression -> variable .)
    RIGHT_CYCLIC_SHIFT reduce using rule 15 (expression -> variable .)
    TRANSPOSITION   reduce using rule 15 (expression -> variable .)
    LESS            reduce using rule 15 (expression -> variable .)
    GREATER         reduce using rule 15 (expression -> variable .)
    AND             reduce using rule 15 (expression -> variable .)
    COMMA           reduce using rule 15 (expression -> variable .)
    NEW_LINE        reduce using rule 15 (expression -> variable .)
    BEGINIF         reduce using rule 15 (expression -> variable .)
    RIGHT_FIGURE_BRACKET reduce using rule 15 (expression -> variable .)
    DOUBLE_DOT      reduce using rule 15 (expression -> variable .)
    BEGINFOR        reduce using rule 15 (expression -> variable .)


state 45

    (16) expression -> constant .

    PLUS            reduce using rule 16 (expression -> constant .)
    MINUS           reduce using rule 16 (expression -> constant .)
    MATRIX_MUL      reduce using rule 16 (expression -> constant .)
    ELEMENTAL_MUL   reduce using rule 16 (expression -> constant .)
    LEFT_CYCLIC_SHIFT reduce using rule 16 (expression -> constant .)
    RIGHT_CYCLIC_SHIFT reduce using rule 16 (expression -> constant .)
    TRANSPOSITION   reduce using rule 16 (expression -> constant .)
    LESS            reduce using rule 16 (expression -> constant .)
    GREATER         reduce using rule 16 (expression -> constant .)
    AND             reduce using rule 16 (expression -> constant .)
    COMMA           reduce using rule 16 (expression -> constant .)
    NEW_LINE        reduce using rule 16 (expression -> constant .)
    BEGINIF         reduce using rule 16 (expression -> constant .)
    RIGHT_FIGURE_BRACKET reduce using rule 16 (expression -> constant .)
    DOUBLE_DOT      reduce using rule 16 (expression -> constant .)
    BEGINFOR        reduce using rule 16 (expression -> constant .)


state 46

    (26) math_expression -> NEGATIVE . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 71
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 47

    (43) constant -> INT_BINARY .

    PLUS            reduce using rule 43 (constant -> INT_BINARY .)
    MINUS           reduce using rule 43 (constant -> INT_BINARY .)
    MATRIX_MUL      reduce using rule 43 (constant -> INT_BINARY .)
    ELEMENTAL_MUL   reduce using rule 43 (constant -> INT_BINARY .)
    LEFT_CYCLIC_SHIFT reduce using rule 43 (constant -> INT_BINARY .)
    RIGHT_CYCLIC_SHIFT reduce using rule 43 (constant -> INT_BINARY .)
    TRANSPOSITION   reduce using rule 43 (constant -> INT_BINARY .)
    LESS            reduce using rule 43 (constant -> INT_BINARY .)
    GREATER         reduce using rule 43 (constant -> INT_BINARY .)
    AND             reduce using rule 43 (constant -> INT_BINARY .)
    COMMA           reduce using rule 43 (constant -> INT_BINARY .)
    NEW_LINE        reduce using rule 43 (constant -> INT_BINARY .)
    BEGINIF         reduce using rule 43 (constant -> INT_BINARY .)
    RIGHT_FIGURE_BRACKET reduce using rule 43 (constant -> INT_BINARY .)
    DOUBLE_DOT      reduce using rule 43 (constant -> INT_BINARY .)
    BEGINFOR        reduce using rule 43 (constant -> INT_BINARY .)
    RIGHT_BRACKET   reduce using rule 43 (constant -> INT_BINARY .)


state 48

    (44) constant -> INT_DECIMAL .

    PLUS            reduce using rule 44 (constant -> INT_DECIMAL .)
    MINUS           reduce using rule 44 (constant -> INT_DECIMAL .)
    MATRIX_MUL      reduce using rule 44 (constant -> INT_DECIMAL .)
    ELEMENTAL_MUL   reduce using rule 44 (constant -> INT_DECIMAL .)
    LEFT_CYCLIC_SHIFT reduce using rule 44 (constant -> INT_DECIMAL .)
    RIGHT_CYCLIC_SHIFT reduce using rule 44 (constant -> INT_DECIMAL .)
    TRANSPOSITION   reduce using rule 44 (constant -> INT_DECIMAL .)
    LESS            reduce using rule 44 (constant -> INT_DECIMAL .)
    GREATER         reduce using rule 44 (constant -> INT_DECIMAL .)
    AND             reduce using rule 44 (constant -> INT_DECIMAL .)
    COMMA           reduce using rule 44 (constant -> INT_DECIMAL .)
    NEW_LINE        reduce using rule 44 (constant -> INT_DECIMAL .)
    BEGINIF         reduce using rule 44 (constant -> INT_DECIMAL .)
    RIGHT_FIGURE_BRACKET reduce using rule 44 (constant -> INT_DECIMAL .)
    DOUBLE_DOT      reduce using rule 44 (constant -> INT_DECIMAL .)
    BEGINFOR        reduce using rule 44 (constant -> INT_DECIMAL .)
    RIGHT_BRACKET   reduce using rule 44 (constant -> INT_DECIMAL .)


state 49

    (45) constant -> TRUE .

    PLUS            reduce using rule 45 (constant -> TRUE .)
    MINUS           reduce using rule 45 (constant -> TRUE .)
    MATRIX_MUL      reduce using rule 45 (constant -> TRUE .)
    ELEMENTAL_MUL   reduce using rule 45 (constant -> TRUE .)
    LEFT_CYCLIC_SHIFT reduce using rule 45 (constant -> TRUE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 45 (constant -> TRUE .)
    TRANSPOSITION   reduce using rule 45 (constant -> TRUE .)
    LESS            reduce using rule 45 (constant -> TRUE .)
    GREATER         reduce using rule 45 (constant -> TRUE .)
    AND             reduce using rule 45 (constant -> TRUE .)
    COMMA           reduce using rule 45 (constant -> TRUE .)
    NEW_LINE        reduce using rule 45 (constant -> TRUE .)
    BEGINIF         reduce using rule 45 (constant -> TRUE .)
    RIGHT_FIGURE_BRACKET reduce using rule 45 (constant -> TRUE .)
    DOUBLE_DOT      reduce using rule 45 (constant -> TRUE .)
    BEGINFOR        reduce using rule 45 (constant -> TRUE .)
    RIGHT_BRACKET   reduce using rule 45 (constant -> TRUE .)


state 50

    (46) constant -> FALSE .

    PLUS            reduce using rule 46 (constant -> FALSE .)
    MINUS           reduce using rule 46 (constant -> FALSE .)
    MATRIX_MUL      reduce using rule 46 (constant -> FALSE .)
    ELEMENTAL_MUL   reduce using rule 46 (constant -> FALSE .)
    LEFT_CYCLIC_SHIFT reduce using rule 46 (constant -> FALSE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 46 (constant -> FALSE .)
    TRANSPOSITION   reduce using rule 46 (constant -> FALSE .)
    LESS            reduce using rule 46 (constant -> FALSE .)
    GREATER         reduce using rule 46 (constant -> FALSE .)
    AND             reduce using rule 46 (constant -> FALSE .)
    COMMA           reduce using rule 46 (constant -> FALSE .)
    NEW_LINE        reduce using rule 46 (constant -> FALSE .)
    BEGINIF         reduce using rule 46 (constant -> FALSE .)
    RIGHT_FIGURE_BRACKET reduce using rule 46 (constant -> FALSE .)
    DOUBLE_DOT      reduce using rule 46 (constant -> FALSE .)
    BEGINFOR        reduce using rule 46 (constant -> FALSE .)
    RIGHT_BRACKET   reduce using rule 46 (constant -> FALSE .)


state 51

    (12) assignment -> variable ASSIGN . expression
    (13) assignment -> variable ASSIGN . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (70) call_func -> variable ASSIGN . VARIABLE call_list
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 73
    VARIABLE        shift and go to state 74
    NEGATIVE        shift and go to state 46
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    variable                       shift and go to state 44
    expression                     shift and go to state 72
    math_expression                shift and go to state 43
    constant                       shift and go to state 45

state 52

    (52) if -> IF expression . BEGINIF NEW_LINE sentence_list ENDIF
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    BEGINIF         shift and go to state 75
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 53

    (53) for -> FOR VARIABLE . EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    EQUAL           shift and go to state 76


state 54

    (54) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 77


state 55

    (58) return_spec -> return_spec COMMA . type VARIABLE EQUAL
    (29) type -> . int
    (30) type -> . bool
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    type                           shift and go to state 78
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 56

    (56) function -> FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 79


state 57

    (68) call_func -> ret_list ASSIGN . VARIABLE call_list
    (69) call_func -> ret_list ASSIGN . VARIABLE

    VARIABLE        shift and go to state 80


state 58

    (73) ret_list -> ret_list COMMA . variable
    (28) variable -> . VARIABLE

    VARIABLE        shift and go to state 40

    variable                       shift and go to state 81

state 59

    (10) declaration -> type VARIABLE EQUAL . expression
    (11) declaration -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (71) call_func -> type VARIABLE EQUAL . VARIABLE call_list
    (59) return_spec -> type VARIABLE EQUAL .
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 84
    VARIABLE        shift and go to state 82
    FUNCTION        reduce using rule 59 (return_spec -> type VARIABLE EQUAL .)
    COMMA           reduce using rule 59 (return_spec -> type VARIABLE EQUAL .)
    NEGATIVE        shift and go to state 46
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 83
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 60

    (74) call_list -> call_list COMMA . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 85
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 61

    (17) math_expression -> expression PLUS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 86
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 62

    (18) math_expression -> expression MINUS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 87
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 63

    (19) math_expression -> expression MATRIX_MUL . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 88
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 64

    (20) math_expression -> expression ELEMENTAL_MUL . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 89
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 65

    (21) math_expression -> expression LEFT_CYCLIC_SHIFT .

    PLUS            reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LESS            reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    AND             reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)


state 66

    (22) math_expression -> expression RIGHT_CYCLIC_SHIFT .

    PLUS            reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LESS            reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    AND             reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)


state 67

    (23) math_expression -> expression TRANSPOSITION .

    PLUS            reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    MINUS           reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    MATRIX_MUL      reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    ELEMENTAL_MUL   reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    LEFT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    RIGHT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    TRANSPOSITION   reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    LESS            reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    GREATER         reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    AND             reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    COMMA           reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    NEW_LINE        reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    BEGINIF         reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    RIGHT_FIGURE_BRACKET reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    DOUBLE_DOT      reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    BEGINFOR        reduce using rule 23 (math_expression -> expression TRANSPOSITION .)


state 68

    (24) math_expression -> expression LESS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 90
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 69

    (25) math_expression -> expression GREATER . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 91
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 70

    (27) math_expression -> expression AND . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 92
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 71

    (26) math_expression -> NEGATIVE expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 26 (math_expression -> NEGATIVE expression .)
    MINUS           reduce using rule 26 (math_expression -> NEGATIVE expression .)
    MATRIX_MUL      reduce using rule 26 (math_expression -> NEGATIVE expression .)
    ELEMENTAL_MUL   reduce using rule 26 (math_expression -> NEGATIVE expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> NEGATIVE expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> NEGATIVE expression .)
    TRANSPOSITION   reduce using rule 26 (math_expression -> NEGATIVE expression .)
    COMMA           reduce using rule 26 (math_expression -> NEGATIVE expression .)
    NEW_LINE        reduce using rule 26 (math_expression -> NEGATIVE expression .)
    BEGINIF         reduce using rule 26 (math_expression -> NEGATIVE expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 26 (math_expression -> NEGATIVE expression .)
    DOUBLE_DOT      reduce using rule 26 (math_expression -> NEGATIVE expression .)
    BEGINFOR        reduce using rule 26 (math_expression -> NEGATIVE expression .)
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70

  ! LESS            [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! GREATER         [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! AND             [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MATRIX_MUL      [ shift and go to state 63 ]
  ! ELEMENTAL_MUL   [ shift and go to state 64 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 65 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 66 ]
  ! TRANSPOSITION   [ shift and go to state 67 ]


state 72

    (12) assignment -> variable ASSIGN expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 12 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 73

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (47) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_expressions
    (50) list_expressions -> . list_expressions COMMA expression
    (51) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 93
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    variable                       shift and go to state 44
    list_args                      shift and go to state 94
    list_expressions               shift and go to state 95
    expression                     shift and go to state 96
    math_expression                shift and go to state 43
    constant                       shift and go to state 45

state 74

    (70) call_func -> variable ASSIGN VARIABLE . call_list
    (28) variable -> VARIABLE .
    (74) call_list -> . call_list COMMA expression
    (75) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    variable                       shift and go to state 44
    call_list                      shift and go to state 97
    expression                     shift and go to state 42
    math_expression                shift and go to state 43
    constant                       shift and go to state 45

state 75

    (52) if -> IF expression BEGINIF . NEW_LINE sentence_list ENDIF

    NEW_LINE        shift and go to state 98


state 76

    (53) for -> FOR VARIABLE EQUAL . expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 99
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 77

    (54) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 100


state 78

    (58) return_spec -> return_spec COMMA type . VARIABLE EQUAL

    VARIABLE        shift and go to state 101


state 79

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (61) parameters -> . parameters COMMA parameter
    (62) parameters -> . parameter
    (63) parameter -> . type VARIABLE
    (64) parameter -> . type VARIABLE EQUAL constant
    (65) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (29) type -> . int
    (30) type -> . bool
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 103
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    parameters                     shift and go to state 102
    parameter                      shift and go to state 104
    type                           shift and go to state 105
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 80

    (68) call_func -> ret_list ASSIGN VARIABLE . call_list
    (69) call_func -> ret_list ASSIGN VARIABLE .
    (74) call_list -> . call_list COMMA expression
    (75) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEW_LINE        reduce using rule 69 (call_func -> ret_list ASSIGN VARIABLE .)
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    call_list                      shift and go to state 106
    expression                     shift and go to state 42
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 81

    (73) ret_list -> ret_list COMMA variable .

    ASSIGN          reduce using rule 73 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 73 (ret_list -> ret_list COMMA variable .)


state 82

    (71) call_func -> type VARIABLE EQUAL VARIABLE . call_list
    (28) variable -> VARIABLE .
    (74) call_list -> . call_list COMMA expression
    (75) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    call_list                      shift and go to state 107
    expression                     shift and go to state 42
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 83

    (10) declaration -> type VARIABLE EQUAL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 10 (declaration -> type VARIABLE EQUAL expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 84

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (47) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_expressions
    (50) list_expressions -> . list_expressions COMMA expression
    (51) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 93
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    list_args                      shift and go to state 108
    list_expressions               shift and go to state 95
    expression                     shift and go to state 96
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 85

    (74) call_list -> call_list COMMA expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 74 (call_list -> call_list COMMA expression .)
    NEW_LINE        reduce using rule 74 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 86

    (17) math_expression -> expression PLUS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 17 (math_expression -> expression PLUS expression .)
    NEW_LINE        reduce using rule 17 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 17 (math_expression -> expression PLUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 17 (math_expression -> expression PLUS expression .)
    DOUBLE_DOT      reduce using rule 17 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 17 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70

  ! PLUS            [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]


state 87

    (18) math_expression -> expression MINUS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 18 (math_expression -> expression MINUS expression .)
    NEW_LINE        reduce using rule 18 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 18 (math_expression -> expression MINUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 18 (math_expression -> expression MINUS expression .)
    DOUBLE_DOT      reduce using rule 18 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 18 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70

  ! PLUS            [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]


state 88

    (19) math_expression -> expression MATRIX_MUL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    NEW_LINE        reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    BEGINIF         reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    DOUBLE_DOT      reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    BEGINFOR        reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70

  ! PLUS            [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MINUS           [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LESS            [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! GREATER         [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! AND             [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]


state 89

    (20) math_expression -> expression ELEMENTAL_MUL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    NEW_LINE        reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINIF         reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    DOUBLE_DOT      reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINFOR        reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70

  ! PLUS            [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MINUS           [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LESS            [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! GREATER         [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! AND             [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]


state 90

    (24) math_expression -> expression LESS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 24 (math_expression -> expression LESS expression .)
    MINUS           reduce using rule 24 (math_expression -> expression LESS expression .)
    MATRIX_MUL      reduce using rule 24 (math_expression -> expression LESS expression .)
    ELEMENTAL_MUL   reduce using rule 24 (math_expression -> expression LESS expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression LESS expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression LESS expression .)
    TRANSPOSITION   reduce using rule 24 (math_expression -> expression LESS expression .)
    LESS            reduce using rule 24 (math_expression -> expression LESS expression .)
    GREATER         reduce using rule 24 (math_expression -> expression LESS expression .)
    AND             reduce using rule 24 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 24 (math_expression -> expression LESS expression .)
    NEW_LINE        reduce using rule 24 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 24 (math_expression -> expression LESS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 24 (math_expression -> expression LESS expression .)
    DOUBLE_DOT      reduce using rule 24 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 24 (math_expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MATRIX_MUL      [ shift and go to state 63 ]
  ! ELEMENTAL_MUL   [ shift and go to state 64 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 65 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 66 ]
  ! TRANSPOSITION   [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]


state 91

    (25) math_expression -> expression GREATER expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 25 (math_expression -> expression GREATER expression .)
    MINUS           reduce using rule 25 (math_expression -> expression GREATER expression .)
    MATRIX_MUL      reduce using rule 25 (math_expression -> expression GREATER expression .)
    ELEMENTAL_MUL   reduce using rule 25 (math_expression -> expression GREATER expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression GREATER expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression GREATER expression .)
    TRANSPOSITION   reduce using rule 25 (math_expression -> expression GREATER expression .)
    LESS            reduce using rule 25 (math_expression -> expression GREATER expression .)
    GREATER         reduce using rule 25 (math_expression -> expression GREATER expression .)
    AND             reduce using rule 25 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 25 (math_expression -> expression GREATER expression .)
    NEW_LINE        reduce using rule 25 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 25 (math_expression -> expression GREATER expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 25 (math_expression -> expression GREATER expression .)
    DOUBLE_DOT      reduce using rule 25 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 25 (math_expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MATRIX_MUL      [ shift and go to state 63 ]
  ! ELEMENTAL_MUL   [ shift and go to state 64 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 65 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 66 ]
  ! TRANSPOSITION   [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER         [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]


state 92

    (27) math_expression -> expression AND expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 27 (math_expression -> expression AND expression .)
    MINUS           reduce using rule 27 (math_expression -> expression AND expression .)
    MATRIX_MUL      reduce using rule 27 (math_expression -> expression AND expression .)
    ELEMENTAL_MUL   reduce using rule 27 (math_expression -> expression AND expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression AND expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression AND expression .)
    TRANSPOSITION   reduce using rule 27 (math_expression -> expression AND expression .)
    AND             reduce using rule 27 (math_expression -> expression AND expression .)
    COMMA           reduce using rule 27 (math_expression -> expression AND expression .)
    NEW_LINE        reduce using rule 27 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 27 (math_expression -> expression AND expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 27 (math_expression -> expression AND expression .)
    DOUBLE_DOT      reduce using rule 27 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 27 (math_expression -> expression AND expression .)
    LESS            shift and go to state 68
    GREATER         shift and go to state 69

  ! LESS            [ reduce using rule 27 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 27 (math_expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MATRIX_MUL      [ shift and go to state 63 ]
  ! ELEMENTAL_MUL   [ shift and go to state 64 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 65 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 66 ]
  ! TRANSPOSITION   [ shift and go to state 67 ]
  ! AND             [ shift and go to state 70 ]


state 93

    (47) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (50) list_expressions -> . list_expressions COMMA expression
    (51) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    list_expressions               shift and go to state 109
    expression                     shift and go to state 96
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 94

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (48) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 110
    COMMA           shift and go to state 111


state 95

    (49) list_args -> list_expressions .
    (50) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET reduce using rule 49 (list_args -> list_expressions .)
    COMMA           shift and go to state 112

  ! COMMA           [ reduce using rule 49 (list_args -> list_expressions .) ]


state 96

    (51) list_expressions -> expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 51 (list_expressions -> expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 51 (list_expressions -> expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 97

    (70) call_func -> variable ASSIGN VARIABLE call_list .
    (74) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 70 (call_func -> variable ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 60


state 98

    (52) if -> IF expression BEGINIF NEW_LINE . sentence_list ENDIF
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    sentence_list                  shift and go to state 113
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 99

    (53) for -> FOR VARIABLE EQUAL expression . DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    DOUBLE_DOT      shift and go to state 114
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 100

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (61) parameters -> . parameters COMMA parameter
    (62) parameters -> . parameter
    (63) parameter -> . type VARIABLE
    (64) parameter -> . type VARIABLE EQUAL constant
    (65) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (29) type -> . int
    (30) type -> . bool
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 116
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    parameters                     shift and go to state 115
    parameter                      shift and go to state 104
    type                           shift and go to state 105
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 101

    (58) return_spec -> return_spec COMMA type VARIABLE . EQUAL

    EQUAL           shift and go to state 117


state 102

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (61) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 118
    COMMA           shift and go to state 119


state 103

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 120


state 104

    (62) parameters -> parameter .

    RIGHT_BRACKET   reduce using rule 62 (parameters -> parameter .)
    COMMA           reduce using rule 62 (parameters -> parameter .)


state 105

    (63) parameter -> type . VARIABLE
    (64) parameter -> type . VARIABLE EQUAL constant
    (65) parameter -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    VARIABLE        shift and go to state 121


state 106

    (68) call_func -> ret_list ASSIGN VARIABLE call_list .
    (74) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 68 (call_func -> ret_list ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 60


state 107

    (71) call_func -> type VARIABLE EQUAL VARIABLE call_list .
    (74) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 71 (call_func -> type VARIABLE EQUAL VARIABLE call_list .)
    COMMA           shift and go to state 60


state 108

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (48) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 122
    COMMA           shift and go to state 111


state 109

    (47) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (50) list_expressions -> list_expressions . COMMA expression

    RIGHT_FIGURE_BRACKET shift and go to state 123
    COMMA           shift and go to state 112


state 110

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 13 (assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 111

    (48) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    LEFT_FIGURE_BRACKET shift and go to state 124


state 112

    (50) list_expressions -> list_expressions COMMA . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 125
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 113

    (52) if -> IF expression BEGINIF NEW_LINE sentence_list . ENDIF
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    ENDIF           shift and go to state 126
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 114

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT . expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    expression                     shift and go to state 127
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 115

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (61) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 128
    COMMA           shift and go to state 119


state 116

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 129


state 117

    (58) return_spec -> return_spec COMMA type VARIABLE EQUAL .

    FUNCTION        reduce using rule 58 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)
    COMMA           reduce using rule 58 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)


state 118

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 130


state 119

    (61) parameters -> parameters COMMA . parameter
    (63) parameter -> . type VARIABLE
    (64) parameter -> . type VARIABLE EQUAL constant
    (65) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (29) type -> . int
    (30) type -> . bool
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    parameter                      shift and go to state 131
    type                           shift and go to state 105
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 120

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 132


state 121

    (63) parameter -> type VARIABLE .
    (64) parameter -> type VARIABLE . EQUAL constant
    (65) parameter -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 63 (parameter -> type VARIABLE .)
    COMMA           reduce using rule 63 (parameter -> type VARIABLE .)
    EQUAL           shift and go to state 133


state 122

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 11 (declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 123

    (47) list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .

    RIGHT_FIGURE_BRACKET reduce using rule 47 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 47 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)


state 124

    (48) list_args -> list_args COMMA LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (47) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_expressions
    (50) list_expressions -> . list_expressions COMMA expression
    (51) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 93
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    list_args                      shift and go to state 134
    list_expressions               shift and go to state 95
    expression                     shift and go to state 96
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 125

    (50) list_expressions -> list_expressions COMMA expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 50 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 50 (list_expressions -> list_expressions COMMA expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 126

    (52) if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .

    NEW_LINE        reduce using rule 52 (if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .)


state 127

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression . BEGINFOR NEW_LINE sentence_list ENDFOR
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    BEGINFOR        shift and go to state 135
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MATRIX_MUL      shift and go to state 63
    ELEMENTAL_MUL   shift and go to state 64
    LEFT_CYCLIC_SHIFT shift and go to state 65
    RIGHT_CYCLIC_SHIFT shift and go to state 66
    TRANSPOSITION   shift and go to state 67
    LESS            shift and go to state 68
    GREATER         shift and go to state 69
    AND             shift and go to state 70


state 128

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 136


state 129

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 137


state 130

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 138


state 131

    (61) parameters -> parameters COMMA parameter .

    RIGHT_BRACKET   reduce using rule 61 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 61 (parameters -> parameters COMMA parameter .)


state 132

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    sentence_list                  shift and go to state 139
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 133

    (64) parameter -> type VARIABLE EQUAL . constant
    (65) parameter -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 141
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    constant                       shift and go to state 140

state 134

    (48) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (48) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 142
    COMMA           shift and go to state 111


state 135

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR . NEW_LINE sentence_list ENDFOR

    NEW_LINE        shift and go to state 143


state 136

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 144


state 137

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    return_spec                    shift and go to state 15
    sentence_list                  shift and go to state 145
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 138

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    sentence_list                  shift and go to state 146
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 139

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    END             shift and go to state 147
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 140

    (64) parameter -> type VARIABLE EQUAL constant .

    RIGHT_BRACKET   reduce using rule 64 (parameter -> type VARIABLE EQUAL constant .)
    COMMA           reduce using rule 64 (parameter -> type VARIABLE EQUAL constant .)


state 141

    (65) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (47) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_expressions
    (50) list_expressions -> . list_expressions COMMA expression
    (51) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (43) constant -> . INT_BINARY
    (44) constant -> . INT_DECIMAL
    (45) constant -> . TRUE
    (46) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 93
    NEGATIVE        shift and go to state 46
    VARIABLE        shift and go to state 40
    INT_BINARY      shift and go to state 47
    INT_DECIMAL     shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    list_args                      shift and go to state 148
    list_expressions               shift and go to state 95
    expression                     shift and go to state 96
    math_expression                shift and go to state 43
    variable                       shift and go to state 44
    constant                       shift and go to state 45

state 142

    (48) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_FIGURE_BRACKET reduce using rule 48 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 48 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 143

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE . sentence_list ENDFOR
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    sentence_list                  shift and go to state 149
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 144

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    return_spec                    shift and go to state 15
    sentence_list                  shift and go to state 150
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 145

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    END             shift and go to state 151
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    return_spec                    shift and go to state 15
    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 146

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    END             shift and go to state 152
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 147

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 57 (function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 148

    (65) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (48) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 153
    COMMA           shift and go to state 111


state 149

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list . ENDFOR
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    ENDFOR          shift and go to state 154
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 150

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (52) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (53) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (66) call_func -> . VARIABLE
    (67) call_func -> . VARIABLE call_list
    (68) call_func -> . ret_list ASSIGN VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE
    (70) call_func -> . variable ASSIGN VARIABLE call_list
    (71) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (29) type -> . int
    (30) type -> . bool
    (28) variable -> . VARIABLE
    (58) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE
    (72) ret_list -> . variable
    (73) ret_list -> . ret_list COMMA variable
    (31) int -> . INT
    (32) int -> . CVINT
    (33) int -> . VINT
    (34) int -> . CMINT
    (35) int -> . MINT
    (36) int -> . CINT
    (37) bool -> . BOOL
    (38) bool -> . CMBOOL
    (39) bool -> . MBOOL
    (40) bool -> . CVBOOL
    (41) bool -> . VBOOL
    (42) bool -> . CBOOL

    END             shift and go to state 155
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    INT             shift and go to state 20
    CVINT           shift and go to state 21
    VINT            shift and go to state 22
    CMINT           shift and go to state 23
    MINT            shift and go to state 24
    CINT            shift and go to state 25
    BOOL            shift and go to state 26
    CMBOOL          shift and go to state 27
    MBOOL           shift and go to state 28
    CVBOOL          shift and go to state 29
    VBOOL           shift and go to state 30
    CBOOL           shift and go to state 31

    return_spec                    shift and go to state 15
    single_sentence                shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 18
    bool                           shift and go to state 19

state 151

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 55 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 152

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 56 (function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 153

    (65) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 65 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 65 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 154

    (53) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .

    NEW_LINE        reduce using rule 53 (for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .)


state 155

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 54 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 86 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 86 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 86 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 86 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 87 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 87 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 88 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 88 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 89 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 89 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
