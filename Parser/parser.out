Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    LEFT
    MOVE
    RIGHT
    SUM
    WALL

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence_list
Rule 2     sentence_list -> sentence_list single_sentence
Rule 3     sentence_list -> single_sentence
Rule 4     single_sentence -> declaration NEW_LINE
Rule 5     single_sentence -> assignment NEW_LINE
Rule 6     single_sentence -> if NEW_LINE
Rule 7     single_sentence -> for NEW_LINE
Rule 8     single_sentence -> function NEW_LINE
Rule 9     declaration -> type VARIABLE EQUAL expression
Rule 10    declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 11    assignment -> variable ASSIGN expression
Rule 12    assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 13    expression -> math_expression
Rule 14    expression -> variable
Rule 15    expression -> constant
Rule 16    math_expression -> expression PLUS expression
Rule 17    math_expression -> expression MINUS expression
Rule 18    math_expression -> expression MATRIX_MUL expression
Rule 19    math_expression -> expression ELEMENTAL_MUL expression
Rule 20    math_expression -> expression LEFT_CYCLIC_SHIFT
Rule 21    math_expression -> expression RIGHT_CYCLIC_SHIFT
Rule 22    math_expression -> expression TRANSPOSITION
Rule 23    math_expression -> expression LESS expression
Rule 24    math_expression -> expression GREATER expression
Rule 25    math_expression -> NEGATIVE expression
Rule 26    math_expression -> expression AND expression
Rule 27    variable -> VARIABLE
Rule 28    type -> int
Rule 29    type -> bool
Rule 30    int -> INT
Rule 31    int -> CVINT
Rule 32    int -> VINT
Rule 33    int -> CMINT
Rule 34    int -> MINT
Rule 35    int -> CINT
Rule 36    bool -> BOOL
Rule 37    bool -> CMBOOL
Rule 38    bool -> MBOOL
Rule 39    bool -> CVBOOL
Rule 40    bool -> VBOOL
Rule 41    bool -> CBOOL
Rule 42    constant -> INT_BINARY
Rule 43    constant -> INT_DECIMAL
Rule 44    constant -> TRUE
Rule 45    constant -> FALSE
Rule 46    list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
Rule 47    list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 48    list_args -> list_expressions
Rule 49    list_expressions -> list_expressions COMMA expression
Rule 50    list_expressions -> expression
Rule 51    if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF
Rule 52    for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
Rule 53    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 54    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 55    function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 56    function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 57    return_spec -> return_spec COMMA type VARIABLE EQUAL
Rule 58    return_spec -> type VARIABLE EQUAL
Rule 59    return_spec -> type VARIABLE
Rule 60    parameters -> parameters COMMA parameter
Rule 61    parameters -> parameter
Rule 62    parameter -> type VARIABLE
Rule 63    parameter -> type VARIABLE EQUAL list_args
Rule 64    parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

Terminals, with rules where they appear

AND                  : 26
ASSIGN               : 11 12
BEGIN                : 53 54 55 56
BEGINFOR             : 52
BEGINIF              : 51
BOOL                 : 36
CBOOL                : 41
CINT                 : 35
CMBOOL               : 37
CMINT                : 33
COMMA                : 47 49 57 60
CVBOOL               : 39
CVINT                : 31
DOUBLE_DOT           : 52
ELEMENTAL_MUL        : 19
END                  : 53 54 55 56
ENDFOR               : 52
ENDIF                : 51
EQUAL                : 9 10 52 57 58 63 64
EXIT                 : 
FALSE                : 45
FOR                  : 52
FUNCTION             : 53 54 55 56
GREATER              : 24
IF                   : 51
INT                  : 30
INT_BINARY           : 42
INT_DECIMAL          : 43
LEFT                 : 
LEFT_BRACKET         : 53 54 55 56
LEFT_CYCLIC_SHIFT    : 20
LEFT_FIGURE_BRACKET  : 10 12 46 47 64
LESS                 : 23
MATRIX_MUL           : 18
MBOOL                : 38
MINT                 : 34
MINUS                : 17
MOVE                 : 
NEGATIVE             : 25
NEW_LINE             : 4 5 6 7 8 51 52 53 54 55 56
PLUS                 : 16
RIGHT                : 
RIGHT_BRACKET        : 53 54 55 56
RIGHT_CYCLIC_SHIFT   : 21
RIGHT_FIGURE_BRACKET : 10 12 46 47 64
SUM                  : 
TRANSPOSITION        : 22
TRUE                 : 44
VARIABLE             : 9 10 27 52 53 54 55 56 57 58 59 62 63 64
VBOOL                : 40
VINT                 : 32
WALL                 : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 29
constant             : 15
declaration          : 4
expression           : 9 11 16 16 17 17 18 18 19 19 20 21 22 23 23 24 24 25 26 26 49 50 51 52 52
for                  : 7
function             : 8
if                   : 6
int                  : 28
list_args            : 10 12 47 47 63 64
list_expressions     : 46 48 49
math_expression      : 13
parameter            : 60 61
parameters           : 53 55 60
program              : 0
return_spec          : 53 54 57
sentence_list        : 1 2 51 52 53 54 55 56
single_sentence      : 2 3
type                 : 9 10 57 58 59 62 63 64
variable             : 11 12 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence_list
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    program                        shift and go to state 1
    sentence_list                  shift and go to state 2
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence_list .
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    $end            reduce using rule 1 (program -> sentence_list .)
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 3

    (3) sentence_list -> single_sentence .

    IF              reduce using rule 3 (sentence_list -> single_sentence .)
    FOR             reduce using rule 3 (sentence_list -> single_sentence .)
    FUNCTION        reduce using rule 3 (sentence_list -> single_sentence .)
    VARIABLE        reduce using rule 3 (sentence_list -> single_sentence .)
    INT             reduce using rule 3 (sentence_list -> single_sentence .)
    CVINT           reduce using rule 3 (sentence_list -> single_sentence .)
    VINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CMINT           reduce using rule 3 (sentence_list -> single_sentence .)
    MINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CINT            reduce using rule 3 (sentence_list -> single_sentence .)
    BOOL            reduce using rule 3 (sentence_list -> single_sentence .)
    CMBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    MBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CVBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    VBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    $end            reduce using rule 3 (sentence_list -> single_sentence .)
    ENDIF           reduce using rule 3 (sentence_list -> single_sentence .)
    END             reduce using rule 3 (sentence_list -> single_sentence .)
    ENDFOR          reduce using rule 3 (sentence_list -> single_sentence .)


state 4

    (4) single_sentence -> declaration . NEW_LINE

    NEW_LINE        shift and go to state 31


state 5

    (5) single_sentence -> assignment . NEW_LINE

    NEW_LINE        shift and go to state 32


state 6

    (6) single_sentence -> if . NEW_LINE

    NEW_LINE        shift and go to state 33


state 7

    (7) single_sentence -> for . NEW_LINE

    NEW_LINE        shift and go to state 34


state 8

    (8) single_sentence -> function . NEW_LINE

    NEW_LINE        shift and go to state 35


state 9

    (9) declaration -> type . VARIABLE EQUAL expression
    (10) declaration -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (58) return_spec -> type . VARIABLE EQUAL
    (59) return_spec -> type . VARIABLE

    VARIABLE        shift and go to state 36


state 10

    (27) variable -> VARIABLE .

    ASSIGN          reduce using rule 27 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 27 (variable -> VARIABLE .)
    PLUS            reduce using rule 27 (variable -> VARIABLE .)
    MINUS           reduce using rule 27 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 27 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 27 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 27 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 27 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 27 (variable -> VARIABLE .)
    LESS            reduce using rule 27 (variable -> VARIABLE .)
    GREATER         reduce using rule 27 (variable -> VARIABLE .)
    AND             reduce using rule 27 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 27 (variable -> VARIABLE .)
    COMMA           reduce using rule 27 (variable -> VARIABLE .)
    RIGHT_FIGURE_BRACKET reduce using rule 27 (variable -> VARIABLE .)
    DOUBLE_DOT      reduce using rule 27 (variable -> VARIABLE .)
    RIGHT_BRACKET   reduce using rule 27 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 27 (variable -> VARIABLE .)


state 11

    (11) assignment -> variable . ASSIGN expression
    (12) assignment -> variable . ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    ASSIGN          shift and go to state 37


state 12

    (51) if -> IF . expression BEGINIF NEW_LINE sentence_list ENDIF
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 38
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 13

    (52) for -> FOR . VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    VARIABLE        shift and go to state 47


state 14

    (53) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) return_spec -> return_spec . COMMA type VARIABLE EQUAL

    FUNCTION        shift and go to state 48
    COMMA           shift and go to state 49


state 15

    (55) function -> FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 50


state 16

    (28) type -> int .

    VARIABLE        reduce using rule 28 (type -> int .)


state 17

    (29) type -> bool .

    VARIABLE        reduce using rule 29 (type -> bool .)


state 18

    (30) int -> INT .

    VARIABLE        reduce using rule 30 (int -> INT .)


state 19

    (31) int -> CVINT .

    VARIABLE        reduce using rule 31 (int -> CVINT .)


state 20

    (32) int -> VINT .

    VARIABLE        reduce using rule 32 (int -> VINT .)


state 21

    (33) int -> CMINT .

    VARIABLE        reduce using rule 33 (int -> CMINT .)


state 22

    (34) int -> MINT .

    VARIABLE        reduce using rule 34 (int -> MINT .)


state 23

    (35) int -> CINT .

    VARIABLE        reduce using rule 35 (int -> CINT .)


state 24

    (36) bool -> BOOL .

    VARIABLE        reduce using rule 36 (bool -> BOOL .)


state 25

    (37) bool -> CMBOOL .

    VARIABLE        reduce using rule 37 (bool -> CMBOOL .)


state 26

    (38) bool -> MBOOL .

    VARIABLE        reduce using rule 38 (bool -> MBOOL .)


state 27

    (39) bool -> CVBOOL .

    VARIABLE        reduce using rule 39 (bool -> CVBOOL .)


state 28

    (40) bool -> VBOOL .

    VARIABLE        reduce using rule 40 (bool -> VBOOL .)


state 29

    (41) bool -> CBOOL .

    VARIABLE        reduce using rule 41 (bool -> CBOOL .)


state 30

    (2) sentence_list -> sentence_list single_sentence .

    IF              reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FOR             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FUNCTION        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VARIABLE        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    INT             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    BOOL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    $end            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDIF           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    END             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDFOR          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)


state 31

    (4) single_sentence -> declaration NEW_LINE .

    IF              reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FOR             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FUNCTION        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VARIABLE        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    INT             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    BOOL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    $end            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDIF           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    END             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDFOR          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)


state 32

    (5) single_sentence -> assignment NEW_LINE .

    IF              reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FOR             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FUNCTION        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VARIABLE        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    INT             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    BOOL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    $end            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDIF           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    END             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDFOR          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)


state 33

    (6) single_sentence -> if NEW_LINE .

    IF              reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FOR             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FUNCTION        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VARIABLE        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    INT             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    BOOL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    $end            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDIF           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    END             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDFOR          reduce using rule 6 (single_sentence -> if NEW_LINE .)


state 34

    (7) single_sentence -> for NEW_LINE .

    IF              reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FOR             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FUNCTION        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VARIABLE        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    INT             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    BOOL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    $end            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDIF           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    END             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDFOR          reduce using rule 7 (single_sentence -> for NEW_LINE .)


state 35

    (8) single_sentence -> function NEW_LINE .

    IF              reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FOR             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FUNCTION        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VARIABLE        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    INT             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    BOOL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    $end            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDIF           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    END             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDFOR          reduce using rule 8 (single_sentence -> function NEW_LINE .)


state 36

    (9) declaration -> type VARIABLE . EQUAL expression
    (10) declaration -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (58) return_spec -> type VARIABLE . EQUAL
    (59) return_spec -> type VARIABLE .

    EQUAL           shift and go to state 51
    FUNCTION        reduce using rule 59 (return_spec -> type VARIABLE .)
    COMMA           reduce using rule 59 (return_spec -> type VARIABLE .)


state 37

    (11) assignment -> variable ASSIGN . expression
    (12) assignment -> variable ASSIGN . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 53
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    variable                       shift and go to state 40
    expression                     shift and go to state 52
    math_expression                shift and go to state 39
    constant                       shift and go to state 41

state 38

    (51) if -> IF expression . BEGINIF NEW_LINE sentence_list ENDIF
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINIF         shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 39

    (13) expression -> math_expression .

    BEGINIF         reduce using rule 13 (expression -> math_expression .)
    PLUS            reduce using rule 13 (expression -> math_expression .)
    MINUS           reduce using rule 13 (expression -> math_expression .)
    MATRIX_MUL      reduce using rule 13 (expression -> math_expression .)
    ELEMENTAL_MUL   reduce using rule 13 (expression -> math_expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 13 (expression -> math_expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 13 (expression -> math_expression .)
    TRANSPOSITION   reduce using rule 13 (expression -> math_expression .)
    LESS            reduce using rule 13 (expression -> math_expression .)
    GREATER         reduce using rule 13 (expression -> math_expression .)
    AND             reduce using rule 13 (expression -> math_expression .)
    NEW_LINE        reduce using rule 13 (expression -> math_expression .)
    COMMA           reduce using rule 13 (expression -> math_expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 13 (expression -> math_expression .)
    DOUBLE_DOT      reduce using rule 13 (expression -> math_expression .)
    RIGHT_BRACKET   reduce using rule 13 (expression -> math_expression .)
    BEGINFOR        reduce using rule 13 (expression -> math_expression .)


state 40

    (14) expression -> variable .

    BEGINIF         reduce using rule 14 (expression -> variable .)
    PLUS            reduce using rule 14 (expression -> variable .)
    MINUS           reduce using rule 14 (expression -> variable .)
    MATRIX_MUL      reduce using rule 14 (expression -> variable .)
    ELEMENTAL_MUL   reduce using rule 14 (expression -> variable .)
    LEFT_CYCLIC_SHIFT reduce using rule 14 (expression -> variable .)
    RIGHT_CYCLIC_SHIFT reduce using rule 14 (expression -> variable .)
    TRANSPOSITION   reduce using rule 14 (expression -> variable .)
    LESS            reduce using rule 14 (expression -> variable .)
    GREATER         reduce using rule 14 (expression -> variable .)
    AND             reduce using rule 14 (expression -> variable .)
    NEW_LINE        reduce using rule 14 (expression -> variable .)
    COMMA           reduce using rule 14 (expression -> variable .)
    RIGHT_FIGURE_BRACKET reduce using rule 14 (expression -> variable .)
    DOUBLE_DOT      reduce using rule 14 (expression -> variable .)
    RIGHT_BRACKET   reduce using rule 14 (expression -> variable .)
    BEGINFOR        reduce using rule 14 (expression -> variable .)


state 41

    (15) expression -> constant .

    BEGINIF         reduce using rule 15 (expression -> constant .)
    PLUS            reduce using rule 15 (expression -> constant .)
    MINUS           reduce using rule 15 (expression -> constant .)
    MATRIX_MUL      reduce using rule 15 (expression -> constant .)
    ELEMENTAL_MUL   reduce using rule 15 (expression -> constant .)
    LEFT_CYCLIC_SHIFT reduce using rule 15 (expression -> constant .)
    RIGHT_CYCLIC_SHIFT reduce using rule 15 (expression -> constant .)
    TRANSPOSITION   reduce using rule 15 (expression -> constant .)
    LESS            reduce using rule 15 (expression -> constant .)
    GREATER         reduce using rule 15 (expression -> constant .)
    AND             reduce using rule 15 (expression -> constant .)
    NEW_LINE        reduce using rule 15 (expression -> constant .)
    COMMA           reduce using rule 15 (expression -> constant .)
    RIGHT_FIGURE_BRACKET reduce using rule 15 (expression -> constant .)
    DOUBLE_DOT      reduce using rule 15 (expression -> constant .)
    RIGHT_BRACKET   reduce using rule 15 (expression -> constant .)
    BEGINFOR        reduce using rule 15 (expression -> constant .)


state 42

    (25) math_expression -> NEGATIVE . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 65
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 43

    (42) constant -> INT_BINARY .

    BEGINIF         reduce using rule 42 (constant -> INT_BINARY .)
    PLUS            reduce using rule 42 (constant -> INT_BINARY .)
    MINUS           reduce using rule 42 (constant -> INT_BINARY .)
    MATRIX_MUL      reduce using rule 42 (constant -> INT_BINARY .)
    ELEMENTAL_MUL   reduce using rule 42 (constant -> INT_BINARY .)
    LEFT_CYCLIC_SHIFT reduce using rule 42 (constant -> INT_BINARY .)
    RIGHT_CYCLIC_SHIFT reduce using rule 42 (constant -> INT_BINARY .)
    TRANSPOSITION   reduce using rule 42 (constant -> INT_BINARY .)
    LESS            reduce using rule 42 (constant -> INT_BINARY .)
    GREATER         reduce using rule 42 (constant -> INT_BINARY .)
    AND             reduce using rule 42 (constant -> INT_BINARY .)
    NEW_LINE        reduce using rule 42 (constant -> INT_BINARY .)
    COMMA           reduce using rule 42 (constant -> INT_BINARY .)
    RIGHT_FIGURE_BRACKET reduce using rule 42 (constant -> INT_BINARY .)
    DOUBLE_DOT      reduce using rule 42 (constant -> INT_BINARY .)
    RIGHT_BRACKET   reduce using rule 42 (constant -> INT_BINARY .)
    BEGINFOR        reduce using rule 42 (constant -> INT_BINARY .)


state 44

    (43) constant -> INT_DECIMAL .

    BEGINIF         reduce using rule 43 (constant -> INT_DECIMAL .)
    PLUS            reduce using rule 43 (constant -> INT_DECIMAL .)
    MINUS           reduce using rule 43 (constant -> INT_DECIMAL .)
    MATRIX_MUL      reduce using rule 43 (constant -> INT_DECIMAL .)
    ELEMENTAL_MUL   reduce using rule 43 (constant -> INT_DECIMAL .)
    LEFT_CYCLIC_SHIFT reduce using rule 43 (constant -> INT_DECIMAL .)
    RIGHT_CYCLIC_SHIFT reduce using rule 43 (constant -> INT_DECIMAL .)
    TRANSPOSITION   reduce using rule 43 (constant -> INT_DECIMAL .)
    LESS            reduce using rule 43 (constant -> INT_DECIMAL .)
    GREATER         reduce using rule 43 (constant -> INT_DECIMAL .)
    AND             reduce using rule 43 (constant -> INT_DECIMAL .)
    NEW_LINE        reduce using rule 43 (constant -> INT_DECIMAL .)
    COMMA           reduce using rule 43 (constant -> INT_DECIMAL .)
    RIGHT_FIGURE_BRACKET reduce using rule 43 (constant -> INT_DECIMAL .)
    DOUBLE_DOT      reduce using rule 43 (constant -> INT_DECIMAL .)
    RIGHT_BRACKET   reduce using rule 43 (constant -> INT_DECIMAL .)
    BEGINFOR        reduce using rule 43 (constant -> INT_DECIMAL .)


state 45

    (44) constant -> TRUE .

    BEGINIF         reduce using rule 44 (constant -> TRUE .)
    PLUS            reduce using rule 44 (constant -> TRUE .)
    MINUS           reduce using rule 44 (constant -> TRUE .)
    MATRIX_MUL      reduce using rule 44 (constant -> TRUE .)
    ELEMENTAL_MUL   reduce using rule 44 (constant -> TRUE .)
    LEFT_CYCLIC_SHIFT reduce using rule 44 (constant -> TRUE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 44 (constant -> TRUE .)
    TRANSPOSITION   reduce using rule 44 (constant -> TRUE .)
    LESS            reduce using rule 44 (constant -> TRUE .)
    GREATER         reduce using rule 44 (constant -> TRUE .)
    AND             reduce using rule 44 (constant -> TRUE .)
    NEW_LINE        reduce using rule 44 (constant -> TRUE .)
    COMMA           reduce using rule 44 (constant -> TRUE .)
    RIGHT_FIGURE_BRACKET reduce using rule 44 (constant -> TRUE .)
    DOUBLE_DOT      reduce using rule 44 (constant -> TRUE .)
    RIGHT_BRACKET   reduce using rule 44 (constant -> TRUE .)
    BEGINFOR        reduce using rule 44 (constant -> TRUE .)


state 46

    (45) constant -> FALSE .

    BEGINIF         reduce using rule 45 (constant -> FALSE .)
    PLUS            reduce using rule 45 (constant -> FALSE .)
    MINUS           reduce using rule 45 (constant -> FALSE .)
    MATRIX_MUL      reduce using rule 45 (constant -> FALSE .)
    ELEMENTAL_MUL   reduce using rule 45 (constant -> FALSE .)
    LEFT_CYCLIC_SHIFT reduce using rule 45 (constant -> FALSE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 45 (constant -> FALSE .)
    TRANSPOSITION   reduce using rule 45 (constant -> FALSE .)
    LESS            reduce using rule 45 (constant -> FALSE .)
    GREATER         reduce using rule 45 (constant -> FALSE .)
    AND             reduce using rule 45 (constant -> FALSE .)
    NEW_LINE        reduce using rule 45 (constant -> FALSE .)
    COMMA           reduce using rule 45 (constant -> FALSE .)
    RIGHT_FIGURE_BRACKET reduce using rule 45 (constant -> FALSE .)
    DOUBLE_DOT      reduce using rule 45 (constant -> FALSE .)
    RIGHT_BRACKET   reduce using rule 45 (constant -> FALSE .)
    BEGINFOR        reduce using rule 45 (constant -> FALSE .)


state 47

    (52) for -> FOR VARIABLE . EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    EQUAL           shift and go to state 66


state 48

    (53) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 67


state 49

    (57) return_spec -> return_spec COMMA . type VARIABLE EQUAL
    (28) type -> . int
    (29) type -> . bool
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    type                           shift and go to state 68
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 50

    (55) function -> FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 69


state 51

    (9) declaration -> type VARIABLE EQUAL . expression
    (10) declaration -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (58) return_spec -> type VARIABLE EQUAL .
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 71
    FUNCTION        reduce using rule 58 (return_spec -> type VARIABLE EQUAL .)
    COMMA           reduce using rule 58 (return_spec -> type VARIABLE EQUAL .)
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 70
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 52

    (11) assignment -> variable ASSIGN expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 11 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 53

    (12) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (46) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (47) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_expressions
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 72
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    variable                       shift and go to state 40
    list_args                      shift and go to state 73
    list_expressions               shift and go to state 74
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    constant                       shift and go to state 41

state 54

    (51) if -> IF expression BEGINIF . NEW_LINE sentence_list ENDIF

    NEW_LINE        shift and go to state 76


state 55

    (16) math_expression -> expression PLUS . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 77
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 56

    (17) math_expression -> expression MINUS . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 78
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 57

    (18) math_expression -> expression MATRIX_MUL . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 79
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 58

    (19) math_expression -> expression ELEMENTAL_MUL . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 80
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 59

    (20) math_expression -> expression LEFT_CYCLIC_SHIFT .

    BEGINIF         reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    PLUS            reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LESS            reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    AND             reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 20 (math_expression -> expression LEFT_CYCLIC_SHIFT .)


state 60

    (21) math_expression -> expression RIGHT_CYCLIC_SHIFT .

    BEGINIF         reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    PLUS            reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LESS            reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    AND             reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 21 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)


state 61

    (22) math_expression -> expression TRANSPOSITION .

    BEGINIF         reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    PLUS            reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    MINUS           reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    MATRIX_MUL      reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    ELEMENTAL_MUL   reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    LEFT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    RIGHT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    TRANSPOSITION   reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    LESS            reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    GREATER         reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    AND             reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    NEW_LINE        reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    COMMA           reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    RIGHT_FIGURE_BRACKET reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    DOUBLE_DOT      reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    RIGHT_BRACKET   reduce using rule 22 (math_expression -> expression TRANSPOSITION .)
    BEGINFOR        reduce using rule 22 (math_expression -> expression TRANSPOSITION .)


state 62

    (23) math_expression -> expression LESS . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 81
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 63

    (24) math_expression -> expression GREATER . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 82
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 64

    (26) math_expression -> expression AND . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 83
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 65

    (25) math_expression -> NEGATIVE expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINIF         reduce using rule 25 (math_expression -> NEGATIVE expression .)
    PLUS            reduce using rule 25 (math_expression -> NEGATIVE expression .)
    MINUS           reduce using rule 25 (math_expression -> NEGATIVE expression .)
    MATRIX_MUL      reduce using rule 25 (math_expression -> NEGATIVE expression .)
    ELEMENTAL_MUL   reduce using rule 25 (math_expression -> NEGATIVE expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> NEGATIVE expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> NEGATIVE expression .)
    TRANSPOSITION   reduce using rule 25 (math_expression -> NEGATIVE expression .)
    NEW_LINE        reduce using rule 25 (math_expression -> NEGATIVE expression .)
    COMMA           reduce using rule 25 (math_expression -> NEGATIVE expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 25 (math_expression -> NEGATIVE expression .)
    DOUBLE_DOT      reduce using rule 25 (math_expression -> NEGATIVE expression .)
    RIGHT_BRACKET   reduce using rule 25 (math_expression -> NEGATIVE expression .)
    BEGINFOR        reduce using rule 25 (math_expression -> NEGATIVE expression .)
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64

  ! LESS            [ reduce using rule 25 (math_expression -> NEGATIVE expression .) ]
  ! GREATER         [ reduce using rule 25 (math_expression -> NEGATIVE expression .) ]
  ! AND             [ reduce using rule 25 (math_expression -> NEGATIVE expression .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! MATRIX_MUL      [ shift and go to state 57 ]
  ! ELEMENTAL_MUL   [ shift and go to state 58 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 59 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 60 ]
  ! TRANSPOSITION   [ shift and go to state 61 ]


state 66

    (52) for -> FOR VARIABLE EQUAL . expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 84
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 67

    (53) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 85


state 68

    (57) return_spec -> return_spec COMMA type . VARIABLE EQUAL

    VARIABLE        shift and go to state 86


state 69

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) parameters -> . parameters COMMA parameter
    (61) parameters -> . parameter
    (62) parameter -> . type VARIABLE
    (63) parameter -> . type VARIABLE EQUAL list_args
    (64) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (28) type -> . int
    (29) type -> . bool
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 88
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    parameters                     shift and go to state 87
    parameter                      shift and go to state 89
    type                           shift and go to state 90
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 70

    (9) declaration -> type VARIABLE EQUAL expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 9 (declaration -> type VARIABLE EQUAL expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 71

    (10) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (46) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (47) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_expressions
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 72
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    list_args                      shift and go to state 91
    list_expressions               shift and go to state 74
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 72

    (46) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    list_expressions               shift and go to state 92
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 73

    (12) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (47) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 93
    COMMA           shift and go to state 94


state 74

    (48) list_args -> list_expressions .
    (49) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET reduce using rule 48 (list_args -> list_expressions .)
    RIGHT_BRACKET   reduce using rule 48 (list_args -> list_expressions .)
    COMMA           shift and go to state 95

  ! COMMA           [ reduce using rule 48 (list_args -> list_expressions .) ]


state 75

    (50) list_expressions -> expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    COMMA           reduce using rule 50 (list_expressions -> expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 50 (list_expressions -> expression .)
    RIGHT_BRACKET   reduce using rule 50 (list_expressions -> expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 76

    (51) if -> IF expression BEGINIF NEW_LINE . sentence_list ENDIF
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    sentence_list                  shift and go to state 96
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 77

    (16) math_expression -> expression PLUS expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    BEGINIF         reduce using rule 16 (math_expression -> expression PLUS expression .)
    NEW_LINE        reduce using rule 16 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 16 (math_expression -> expression PLUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 16 (math_expression -> expression PLUS expression .)
    DOUBLE_DOT      reduce using rule 16 (math_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 16 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 16 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64

  ! PLUS            [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 16 (math_expression -> expression PLUS expression .) ]


state 78

    (17) math_expression -> expression MINUS expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    BEGINIF         reduce using rule 17 (math_expression -> expression MINUS expression .)
    NEW_LINE        reduce using rule 17 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 17 (math_expression -> expression MINUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 17 (math_expression -> expression MINUS expression .)
    DOUBLE_DOT      reduce using rule 17 (math_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 17 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 17 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64

  ! PLUS            [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 17 (math_expression -> expression MINUS expression .) ]


state 79

    (18) math_expression -> expression MATRIX_MUL expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    BEGINIF         reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    NEW_LINE        reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    COMMA           reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    DOUBLE_DOT      reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_BRACKET   reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    BEGINFOR        reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64

  ! PLUS            [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MINUS           [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LESS            [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! GREATER         [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]
  ! AND             [ reduce using rule 18 (math_expression -> expression MATRIX_MUL expression .) ]


state 80

    (19) math_expression -> expression ELEMENTAL_MUL expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    BEGINIF         reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    NEW_LINE        reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    COMMA           reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    DOUBLE_DOT      reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_BRACKET   reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINFOR        reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64

  ! PLUS            [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MINUS           [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LESS            [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! GREATER         [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! AND             [ reduce using rule 19 (math_expression -> expression ELEMENTAL_MUL expression .) ]


state 81

    (23) math_expression -> expression LESS expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINIF         reduce using rule 23 (math_expression -> expression LESS expression .)
    PLUS            reduce using rule 23 (math_expression -> expression LESS expression .)
    MINUS           reduce using rule 23 (math_expression -> expression LESS expression .)
    MATRIX_MUL      reduce using rule 23 (math_expression -> expression LESS expression .)
    ELEMENTAL_MUL   reduce using rule 23 (math_expression -> expression LESS expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression LESS expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression LESS expression .)
    TRANSPOSITION   reduce using rule 23 (math_expression -> expression LESS expression .)
    LESS            reduce using rule 23 (math_expression -> expression LESS expression .)
    GREATER         reduce using rule 23 (math_expression -> expression LESS expression .)
    AND             reduce using rule 23 (math_expression -> expression LESS expression .)
    NEW_LINE        reduce using rule 23 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 23 (math_expression -> expression LESS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 23 (math_expression -> expression LESS expression .)
    DOUBLE_DOT      reduce using rule 23 (math_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 23 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 23 (math_expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! MATRIX_MUL      [ shift and go to state 57 ]
  ! ELEMENTAL_MUL   [ shift and go to state 58 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 59 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 60 ]
  ! TRANSPOSITION   [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 62 ]
  ! GREATER         [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 82

    (24) math_expression -> expression GREATER expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINIF         reduce using rule 24 (math_expression -> expression GREATER expression .)
    PLUS            reduce using rule 24 (math_expression -> expression GREATER expression .)
    MINUS           reduce using rule 24 (math_expression -> expression GREATER expression .)
    MATRIX_MUL      reduce using rule 24 (math_expression -> expression GREATER expression .)
    ELEMENTAL_MUL   reduce using rule 24 (math_expression -> expression GREATER expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression GREATER expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression GREATER expression .)
    TRANSPOSITION   reduce using rule 24 (math_expression -> expression GREATER expression .)
    LESS            reduce using rule 24 (math_expression -> expression GREATER expression .)
    GREATER         reduce using rule 24 (math_expression -> expression GREATER expression .)
    AND             reduce using rule 24 (math_expression -> expression GREATER expression .)
    NEW_LINE        reduce using rule 24 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 24 (math_expression -> expression GREATER expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 24 (math_expression -> expression GREATER expression .)
    DOUBLE_DOT      reduce using rule 24 (math_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 24 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 24 (math_expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! MATRIX_MUL      [ shift and go to state 57 ]
  ! ELEMENTAL_MUL   [ shift and go to state 58 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 59 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 60 ]
  ! TRANSPOSITION   [ shift and go to state 61 ]
  ! LESS            [ shift and go to state 62 ]
  ! GREATER         [ shift and go to state 63 ]
  ! AND             [ shift and go to state 64 ]


state 83

    (26) math_expression -> expression AND expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINIF         reduce using rule 26 (math_expression -> expression AND expression .)
    PLUS            reduce using rule 26 (math_expression -> expression AND expression .)
    MINUS           reduce using rule 26 (math_expression -> expression AND expression .)
    MATRIX_MUL      reduce using rule 26 (math_expression -> expression AND expression .)
    ELEMENTAL_MUL   reduce using rule 26 (math_expression -> expression AND expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> expression AND expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> expression AND expression .)
    TRANSPOSITION   reduce using rule 26 (math_expression -> expression AND expression .)
    AND             reduce using rule 26 (math_expression -> expression AND expression .)
    NEW_LINE        reduce using rule 26 (math_expression -> expression AND expression .)
    COMMA           reduce using rule 26 (math_expression -> expression AND expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 26 (math_expression -> expression AND expression .)
    DOUBLE_DOT      reduce using rule 26 (math_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 26 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 26 (math_expression -> expression AND expression .)
    LESS            shift and go to state 62
    GREATER         shift and go to state 63

  ! LESS            [ reduce using rule 26 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 26 (math_expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! MATRIX_MUL      [ shift and go to state 57 ]
  ! ELEMENTAL_MUL   [ shift and go to state 58 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 59 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 60 ]
  ! TRANSPOSITION   [ shift and go to state 61 ]
  ! AND             [ shift and go to state 64 ]


state 84

    (52) for -> FOR VARIABLE EQUAL expression . DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    DOUBLE_DOT      shift and go to state 97
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 85

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) parameters -> . parameters COMMA parameter
    (61) parameters -> . parameter
    (62) parameter -> . type VARIABLE
    (63) parameter -> . type VARIABLE EQUAL list_args
    (64) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (28) type -> . int
    (29) type -> . bool
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 99
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    parameters                     shift and go to state 98
    parameter                      shift and go to state 89
    type                           shift and go to state 90
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 86

    (57) return_spec -> return_spec COMMA type VARIABLE . EQUAL

    EQUAL           shift and go to state 100


state 87

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 101
    COMMA           shift and go to state 102


state 88

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 103


state 89

    (61) parameters -> parameter .

    RIGHT_BRACKET   reduce using rule 61 (parameters -> parameter .)
    COMMA           reduce using rule 61 (parameters -> parameter .)


state 90

    (62) parameter -> type . VARIABLE
    (63) parameter -> type . VARIABLE EQUAL list_args
    (64) parameter -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    VARIABLE        shift and go to state 104


state 91

    (10) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (47) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 105
    COMMA           shift and go to state 94


state 92

    (46) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (49) list_expressions -> list_expressions . COMMA expression

    RIGHT_FIGURE_BRACKET shift and go to state 106
    COMMA           shift and go to state 95


state 93

    (12) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 12 (assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 94

    (47) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    LEFT_FIGURE_BRACKET shift and go to state 107


state 95

    (49) list_expressions -> list_expressions COMMA . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 108
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 96

    (51) if -> IF expression BEGINIF NEW_LINE sentence_list . ENDIF
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    ENDIF           shift and go to state 109
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 97

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT . expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 110
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 98

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (60) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 111
    COMMA           shift and go to state 102


state 99

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 112


state 100

    (57) return_spec -> return_spec COMMA type VARIABLE EQUAL .

    FUNCTION        reduce using rule 57 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)
    COMMA           reduce using rule 57 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)


state 101

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 113


state 102

    (60) parameters -> parameters COMMA . parameter
    (62) parameter -> . type VARIABLE
    (63) parameter -> . type VARIABLE EQUAL list_args
    (64) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (28) type -> . int
    (29) type -> . bool
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    parameter                      shift and go to state 114
    type                           shift and go to state 90
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 103

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 115


state 104

    (62) parameter -> type VARIABLE .
    (63) parameter -> type VARIABLE . EQUAL list_args
    (64) parameter -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 62 (parameter -> type VARIABLE .)
    COMMA           reduce using rule 62 (parameter -> type VARIABLE .)
    EQUAL           shift and go to state 116


state 105

    (10) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 10 (declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 106

    (46) list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .

    RIGHT_FIGURE_BRACKET reduce using rule 46 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 46 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 46 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)


state 107

    (47) list_args -> list_args COMMA LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (46) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (47) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_expressions
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 72
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    list_args                      shift and go to state 117
    list_expressions               shift and go to state 74
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 108

    (49) list_expressions -> list_expressions COMMA expression .
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    COMMA           reduce using rule 49 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 49 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_BRACKET   reduce using rule 49 (list_expressions -> list_expressions COMMA expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 109

    (51) if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .

    NEW_LINE        reduce using rule 51 (if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .)


state 110

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression . BEGINFOR NEW_LINE sentence_list ENDFOR
    (16) math_expression -> expression . PLUS expression
    (17) math_expression -> expression . MINUS expression
    (18) math_expression -> expression . MATRIX_MUL expression
    (19) math_expression -> expression . ELEMENTAL_MUL expression
    (20) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (21) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (22) math_expression -> expression . TRANSPOSITION
    (23) math_expression -> expression . LESS expression
    (24) math_expression -> expression . GREATER expression
    (26) math_expression -> expression . AND expression

    BEGINFOR        shift and go to state 118
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    MATRIX_MUL      shift and go to state 57
    ELEMENTAL_MUL   shift and go to state 58
    LEFT_CYCLIC_SHIFT shift and go to state 59
    RIGHT_CYCLIC_SHIFT shift and go to state 60
    TRANSPOSITION   shift and go to state 61
    LESS            shift and go to state 62
    GREATER         shift and go to state 63
    AND             shift and go to state 64


state 111

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 119


state 112

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 120


state 113

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 121


state 114

    (60) parameters -> parameters COMMA parameter .

    RIGHT_BRACKET   reduce using rule 60 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 60 (parameters -> parameters COMMA parameter .)


state 115

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    sentence_list                  shift and go to state 122
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 116

    (63) parameter -> type VARIABLE EQUAL . list_args
    (64) parameter -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (46) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (47) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_expressions
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 124
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    list_args                      shift and go to state 123
    list_expressions               shift and go to state 74
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 117

    (47) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (47) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 125
    COMMA           shift and go to state 94


state 118

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR . NEW_LINE sentence_list ENDFOR

    NEW_LINE        shift and go to state 126


state 119

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 127


state 120

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    return_spec                    shift and go to state 14
    sentence_list                  shift and go to state 128
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 121

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    sentence_list                  shift and go to state 129
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 122

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    END             shift and go to state 130
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 123

    (63) parameter -> type VARIABLE EQUAL list_args .
    (47) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_BRACKET   reduce using rule 63 (parameter -> type VARIABLE EQUAL list_args .)
    COMMA           shift and go to state 94

  ! COMMA           [ reduce using rule 63 (parameter -> type VARIABLE EQUAL list_args .) ]


state 124

    (64) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (46) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (46) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (47) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . list_expressions
    (49) list_expressions -> . list_expressions COMMA expression
    (50) list_expressions -> . expression
    (13) expression -> . math_expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) math_expression -> . expression PLUS expression
    (17) math_expression -> . expression MINUS expression
    (18) math_expression -> . expression MATRIX_MUL expression
    (19) math_expression -> . expression ELEMENTAL_MUL expression
    (20) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (21) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (22) math_expression -> . expression TRANSPOSITION
    (23) math_expression -> . expression LESS expression
    (24) math_expression -> . expression GREATER expression
    (25) math_expression -> . NEGATIVE expression
    (26) math_expression -> . expression AND expression
    (27) variable -> . VARIABLE
    (42) constant -> . INT_BINARY
    (43) constant -> . INT_DECIMAL
    (44) constant -> . TRUE
    (45) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 72
    NEGATIVE        shift and go to state 42
    VARIABLE        shift and go to state 10
    INT_BINARY      shift and go to state 43
    INT_DECIMAL     shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    list_args                      shift and go to state 131
    list_expressions               shift and go to state 132
    expression                     shift and go to state 75
    math_expression                shift and go to state 39
    variable                       shift and go to state 40
    constant                       shift and go to state 41

state 125

    (47) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_FIGURE_BRACKET reduce using rule 47 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 47 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 47 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 126

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE . sentence_list ENDFOR
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    sentence_list                  shift and go to state 133
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 127

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    return_spec                    shift and go to state 14
    sentence_list                  shift and go to state 134
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 128

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    END             shift and go to state 135
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    return_spec                    shift and go to state 14
    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 129

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    END             shift and go to state 136
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 130

    (56) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 56 (function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 131

    (64) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (47) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 137
    COMMA           shift and go to state 94


state 132

    (46) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (48) list_args -> list_expressions .
    (49) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for RIGHT_FIGURE_BRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET shift and go to state 106
    COMMA           shift and go to state 95

  ! RIGHT_FIGURE_BRACKET [ reduce using rule 48 (list_args -> list_expressions .) ]
  ! COMMA           [ reduce using rule 48 (list_args -> list_expressions .) ]


state 133

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list . ENDFOR
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    ENDFOR          shift and go to state 138
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    return_spec                    shift and go to state 14
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 134

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) declaration -> . type VARIABLE EQUAL expression
    (10) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (11) assignment -> . variable ASSIGN expression
    (12) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (51) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (52) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (53) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (54) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (55) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (28) type -> . int
    (29) type -> . bool
    (27) variable -> . VARIABLE
    (57) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (58) return_spec -> . type VARIABLE EQUAL
    (59) return_spec -> . type VARIABLE
    (30) int -> . INT
    (31) int -> . CVINT
    (32) int -> . VINT
    (33) int -> . CMINT
    (34) int -> . MINT
    (35) int -> . CINT
    (36) bool -> . BOOL
    (37) bool -> . CMBOOL
    (38) bool -> . MBOOL
    (39) bool -> . CVBOOL
    (40) bool -> . VBOOL
    (41) bool -> . CBOOL

    END             shift and go to state 139
    IF              shift and go to state 12
    FOR             shift and go to state 13
    FUNCTION        shift and go to state 15
    VARIABLE        shift and go to state 10
    INT             shift and go to state 18
    CVINT           shift and go to state 19
    VINT            shift and go to state 20
    CMINT           shift and go to state 21
    MINT            shift and go to state 22
    CINT            shift and go to state 23
    BOOL            shift and go to state 24
    CMBOOL          shift and go to state 25
    MBOOL           shift and go to state 26
    CVBOOL          shift and go to state 27
    VBOOL           shift and go to state 28
    CBOOL           shift and go to state 29

    return_spec                    shift and go to state 14
    single_sentence                shift and go to state 30
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    type                           shift and go to state 9
    variable                       shift and go to state 11
    int                            shift and go to state 16
    bool                           shift and go to state 17

state 135

    (54) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 54 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 136

    (55) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 55 (function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 137

    (64) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 64 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 64 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 138

    (52) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .

    NEW_LINE        reduce using rule 52 (for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .)


state 139

    (53) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 53 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 80 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 80 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 123 resolved as shift
WARNING: shift/reduce conflict for RIGHT_FIGURE_BRACKET in state 132 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 132 resolved as shift
