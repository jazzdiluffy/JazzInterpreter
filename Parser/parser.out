Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    LEFT
    MOVE
    RIGHT
    SUM
    WALL

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence_list
Rule 2     sentence_list -> sentence_list single_sentence
Rule 3     sentence_list -> single_sentence
Rule 4     single_sentence -> declaration NEW_LINE
Rule 5     single_sentence -> assignment NEW_LINE
Rule 6     single_sentence -> if NEW_LINE
Rule 7     single_sentence -> for NEW_LINE
Rule 8     single_sentence -> function NEW_LINE
Rule 9     single_sentence -> call_func NEW_LINE
Rule 10    declaration -> type VARIABLE EQUAL expression
Rule 11    declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 12    assignment -> variable ASSIGN expression
Rule 13    assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 14    expression -> math_expression
Rule 15    expression -> variable
Rule 16    expression -> constant
Rule 17    math_expression -> expression PLUS expression
Rule 18    math_expression -> expression MINUS expression
Rule 19    math_expression -> expression MATRIX_MUL expression
Rule 20    math_expression -> expression ELEMENTAL_MUL expression
Rule 21    math_expression -> expression LEFT_CYCLIC_SHIFT
Rule 22    math_expression -> expression RIGHT_CYCLIC_SHIFT
Rule 23    math_expression -> expression TRANSPOSITION
Rule 24    math_expression -> expression LESS expression
Rule 25    math_expression -> expression GREATER expression
Rule 26    math_expression -> NEGATIVE expression
Rule 27    math_expression -> expression AND expression
Rule 28    variable -> VARIABLE
Rule 29    variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET
Rule 30    type -> int
Rule 31    type -> bool
Rule 32    int -> INT
Rule 33    int -> CVINT
Rule 34    int -> VINT
Rule 35    int -> CMINT
Rule 36    int -> MINT
Rule 37    int -> CINT
Rule 38    bool -> BOOL
Rule 39    bool -> CMBOOL
Rule 40    bool -> MBOOL
Rule 41    bool -> CVBOOL
Rule 42    bool -> VBOOL
Rule 43    bool -> CBOOL
Rule 44    constant -> INT_BINARY
Rule 45    constant -> INT_DECIMAL
Rule 46    constant -> TRUE
Rule 47    constant -> FALSE
Rule 48    list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
Rule 49    list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 50    list_args -> list_expressions
Rule 51    list_expressions -> list_expressions COMMA expression
Rule 52    list_expressions -> expression
Rule 53    if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF
Rule 54    for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
Rule 55    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 56    function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 57    function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 58    function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
Rule 59    return_spec -> return_spec COMMA type VARIABLE EQUAL
Rule 60    return_spec -> type VARIABLE EQUAL
Rule 61    return_spec -> type VARIABLE
Rule 62    parameters -> parameters COMMA parameter
Rule 63    parameters -> parameter
Rule 64    parameter -> type VARIABLE
Rule 65    parameter -> type VARIABLE EQUAL constant
Rule 66    parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
Rule 67    call_func -> VARIABLE
Rule 68    call_func -> VARIABLE call_list
Rule 69    call_func -> ret_list ASSIGN VARIABLE call_list
Rule 70    call_func -> CALL ret_list ASSIGN VARIABLE call_list
Rule 71    call_func -> CALL ret_list ASSIGN VARIABLE
Rule 72    call_func -> variable ASSIGN VARIABLE call_list
Rule 73    call_func -> type VARIABLE EQUAL VARIABLE call_list
Rule 74    ret_list -> variable
Rule 75    ret_list -> ret_list COMMA variable
Rule 76    call_list -> call_list COMMA expression
Rule 77    call_list -> expression
Rule 78    ind -> COMMA
Rule 79    ind -> COMMA DOUBLE_DOT
Rule 80    ind -> DOUBLE_DOT COMMA
Rule 81    index -> expression
Rule 82    index -> list_expressions
Rule 83    index -> list_expressions ind
Rule 84    index -> ind list_expressions
Rule 85    index -> list_args ind
Rule 86    index -> ind list_args
Rule 87    index -> list_args
Rule 88    index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

Terminals, with rules where they appear

AND                  : 27
ASSIGN               : 12 13 69 70 71 72
BEGIN                : 55 56 57 58
BEGINFOR             : 54
BEGINIF              : 53
BOOL                 : 38
CALL                 : 70 71
CBOOL                : 43
CINT                 : 37
CMBOOL               : 39
CMINT                : 35
COMMA                : 49 51 59 62 75 76 78 79 80
CVBOOL               : 41
CVINT                : 33
DOUBLE_DOT           : 54 79 80
ELEMENTAL_MUL        : 20
END                  : 55 56 57 58
ENDFOR               : 54
ENDIF                : 53
EQUAL                : 10 11 54 59 60 65 66 73
EXIT                 : 
FALSE                : 47
FOR                  : 54
FUNCTION             : 55 56 57 58
GREATER              : 25
IF                   : 53
INT                  : 32
INT_BINARY           : 44
INT_DECIMAL          : 45
LEFT                 : 
LEFT_BRACKET         : 29 55 56 57 58
LEFT_CYCLIC_SHIFT    : 21
LEFT_FIGURE_BRACKET  : 11 13 48 49 66 88
LESS                 : 24
MATRIX_MUL           : 19
MBOOL                : 40
MINT                 : 36
MINUS                : 18
MOVE                 : 
NEGATIVE             : 26
NEW_LINE             : 4 5 6 7 8 9 53 54 55 56 57 58
PLUS                 : 17
RIGHT                : 
RIGHT_BRACKET        : 29 55 56 57 58
RIGHT_CYCLIC_SHIFT   : 22
RIGHT_FIGURE_BRACKET : 11 13 48 49 66 88
SUM                  : 
TRANSPOSITION        : 23
TRUE                 : 46
VARIABLE             : 10 11 28 29 54 55 56 57 58 59 60 61 64 65 66 67 68 69 70 71 72 73 73
VBOOL                : 42
VINT                 : 34
WALL                 : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 31
call_func            : 9
call_list            : 68 69 70 72 73 76
constant             : 16 65
declaration          : 4
expression           : 10 12 17 17 18 18 19 19 20 20 21 22 23 24 24 25 25 26 27 27 51 52 53 54 54 76 77 81
for                  : 7
function             : 8
if                   : 6
ind                  : 83 84 85 86
index                : 29
int                  : 30
list_args            : 11 13 49 49 66 85 86 87 88
list_expressions     : 48 50 51 82 83 84
math_expression      : 14
parameter            : 62 63
parameters           : 55 57 62
program              : 0
ret_list             : 69 70 71 75
return_spec          : 55 56 59
sentence_list        : 1 2 53 54 55 56 57 58
single_sentence      : 2 3
type                 : 10 11 59 60 61 64 65 66 73
variable             : 12 13 15 72 74 75

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence_list
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    program                        shift and go to state 1
    sentence_list                  shift and go to state 2
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence_list .
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    $end            reduce using rule 1 (program -> sentence_list .)
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 3

    (3) sentence_list -> single_sentence .

    IF              reduce using rule 3 (sentence_list -> single_sentence .)
    FOR             reduce using rule 3 (sentence_list -> single_sentence .)
    FUNCTION        reduce using rule 3 (sentence_list -> single_sentence .)
    VARIABLE        reduce using rule 3 (sentence_list -> single_sentence .)
    CALL            reduce using rule 3 (sentence_list -> single_sentence .)
    INT             reduce using rule 3 (sentence_list -> single_sentence .)
    CVINT           reduce using rule 3 (sentence_list -> single_sentence .)
    VINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CMINT           reduce using rule 3 (sentence_list -> single_sentence .)
    MINT            reduce using rule 3 (sentence_list -> single_sentence .)
    CINT            reduce using rule 3 (sentence_list -> single_sentence .)
    BOOL            reduce using rule 3 (sentence_list -> single_sentence .)
    CMBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    MBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CVBOOL          reduce using rule 3 (sentence_list -> single_sentence .)
    VBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    CBOOL           reduce using rule 3 (sentence_list -> single_sentence .)
    $end            reduce using rule 3 (sentence_list -> single_sentence .)
    ENDIF           reduce using rule 3 (sentence_list -> single_sentence .)
    END             reduce using rule 3 (sentence_list -> single_sentence .)
    ENDFOR          reduce using rule 3 (sentence_list -> single_sentence .)


state 4

    (4) single_sentence -> declaration . NEW_LINE

    NEW_LINE        shift and go to state 34


state 5

    (5) single_sentence -> assignment . NEW_LINE

    NEW_LINE        shift and go to state 35


state 6

    (6) single_sentence -> if . NEW_LINE

    NEW_LINE        shift and go to state 36


state 7

    (7) single_sentence -> for . NEW_LINE

    NEW_LINE        shift and go to state 37


state 8

    (8) single_sentence -> function . NEW_LINE

    NEW_LINE        shift and go to state 38


state 9

    (9) single_sentence -> call_func . NEW_LINE

    NEW_LINE        shift and go to state 39


state 10

    (10) declaration -> type . VARIABLE EQUAL expression
    (11) declaration -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (73) call_func -> type . VARIABLE EQUAL VARIABLE call_list
    (60) return_spec -> type . VARIABLE EQUAL
    (61) return_spec -> type . VARIABLE

    VARIABLE        shift and go to state 40


state 11

    (67) call_func -> VARIABLE .
    (68) call_func -> VARIABLE . call_list
    (28) variable -> VARIABLE .
    (29) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (76) call_list -> . call_list COMMA expression
    (77) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEW_LINE        reduce using rule 67 (call_func -> VARIABLE .)
    ASSIGN          reduce using rule 28 (variable -> VARIABLE .)
    COMMA           reduce using rule 28 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 43
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    call_list                      shift and go to state 42
    expression                     shift and go to state 44
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 12

    (12) assignment -> variable . ASSIGN expression
    (13) assignment -> variable . ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (72) call_func -> variable . ASSIGN VARIABLE call_list
    (74) ret_list -> variable .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 53
    COMMA           reduce using rule 74 (ret_list -> variable .)

  ! ASSIGN          [ reduce using rule 74 (ret_list -> variable .) ]


state 13

    (53) if -> IF . expression BEGINIF NEW_LINE sentence_list ENDIF
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 54
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 14

    (54) for -> FOR . VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    VARIABLE        shift and go to state 55


state 15

    (55) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> return_spec . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (59) return_spec -> return_spec . COMMA type VARIABLE EQUAL

    FUNCTION        shift and go to state 56
    COMMA           shift and go to state 57


state 16

    (57) function -> FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 58


state 17

    (69) call_func -> ret_list . ASSIGN VARIABLE call_list
    (75) ret_list -> ret_list . COMMA variable

    ASSIGN          shift and go to state 59
    COMMA           shift and go to state 60


state 18

    (70) call_func -> CALL . ret_list ASSIGN VARIABLE call_list
    (71) call_func -> CALL . ret_list ASSIGN VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET

    VARIABLE        shift and go to state 41

    ret_list                       shift and go to state 61
    variable                       shift and go to state 62

state 19

    (30) type -> int .

    VARIABLE        reduce using rule 30 (type -> int .)


state 20

    (31) type -> bool .

    VARIABLE        reduce using rule 31 (type -> bool .)


state 21

    (32) int -> INT .

    VARIABLE        reduce using rule 32 (int -> INT .)


state 22

    (33) int -> CVINT .

    VARIABLE        reduce using rule 33 (int -> CVINT .)


state 23

    (34) int -> VINT .

    VARIABLE        reduce using rule 34 (int -> VINT .)


state 24

    (35) int -> CMINT .

    VARIABLE        reduce using rule 35 (int -> CMINT .)


state 25

    (36) int -> MINT .

    VARIABLE        reduce using rule 36 (int -> MINT .)


state 26

    (37) int -> CINT .

    VARIABLE        reduce using rule 37 (int -> CINT .)


state 27

    (38) bool -> BOOL .

    VARIABLE        reduce using rule 38 (bool -> BOOL .)


state 28

    (39) bool -> CMBOOL .

    VARIABLE        reduce using rule 39 (bool -> CMBOOL .)


state 29

    (40) bool -> MBOOL .

    VARIABLE        reduce using rule 40 (bool -> MBOOL .)


state 30

    (41) bool -> CVBOOL .

    VARIABLE        reduce using rule 41 (bool -> CVBOOL .)


state 31

    (42) bool -> VBOOL .

    VARIABLE        reduce using rule 42 (bool -> VBOOL .)


state 32

    (43) bool -> CBOOL .

    VARIABLE        reduce using rule 43 (bool -> CBOOL .)


state 33

    (2) sentence_list -> sentence_list single_sentence .

    IF              reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FOR             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    FUNCTION        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VARIABLE        reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CALL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    INT             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMINT           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CINT            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    BOOL            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CMBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    MBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CVBOOL          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    VBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    CBOOL           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    $end            reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDIF           reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    END             reduce using rule 2 (sentence_list -> sentence_list single_sentence .)
    ENDFOR          reduce using rule 2 (sentence_list -> sentence_list single_sentence .)


state 34

    (4) single_sentence -> declaration NEW_LINE .

    IF              reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FOR             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    FUNCTION        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VARIABLE        reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CALL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    INT             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMINT           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CINT            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    BOOL            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CMBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    MBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CVBOOL          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    VBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    CBOOL           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    $end            reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDIF           reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    END             reduce using rule 4 (single_sentence -> declaration NEW_LINE .)
    ENDFOR          reduce using rule 4 (single_sentence -> declaration NEW_LINE .)


state 35

    (5) single_sentence -> assignment NEW_LINE .

    IF              reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FOR             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    FUNCTION        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VARIABLE        reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CALL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    INT             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMINT           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CINT            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    BOOL            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CMBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    MBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CVBOOL          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    VBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    CBOOL           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    $end            reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDIF           reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    END             reduce using rule 5 (single_sentence -> assignment NEW_LINE .)
    ENDFOR          reduce using rule 5 (single_sentence -> assignment NEW_LINE .)


state 36

    (6) single_sentence -> if NEW_LINE .

    IF              reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FOR             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    FUNCTION        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VARIABLE        reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CALL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    INT             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMINT           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CINT            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    BOOL            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CMBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    MBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CVBOOL          reduce using rule 6 (single_sentence -> if NEW_LINE .)
    VBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    CBOOL           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    $end            reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDIF           reduce using rule 6 (single_sentence -> if NEW_LINE .)
    END             reduce using rule 6 (single_sentence -> if NEW_LINE .)
    ENDFOR          reduce using rule 6 (single_sentence -> if NEW_LINE .)


state 37

    (7) single_sentence -> for NEW_LINE .

    IF              reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FOR             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    FUNCTION        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VARIABLE        reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CALL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    INT             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMINT           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CINT            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    BOOL            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CMBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    MBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CVBOOL          reduce using rule 7 (single_sentence -> for NEW_LINE .)
    VBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    CBOOL           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    $end            reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDIF           reduce using rule 7 (single_sentence -> for NEW_LINE .)
    END             reduce using rule 7 (single_sentence -> for NEW_LINE .)
    ENDFOR          reduce using rule 7 (single_sentence -> for NEW_LINE .)


state 38

    (8) single_sentence -> function NEW_LINE .

    IF              reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FOR             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    FUNCTION        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VARIABLE        reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CALL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    INT             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMINT           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CINT            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    BOOL            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CMBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    MBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CVBOOL          reduce using rule 8 (single_sentence -> function NEW_LINE .)
    VBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    CBOOL           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    $end            reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDIF           reduce using rule 8 (single_sentence -> function NEW_LINE .)
    END             reduce using rule 8 (single_sentence -> function NEW_LINE .)
    ENDFOR          reduce using rule 8 (single_sentence -> function NEW_LINE .)


state 39

    (9) single_sentence -> call_func NEW_LINE .

    IF              reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FOR             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    FUNCTION        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VARIABLE        reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CALL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    INT             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMINT           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CINT            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    BOOL            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CMBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    MBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CVBOOL          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    VBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    CBOOL           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    $end            reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDIF           reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    END             reduce using rule 9 (single_sentence -> call_func NEW_LINE .)
    ENDFOR          reduce using rule 9 (single_sentence -> call_func NEW_LINE .)


state 40

    (10) declaration -> type VARIABLE . EQUAL expression
    (11) declaration -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (73) call_func -> type VARIABLE . EQUAL VARIABLE call_list
    (60) return_spec -> type VARIABLE . EQUAL
    (61) return_spec -> type VARIABLE .

    EQUAL           shift and go to state 63
    FUNCTION        reduce using rule 61 (return_spec -> type VARIABLE .)
    COMMA           reduce using rule 61 (return_spec -> type VARIABLE .)


state 41

    (28) variable -> VARIABLE .
    (29) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    COMMA           reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 28 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_BRACKET   reduce using rule 28 (variable -> VARIABLE .)
    DOUBLE_DOT      reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_FIGURE_BRACKET reduce using rule 28 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 28 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 43


state 42

    (68) call_func -> VARIABLE call_list .
    (76) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 68 (call_func -> VARIABLE call_list .)
    COMMA           shift and go to state 64


state 43

    (29) variable -> VARIABLE LEFT_BRACKET . index RIGHT_BRACKET
    (81) index -> . expression
    (82) index -> . list_expressions
    (83) index -> . list_expressions ind
    (84) index -> . ind list_expressions
    (85) index -> . list_args ind
    (86) index -> . ind list_args
    (87) index -> . list_args
    (88) index -> . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (78) ind -> . COMMA
    (79) ind -> . COMMA DOUBLE_DOT
    (80) ind -> . DOUBLE_DOT COMMA
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 70
    COMMA           shift and go to state 71
    DOUBLE_DOT      shift and go to state 72
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    index                          shift and go to state 65
    expression                     shift and go to state 66
    list_expressions               shift and go to state 67
    ind                            shift and go to state 68
    list_args                      shift and go to state 69
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 44

    (77) call_list -> expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 77 (call_list -> expression .)
    NEW_LINE        reduce using rule 77 (call_list -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 45

    (14) expression -> math_expression .

    PLUS            reduce using rule 14 (expression -> math_expression .)
    MINUS           reduce using rule 14 (expression -> math_expression .)
    MATRIX_MUL      reduce using rule 14 (expression -> math_expression .)
    ELEMENTAL_MUL   reduce using rule 14 (expression -> math_expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 14 (expression -> math_expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 14 (expression -> math_expression .)
    TRANSPOSITION   reduce using rule 14 (expression -> math_expression .)
    LESS            reduce using rule 14 (expression -> math_expression .)
    GREATER         reduce using rule 14 (expression -> math_expression .)
    AND             reduce using rule 14 (expression -> math_expression .)
    COMMA           reduce using rule 14 (expression -> math_expression .)
    NEW_LINE        reduce using rule 14 (expression -> math_expression .)
    BEGINIF         reduce using rule 14 (expression -> math_expression .)
    RIGHT_BRACKET   reduce using rule 14 (expression -> math_expression .)
    DOUBLE_DOT      reduce using rule 14 (expression -> math_expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 14 (expression -> math_expression .)
    BEGINFOR        reduce using rule 14 (expression -> math_expression .)


state 46

    (15) expression -> variable .

    PLUS            reduce using rule 15 (expression -> variable .)
    MINUS           reduce using rule 15 (expression -> variable .)
    MATRIX_MUL      reduce using rule 15 (expression -> variable .)
    ELEMENTAL_MUL   reduce using rule 15 (expression -> variable .)
    LEFT_CYCLIC_SHIFT reduce using rule 15 (expression -> variable .)
    RIGHT_CYCLIC_SHIFT reduce using rule 15 (expression -> variable .)
    TRANSPOSITION   reduce using rule 15 (expression -> variable .)
    LESS            reduce using rule 15 (expression -> variable .)
    GREATER         reduce using rule 15 (expression -> variable .)
    AND             reduce using rule 15 (expression -> variable .)
    COMMA           reduce using rule 15 (expression -> variable .)
    NEW_LINE        reduce using rule 15 (expression -> variable .)
    BEGINIF         reduce using rule 15 (expression -> variable .)
    RIGHT_BRACKET   reduce using rule 15 (expression -> variable .)
    DOUBLE_DOT      reduce using rule 15 (expression -> variable .)
    RIGHT_FIGURE_BRACKET reduce using rule 15 (expression -> variable .)
    BEGINFOR        reduce using rule 15 (expression -> variable .)


state 47

    (16) expression -> constant .

    PLUS            reduce using rule 16 (expression -> constant .)
    MINUS           reduce using rule 16 (expression -> constant .)
    MATRIX_MUL      reduce using rule 16 (expression -> constant .)
    ELEMENTAL_MUL   reduce using rule 16 (expression -> constant .)
    LEFT_CYCLIC_SHIFT reduce using rule 16 (expression -> constant .)
    RIGHT_CYCLIC_SHIFT reduce using rule 16 (expression -> constant .)
    TRANSPOSITION   reduce using rule 16 (expression -> constant .)
    LESS            reduce using rule 16 (expression -> constant .)
    GREATER         reduce using rule 16 (expression -> constant .)
    AND             reduce using rule 16 (expression -> constant .)
    COMMA           reduce using rule 16 (expression -> constant .)
    NEW_LINE        reduce using rule 16 (expression -> constant .)
    BEGINIF         reduce using rule 16 (expression -> constant .)
    RIGHT_BRACKET   reduce using rule 16 (expression -> constant .)
    DOUBLE_DOT      reduce using rule 16 (expression -> constant .)
    RIGHT_FIGURE_BRACKET reduce using rule 16 (expression -> constant .)
    BEGINFOR        reduce using rule 16 (expression -> constant .)


state 48

    (26) math_expression -> NEGATIVE . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 83
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 49

    (44) constant -> INT_BINARY .

    PLUS            reduce using rule 44 (constant -> INT_BINARY .)
    MINUS           reduce using rule 44 (constant -> INT_BINARY .)
    MATRIX_MUL      reduce using rule 44 (constant -> INT_BINARY .)
    ELEMENTAL_MUL   reduce using rule 44 (constant -> INT_BINARY .)
    LEFT_CYCLIC_SHIFT reduce using rule 44 (constant -> INT_BINARY .)
    RIGHT_CYCLIC_SHIFT reduce using rule 44 (constant -> INT_BINARY .)
    TRANSPOSITION   reduce using rule 44 (constant -> INT_BINARY .)
    LESS            reduce using rule 44 (constant -> INT_BINARY .)
    GREATER         reduce using rule 44 (constant -> INT_BINARY .)
    AND             reduce using rule 44 (constant -> INT_BINARY .)
    COMMA           reduce using rule 44 (constant -> INT_BINARY .)
    NEW_LINE        reduce using rule 44 (constant -> INT_BINARY .)
    BEGINIF         reduce using rule 44 (constant -> INT_BINARY .)
    RIGHT_BRACKET   reduce using rule 44 (constant -> INT_BINARY .)
    DOUBLE_DOT      reduce using rule 44 (constant -> INT_BINARY .)
    RIGHT_FIGURE_BRACKET reduce using rule 44 (constant -> INT_BINARY .)
    BEGINFOR        reduce using rule 44 (constant -> INT_BINARY .)


state 50

    (45) constant -> INT_DECIMAL .

    PLUS            reduce using rule 45 (constant -> INT_DECIMAL .)
    MINUS           reduce using rule 45 (constant -> INT_DECIMAL .)
    MATRIX_MUL      reduce using rule 45 (constant -> INT_DECIMAL .)
    ELEMENTAL_MUL   reduce using rule 45 (constant -> INT_DECIMAL .)
    LEFT_CYCLIC_SHIFT reduce using rule 45 (constant -> INT_DECIMAL .)
    RIGHT_CYCLIC_SHIFT reduce using rule 45 (constant -> INT_DECIMAL .)
    TRANSPOSITION   reduce using rule 45 (constant -> INT_DECIMAL .)
    LESS            reduce using rule 45 (constant -> INT_DECIMAL .)
    GREATER         reduce using rule 45 (constant -> INT_DECIMAL .)
    AND             reduce using rule 45 (constant -> INT_DECIMAL .)
    COMMA           reduce using rule 45 (constant -> INT_DECIMAL .)
    NEW_LINE        reduce using rule 45 (constant -> INT_DECIMAL .)
    BEGINIF         reduce using rule 45 (constant -> INT_DECIMAL .)
    RIGHT_BRACKET   reduce using rule 45 (constant -> INT_DECIMAL .)
    DOUBLE_DOT      reduce using rule 45 (constant -> INT_DECIMAL .)
    RIGHT_FIGURE_BRACKET reduce using rule 45 (constant -> INT_DECIMAL .)
    BEGINFOR        reduce using rule 45 (constant -> INT_DECIMAL .)


state 51

    (46) constant -> TRUE .

    PLUS            reduce using rule 46 (constant -> TRUE .)
    MINUS           reduce using rule 46 (constant -> TRUE .)
    MATRIX_MUL      reduce using rule 46 (constant -> TRUE .)
    ELEMENTAL_MUL   reduce using rule 46 (constant -> TRUE .)
    LEFT_CYCLIC_SHIFT reduce using rule 46 (constant -> TRUE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 46 (constant -> TRUE .)
    TRANSPOSITION   reduce using rule 46 (constant -> TRUE .)
    LESS            reduce using rule 46 (constant -> TRUE .)
    GREATER         reduce using rule 46 (constant -> TRUE .)
    AND             reduce using rule 46 (constant -> TRUE .)
    COMMA           reduce using rule 46 (constant -> TRUE .)
    NEW_LINE        reduce using rule 46 (constant -> TRUE .)
    BEGINIF         reduce using rule 46 (constant -> TRUE .)
    RIGHT_BRACKET   reduce using rule 46 (constant -> TRUE .)
    DOUBLE_DOT      reduce using rule 46 (constant -> TRUE .)
    RIGHT_FIGURE_BRACKET reduce using rule 46 (constant -> TRUE .)
    BEGINFOR        reduce using rule 46 (constant -> TRUE .)


state 52

    (47) constant -> FALSE .

    PLUS            reduce using rule 47 (constant -> FALSE .)
    MINUS           reduce using rule 47 (constant -> FALSE .)
    MATRIX_MUL      reduce using rule 47 (constant -> FALSE .)
    ELEMENTAL_MUL   reduce using rule 47 (constant -> FALSE .)
    LEFT_CYCLIC_SHIFT reduce using rule 47 (constant -> FALSE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 47 (constant -> FALSE .)
    TRANSPOSITION   reduce using rule 47 (constant -> FALSE .)
    LESS            reduce using rule 47 (constant -> FALSE .)
    GREATER         reduce using rule 47 (constant -> FALSE .)
    AND             reduce using rule 47 (constant -> FALSE .)
    COMMA           reduce using rule 47 (constant -> FALSE .)
    NEW_LINE        reduce using rule 47 (constant -> FALSE .)
    BEGINIF         reduce using rule 47 (constant -> FALSE .)
    RIGHT_BRACKET   reduce using rule 47 (constant -> FALSE .)
    DOUBLE_DOT      reduce using rule 47 (constant -> FALSE .)
    RIGHT_FIGURE_BRACKET reduce using rule 47 (constant -> FALSE .)
    BEGINFOR        reduce using rule 47 (constant -> FALSE .)


state 53

    (12) assignment -> variable ASSIGN . expression
    (13) assignment -> variable ASSIGN . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (72) call_func -> variable ASSIGN . VARIABLE call_list
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 85
    VARIABLE        shift and go to state 86
    NEGATIVE        shift and go to state 48
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    variable                       shift and go to state 46
    expression                     shift and go to state 84
    math_expression                shift and go to state 45
    constant                       shift and go to state 47

state 54

    (53) if -> IF expression . BEGINIF NEW_LINE sentence_list ENDIF
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    BEGINIF         shift and go to state 87
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 55

    (54) for -> FOR VARIABLE . EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR

    EQUAL           shift and go to state 88


state 56

    (55) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> return_spec FUNCTION . VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    VARIABLE        shift and go to state 89


state 57

    (59) return_spec -> return_spec COMMA . type VARIABLE EQUAL
    (30) type -> . int
    (31) type -> . bool
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    type                           shift and go to state 90
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 58

    (57) function -> FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 91


state 59

    (69) call_func -> ret_list ASSIGN . VARIABLE call_list

    VARIABLE        shift and go to state 92


state 60

    (75) ret_list -> ret_list COMMA . variable
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET

    VARIABLE        shift and go to state 41

    variable                       shift and go to state 93

state 61

    (70) call_func -> CALL ret_list . ASSIGN VARIABLE call_list
    (71) call_func -> CALL ret_list . ASSIGN VARIABLE
    (75) ret_list -> ret_list . COMMA variable

    ASSIGN          shift and go to state 94
    COMMA           shift and go to state 60


state 62

    (74) ret_list -> variable .

    ASSIGN          reduce using rule 74 (ret_list -> variable .)
    COMMA           reduce using rule 74 (ret_list -> variable .)


state 63

    (10) declaration -> type VARIABLE EQUAL . expression
    (11) declaration -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (73) call_func -> type VARIABLE EQUAL . VARIABLE call_list
    (60) return_spec -> type VARIABLE EQUAL .
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 97
    VARIABLE        shift and go to state 95
    FUNCTION        reduce using rule 60 (return_spec -> type VARIABLE EQUAL .)
    COMMA           reduce using rule 60 (return_spec -> type VARIABLE EQUAL .)
    NEGATIVE        shift and go to state 48
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 96
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 64

    (76) call_list -> call_list COMMA . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 98
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 65

    (29) variable -> VARIABLE LEFT_BRACKET index . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 99


state 66

    (81) index -> expression .
    (52) list_expressions -> expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 52 (list_expressions -> expression .)
    COMMA           reduce using rule 52 (list_expressions -> expression .)
    DOUBLE_DOT      reduce using rule 52 (list_expressions -> expression .)
    RIGHT_BRACKET   reduce using rule 52 (list_expressions -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! RIGHT_BRACKET   [ reduce using rule 81 (index -> expression .) ]


state 67

    (82) index -> list_expressions .
    (83) index -> list_expressions . ind
    (51) list_expressions -> list_expressions . COMMA expression
    (50) list_args -> list_expressions .
    (78) ind -> . COMMA
    (79) ind -> . COMMA DOUBLE_DOT
    (80) ind -> . DOUBLE_DOT COMMA

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 50 (list_args -> list_expressions .)
  ! shift/reduce conflict for DOUBLE_DOT resolved as shift
    COMMA           shift and go to state 101
    RIGHT_BRACKET   reduce using rule 50 (list_args -> list_expressions .)
    DOUBLE_DOT      shift and go to state 72

  ! RIGHT_BRACKET   [ reduce using rule 82 (index -> list_expressions .) ]
  ! COMMA           [ reduce using rule 50 (list_args -> list_expressions .) ]
  ! DOUBLE_DOT      [ reduce using rule 50 (list_args -> list_expressions .) ]

    ind                            shift and go to state 100

state 68

    (84) index -> ind . list_expressions
    (86) index -> ind . list_args
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_expressions               shift and go to state 102
    list_args                      shift and go to state 103
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 69

    (85) index -> list_args . ind
    (87) index -> list_args .
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (78) ind -> . COMMA
    (79) ind -> . COMMA DOUBLE_DOT
    (80) ind -> . DOUBLE_DOT COMMA

    RIGHT_BRACKET   reduce using rule 87 (index -> list_args .)
    COMMA           shift and go to state 107
    DOUBLE_DOT      shift and go to state 72

    ind                            shift and go to state 106

state 70

    (88) index -> LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_args                      shift and go to state 108
    list_expressions               shift and go to state 109
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 71

    (78) ind -> COMMA .
    (79) ind -> COMMA . DOUBLE_DOT

    LEFT_FIGURE_BRACKET reduce using rule 78 (ind -> COMMA .)
    NEGATIVE        reduce using rule 78 (ind -> COMMA .)
    VARIABLE        reduce using rule 78 (ind -> COMMA .)
    INT_BINARY      reduce using rule 78 (ind -> COMMA .)
    INT_DECIMAL     reduce using rule 78 (ind -> COMMA .)
    TRUE            reduce using rule 78 (ind -> COMMA .)
    FALSE           reduce using rule 78 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 110


state 72

    (80) ind -> DOUBLE_DOT . COMMA

    COMMA           shift and go to state 111


state 73

    (17) math_expression -> expression PLUS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 112
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 74

    (18) math_expression -> expression MINUS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 113
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 75

    (19) math_expression -> expression MATRIX_MUL . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 114
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 76

    (20) math_expression -> expression ELEMENTAL_MUL . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 115
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 77

    (21) math_expression -> expression LEFT_CYCLIC_SHIFT .

    PLUS            reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    LESS            reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    AND             reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 21 (math_expression -> expression LEFT_CYCLIC_SHIFT .)


state 78

    (22) math_expression -> expression RIGHT_CYCLIC_SHIFT .

    PLUS            reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MINUS           reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    MATRIX_MUL      reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    ELEMENTAL_MUL   reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LEFT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_CYCLIC_SHIFT reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    TRANSPOSITION   reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    LESS            reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    GREATER         reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    AND             reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    COMMA           reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    NEW_LINE        reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINIF         reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_BRACKET   reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    DOUBLE_DOT      reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    RIGHT_FIGURE_BRACKET reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)
    BEGINFOR        reduce using rule 22 (math_expression -> expression RIGHT_CYCLIC_SHIFT .)


state 79

    (23) math_expression -> expression TRANSPOSITION .

    PLUS            reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    MINUS           reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    MATRIX_MUL      reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    ELEMENTAL_MUL   reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    LEFT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    RIGHT_CYCLIC_SHIFT reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    TRANSPOSITION   reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    LESS            reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    GREATER         reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    AND             reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    COMMA           reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    NEW_LINE        reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    BEGINIF         reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    RIGHT_BRACKET   reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    DOUBLE_DOT      reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    RIGHT_FIGURE_BRACKET reduce using rule 23 (math_expression -> expression TRANSPOSITION .)
    BEGINFOR        reduce using rule 23 (math_expression -> expression TRANSPOSITION .)


state 80

    (24) math_expression -> expression LESS . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 116
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 81

    (25) math_expression -> expression GREATER . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 117
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 82

    (27) math_expression -> expression AND . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 118
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 83

    (26) math_expression -> NEGATIVE expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 26 (math_expression -> NEGATIVE expression .)
    MINUS           reduce using rule 26 (math_expression -> NEGATIVE expression .)
    MATRIX_MUL      reduce using rule 26 (math_expression -> NEGATIVE expression .)
    ELEMENTAL_MUL   reduce using rule 26 (math_expression -> NEGATIVE expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> NEGATIVE expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 26 (math_expression -> NEGATIVE expression .)
    TRANSPOSITION   reduce using rule 26 (math_expression -> NEGATIVE expression .)
    COMMA           reduce using rule 26 (math_expression -> NEGATIVE expression .)
    NEW_LINE        reduce using rule 26 (math_expression -> NEGATIVE expression .)
    BEGINIF         reduce using rule 26 (math_expression -> NEGATIVE expression .)
    RIGHT_BRACKET   reduce using rule 26 (math_expression -> NEGATIVE expression .)
    DOUBLE_DOT      reduce using rule 26 (math_expression -> NEGATIVE expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 26 (math_expression -> NEGATIVE expression .)
    BEGINFOR        reduce using rule 26 (math_expression -> NEGATIVE expression .)
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! LESS            [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! GREATER         [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! AND             [ reduce using rule 26 (math_expression -> NEGATIVE expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MATRIX_MUL      [ shift and go to state 75 ]
  ! ELEMENTAL_MUL   [ shift and go to state 76 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 77 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 78 ]
  ! TRANSPOSITION   [ shift and go to state 79 ]


state 84

    (12) assignment -> variable ASSIGN expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 12 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 85

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    variable                       shift and go to state 46
    list_args                      shift and go to state 119
    list_expressions               shift and go to state 120
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    constant                       shift and go to state 47

state 86

    (72) call_func -> variable ASSIGN VARIABLE . call_list
    (28) variable -> VARIABLE .
    (29) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (76) call_list -> . call_list COMMA expression
    (77) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 43
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    variable                       shift and go to state 46
    call_list                      shift and go to state 121
    expression                     shift and go to state 44
    math_expression                shift and go to state 45
    constant                       shift and go to state 47

state 87

    (53) if -> IF expression BEGINIF . NEW_LINE sentence_list ENDIF

    NEW_LINE        shift and go to state 122


state 88

    (54) for -> FOR VARIABLE EQUAL . expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 123
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 89

    (55) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> return_spec FUNCTION VARIABLE . LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END

    LEFT_BRACKET    shift and go to state 124


state 90

    (59) return_spec -> return_spec COMMA type . VARIABLE EQUAL

    VARIABLE        shift and go to state 125


state 91

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (62) parameters -> . parameters COMMA parameter
    (63) parameters -> . parameter
    (64) parameter -> . type VARIABLE
    (65) parameter -> . type VARIABLE EQUAL constant
    (66) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (30) type -> . int
    (31) type -> . bool
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 127
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    parameters                     shift and go to state 126
    parameter                      shift and go to state 128
    type                           shift and go to state 129
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 92

    (69) call_func -> ret_list ASSIGN VARIABLE . call_list
    (76) call_list -> . call_list COMMA expression
    (77) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    call_list                      shift and go to state 130
    expression                     shift and go to state 44
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 93

    (75) ret_list -> ret_list COMMA variable .

    ASSIGN          reduce using rule 75 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 75 (ret_list -> ret_list COMMA variable .)


state 94

    (70) call_func -> CALL ret_list ASSIGN . VARIABLE call_list
    (71) call_func -> CALL ret_list ASSIGN . VARIABLE

    VARIABLE        shift and go to state 131


state 95

    (73) call_func -> type VARIABLE EQUAL VARIABLE . call_list
    (28) variable -> VARIABLE .
    (29) variable -> VARIABLE . LEFT_BRACKET index RIGHT_BRACKET
    (76) call_list -> . call_list COMMA expression
    (77) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    PLUS            reduce using rule 28 (variable -> VARIABLE .)
    MINUS           reduce using rule 28 (variable -> VARIABLE .)
    MATRIX_MUL      reduce using rule 28 (variable -> VARIABLE .)
    ELEMENTAL_MUL   reduce using rule 28 (variable -> VARIABLE .)
    LEFT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    RIGHT_CYCLIC_SHIFT reduce using rule 28 (variable -> VARIABLE .)
    TRANSPOSITION   reduce using rule 28 (variable -> VARIABLE .)
    LESS            reduce using rule 28 (variable -> VARIABLE .)
    GREATER         reduce using rule 28 (variable -> VARIABLE .)
    AND             reduce using rule 28 (variable -> VARIABLE .)
    NEW_LINE        reduce using rule 28 (variable -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 43
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    call_list                      shift and go to state 132
    expression                     shift and go to state 44
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 96

    (10) declaration -> type VARIABLE EQUAL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    NEW_LINE        reduce using rule 10 (declaration -> type VARIABLE EQUAL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 97

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_args                      shift and go to state 133
    list_expressions               shift and go to state 120
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 98

    (76) call_list -> call_list COMMA expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 76 (call_list -> call_list COMMA expression .)
    NEW_LINE        reduce using rule 76 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 99

    (29) variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .

    ASSIGN          reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    COMMA           reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    PLUS            reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    MINUS           reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    MATRIX_MUL      reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    ELEMENTAL_MUL   reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    LEFT_CYCLIC_SHIFT reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_CYCLIC_SHIFT reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    TRANSPOSITION   reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    LESS            reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    GREATER         reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    AND             reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    NEW_LINE        reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    BEGINIF         reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    DOUBLE_DOT      reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)
    BEGINFOR        reduce using rule 29 (variable -> VARIABLE LEFT_BRACKET index RIGHT_BRACKET .)


state 100

    (83) index -> list_expressions ind .

    RIGHT_BRACKET   reduce using rule 83 (index -> list_expressions ind .)


state 101

    (51) list_expressions -> list_expressions COMMA . expression
    (78) ind -> COMMA .
    (79) ind -> COMMA . DOUBLE_DOT
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    RIGHT_BRACKET   reduce using rule 78 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 110
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 134
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 102

    (84) index -> ind list_expressions .
    (51) list_expressions -> list_expressions . COMMA expression
    (50) list_args -> list_expressions .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 50 (list_args -> list_expressions .)
    COMMA           shift and go to state 135
    RIGHT_BRACKET   reduce using rule 50 (list_args -> list_expressions .)

  ! RIGHT_BRACKET   [ reduce using rule 84 (index -> ind list_expressions .) ]
  ! COMMA           [ reduce using rule 50 (list_args -> list_expressions .) ]


state 103

    (86) index -> ind list_args .
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 86 (index -> ind list_args .)
    COMMA           shift and go to state 136


state 104

    (52) list_expressions -> expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 52 (list_expressions -> expression .)
    RIGHT_BRACKET   reduce using rule 52 (list_expressions -> expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 52 (list_expressions -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 105

    (48) list_args -> LEFT_FIGURE_BRACKET . list_expressions RIGHT_FIGURE_BRACKET
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_expressions               shift and go to state 137
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 106

    (85) index -> list_args ind .

    RIGHT_BRACKET   reduce using rule 85 (index -> list_args ind .)


state 107

    (49) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (78) ind -> COMMA .
    (79) ind -> COMMA . DOUBLE_DOT

    LEFT_FIGURE_BRACKET shift and go to state 138
    RIGHT_BRACKET   reduce using rule 78 (ind -> COMMA .)
    DOUBLE_DOT      shift and go to state 110


state 108

    (88) index -> LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 139
    COMMA           shift and go to state 136


state 109

    (48) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (50) list_args -> list_expressions .
    (51) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for RIGHT_FIGURE_BRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET shift and go to state 140
    COMMA           shift and go to state 135

  ! RIGHT_FIGURE_BRACKET [ reduce using rule 50 (list_args -> list_expressions .) ]
  ! COMMA           [ reduce using rule 50 (list_args -> list_expressions .) ]


state 110

    (79) ind -> COMMA DOUBLE_DOT .

    LEFT_FIGURE_BRACKET reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    NEGATIVE        reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    VARIABLE        reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    INT_BINARY      reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    INT_DECIMAL     reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    TRUE            reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    FALSE           reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)
    RIGHT_BRACKET   reduce using rule 79 (ind -> COMMA DOUBLE_DOT .)


state 111

    (80) ind -> DOUBLE_DOT COMMA .

    LEFT_FIGURE_BRACKET reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    NEGATIVE        reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    VARIABLE        reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    INT_BINARY      reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    INT_DECIMAL     reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    TRUE            reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    FALSE           reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)
    RIGHT_BRACKET   reduce using rule 80 (ind -> DOUBLE_DOT COMMA .)


state 112

    (17) math_expression -> expression PLUS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 17 (math_expression -> expression PLUS expression .)
    NEW_LINE        reduce using rule 17 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 17 (math_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 17 (math_expression -> expression PLUS expression .)
    DOUBLE_DOT      reduce using rule 17 (math_expression -> expression PLUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 17 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 17 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! PLUS            [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 17 (math_expression -> expression PLUS expression .) ]


state 113

    (18) math_expression -> expression MINUS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 18 (math_expression -> expression MINUS expression .)
    NEW_LINE        reduce using rule 18 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 18 (math_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 18 (math_expression -> expression MINUS expression .)
    DOUBLE_DOT      reduce using rule 18 (math_expression -> expression MINUS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 18 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 18 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! PLUS            [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSITION   [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 18 (math_expression -> expression MINUS expression .) ]


state 114

    (19) math_expression -> expression MATRIX_MUL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    NEW_LINE        reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    BEGINIF         reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_BRACKET   reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    DOUBLE_DOT      reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    BEGINFOR        reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! PLUS            [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MINUS           [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! LESS            [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! GREATER         [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]
  ! AND             [ reduce using rule 19 (math_expression -> expression MATRIX_MUL expression .) ]


state 115

    (20) math_expression -> expression ELEMENTAL_MUL expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for ELEMENTAL_MUL resolved as shift
  ! shift/reduce conflict for LEFT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_CYCLIC_SHIFT resolved as shift
  ! shift/reduce conflict for TRANSPOSITION resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    NEW_LINE        reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINIF         reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_BRACKET   reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    DOUBLE_DOT      reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    BEGINFOR        reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82

  ! PLUS            [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MINUS           [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! MATRIX_MUL      [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! ELEMENTAL_MUL   [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LEFT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! RIGHT_CYCLIC_SHIFT [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! TRANSPOSITION   [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! LESS            [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! GREATER         [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]
  ! AND             [ reduce using rule 20 (math_expression -> expression ELEMENTAL_MUL expression .) ]


state 116

    (24) math_expression -> expression LESS expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 24 (math_expression -> expression LESS expression .)
    MINUS           reduce using rule 24 (math_expression -> expression LESS expression .)
    MATRIX_MUL      reduce using rule 24 (math_expression -> expression LESS expression .)
    ELEMENTAL_MUL   reduce using rule 24 (math_expression -> expression LESS expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression LESS expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 24 (math_expression -> expression LESS expression .)
    TRANSPOSITION   reduce using rule 24 (math_expression -> expression LESS expression .)
    LESS            reduce using rule 24 (math_expression -> expression LESS expression .)
    GREATER         reduce using rule 24 (math_expression -> expression LESS expression .)
    AND             reduce using rule 24 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 24 (math_expression -> expression LESS expression .)
    NEW_LINE        reduce using rule 24 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 24 (math_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 24 (math_expression -> expression LESS expression .)
    DOUBLE_DOT      reduce using rule 24 (math_expression -> expression LESS expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 24 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 24 (math_expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MATRIX_MUL      [ shift and go to state 75 ]
  ! ELEMENTAL_MUL   [ shift and go to state 76 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 77 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 78 ]
  ! TRANSPOSITION   [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]


state 117

    (25) math_expression -> expression GREATER expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 25 (math_expression -> expression GREATER expression .)
    MINUS           reduce using rule 25 (math_expression -> expression GREATER expression .)
    MATRIX_MUL      reduce using rule 25 (math_expression -> expression GREATER expression .)
    ELEMENTAL_MUL   reduce using rule 25 (math_expression -> expression GREATER expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression GREATER expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 25 (math_expression -> expression GREATER expression .)
    TRANSPOSITION   reduce using rule 25 (math_expression -> expression GREATER expression .)
    LESS            reduce using rule 25 (math_expression -> expression GREATER expression .)
    GREATER         reduce using rule 25 (math_expression -> expression GREATER expression .)
    AND             reduce using rule 25 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 25 (math_expression -> expression GREATER expression .)
    NEW_LINE        reduce using rule 25 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 25 (math_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 25 (math_expression -> expression GREATER expression .)
    DOUBLE_DOT      reduce using rule 25 (math_expression -> expression GREATER expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 25 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 25 (math_expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MATRIX_MUL      [ shift and go to state 75 ]
  ! ELEMENTAL_MUL   [ shift and go to state 76 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 77 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 78 ]
  ! TRANSPOSITION   [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]


state 118

    (27) math_expression -> expression AND expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    PLUS            reduce using rule 27 (math_expression -> expression AND expression .)
    MINUS           reduce using rule 27 (math_expression -> expression AND expression .)
    MATRIX_MUL      reduce using rule 27 (math_expression -> expression AND expression .)
    ELEMENTAL_MUL   reduce using rule 27 (math_expression -> expression AND expression .)
    LEFT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression AND expression .)
    RIGHT_CYCLIC_SHIFT reduce using rule 27 (math_expression -> expression AND expression .)
    TRANSPOSITION   reduce using rule 27 (math_expression -> expression AND expression .)
    AND             reduce using rule 27 (math_expression -> expression AND expression .)
    COMMA           reduce using rule 27 (math_expression -> expression AND expression .)
    NEW_LINE        reduce using rule 27 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 27 (math_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 27 (math_expression -> expression AND expression .)
    DOUBLE_DOT      reduce using rule 27 (math_expression -> expression AND expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 27 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 27 (math_expression -> expression AND expression .)
    LESS            shift and go to state 80
    GREATER         shift and go to state 81

  ! LESS            [ reduce using rule 27 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 27 (math_expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MATRIX_MUL      [ shift and go to state 75 ]
  ! ELEMENTAL_MUL   [ shift and go to state 76 ]
  ! LEFT_CYCLIC_SHIFT [ shift and go to state 77 ]
  ! RIGHT_CYCLIC_SHIFT [ shift and go to state 78 ]
  ! TRANSPOSITION   [ shift and go to state 79 ]
  ! AND             [ shift and go to state 82 ]


state 119

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 141
    COMMA           shift and go to state 136


state 120

    (50) list_args -> list_expressions .
    (51) list_expressions -> list_expressions . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RIGHT_FIGURE_BRACKET reduce using rule 50 (list_args -> list_expressions .)
    COMMA           shift and go to state 135

  ! COMMA           [ reduce using rule 50 (list_args -> list_expressions .) ]


state 121

    (72) call_func -> variable ASSIGN VARIABLE call_list .
    (76) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 72 (call_func -> variable ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 64


state 122

    (53) if -> IF expression BEGINIF NEW_LINE . sentence_list ENDIF
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    sentence_list                  shift and go to state 142
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 123

    (54) for -> FOR VARIABLE EQUAL expression . DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    DOUBLE_DOT      shift and go to state 143
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 124

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (62) parameters -> . parameters COMMA parameter
    (63) parameters -> . parameter
    (64) parameter -> . type VARIABLE
    (65) parameter -> . type VARIABLE EQUAL constant
    (66) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (30) type -> . int
    (31) type -> . bool
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    RIGHT_BRACKET   shift and go to state 145
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    parameters                     shift and go to state 144
    parameter                      shift and go to state 128
    type                           shift and go to state 129
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 125

    (59) return_spec -> return_spec COMMA type VARIABLE . EQUAL

    EQUAL           shift and go to state 146


state 126

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (62) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 147
    COMMA           shift and go to state 148


state 127

    (58) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 149


state 128

    (63) parameters -> parameter .

    RIGHT_BRACKET   reduce using rule 63 (parameters -> parameter .)
    COMMA           reduce using rule 63 (parameters -> parameter .)


state 129

    (64) parameter -> type . VARIABLE
    (65) parameter -> type . VARIABLE EQUAL constant
    (66) parameter -> type . VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    VARIABLE        shift and go to state 150


state 130

    (69) call_func -> ret_list ASSIGN VARIABLE call_list .
    (76) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 69 (call_func -> ret_list ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 64


state 131

    (70) call_func -> CALL ret_list ASSIGN VARIABLE . call_list
    (71) call_func -> CALL ret_list ASSIGN VARIABLE .
    (76) call_list -> . call_list COMMA expression
    (77) call_list -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEW_LINE        reduce using rule 71 (call_func -> CALL ret_list ASSIGN VARIABLE .)
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    call_list                      shift and go to state 151
    expression                     shift and go to state 44
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 132

    (73) call_func -> type VARIABLE EQUAL VARIABLE call_list .
    (76) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 73 (call_func -> type VARIABLE EQUAL VARIABLE call_list .)
    COMMA           shift and go to state 64


state 133

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 152
    COMMA           shift and go to state 136


state 134

    (51) list_expressions -> list_expressions COMMA expression .
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    COMMA           reduce using rule 51 (list_expressions -> list_expressions COMMA expression .)
    DOUBLE_DOT      reduce using rule 51 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_BRACKET   reduce using rule 51 (list_expressions -> list_expressions COMMA expression .)
    RIGHT_FIGURE_BRACKET reduce using rule 51 (list_expressions -> list_expressions COMMA expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 135

    (51) list_expressions -> list_expressions COMMA . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 134
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 136

    (49) list_args -> list_args COMMA . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    LEFT_FIGURE_BRACKET shift and go to state 138


state 137

    (48) list_args -> LEFT_FIGURE_BRACKET list_expressions . RIGHT_FIGURE_BRACKET
    (51) list_expressions -> list_expressions . COMMA expression

    RIGHT_FIGURE_BRACKET shift and go to state 140
    COMMA           shift and go to state 135


state 138

    (49) list_args -> list_args COMMA LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_args                      shift and go to state 153
    list_expressions               shift and go to state 120
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 139

    (88) index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 88 (index -> LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 140

    (48) list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .

    COMMA           reduce using rule 48 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    DOUBLE_DOT      reduce using rule 48 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 48 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 48 (list_args -> LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET .)


state 141

    (13) assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 13 (assignment -> variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 142

    (53) if -> IF expression BEGINIF NEW_LINE sentence_list . ENDIF
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    ENDIF           shift and go to state 154
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 143

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT . expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 155
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 144

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters . RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (62) parameters -> parameters . COMMA parameter

    RIGHT_BRACKET   shift and go to state 156
    COMMA           shift and go to state 148


state 145

    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 157


state 146

    (59) return_spec -> return_spec COMMA type VARIABLE EQUAL .

    FUNCTION        reduce using rule 59 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)
    COMMA           reduce using rule 59 (return_spec -> return_spec COMMA type VARIABLE EQUAL .)


state 147

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 158


state 148

    (62) parameters -> parameters COMMA . parameter
    (64) parameter -> . type VARIABLE
    (65) parameter -> . type VARIABLE EQUAL constant
    (66) parameter -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (30) type -> . int
    (31) type -> . bool
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    parameter                      shift and go to state 159
    type                           shift and go to state 129
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 149

    (58) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 160


state 150

    (64) parameter -> type VARIABLE .
    (65) parameter -> type VARIABLE . EQUAL constant
    (66) parameter -> type VARIABLE . EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_BRACKET   reduce using rule 64 (parameter -> type VARIABLE .)
    COMMA           reduce using rule 64 (parameter -> type VARIABLE .)
    EQUAL           shift and go to state 161


state 151

    (70) call_func -> CALL ret_list ASSIGN VARIABLE call_list .
    (76) call_list -> call_list . COMMA expression

    NEW_LINE        reduce using rule 70 (call_func -> CALL ret_list ASSIGN VARIABLE call_list .)
    COMMA           shift and go to state 64


state 152

    (11) declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    NEW_LINE        reduce using rule 11 (declaration -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 153

    (49) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 162
    COMMA           shift and go to state 136


state 154

    (53) if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .

    NEW_LINE        reduce using rule 53 (if -> IF expression BEGINIF NEW_LINE sentence_list ENDIF .)


state 155

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression . BEGINFOR NEW_LINE sentence_list ENDFOR
    (17) math_expression -> expression . PLUS expression
    (18) math_expression -> expression . MINUS expression
    (19) math_expression -> expression . MATRIX_MUL expression
    (20) math_expression -> expression . ELEMENTAL_MUL expression
    (21) math_expression -> expression . LEFT_CYCLIC_SHIFT
    (22) math_expression -> expression . RIGHT_CYCLIC_SHIFT
    (23) math_expression -> expression . TRANSPOSITION
    (24) math_expression -> expression . LESS expression
    (25) math_expression -> expression . GREATER expression
    (27) math_expression -> expression . AND expression

    BEGINFOR        shift and go to state 163
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MATRIX_MUL      shift and go to state 75
    ELEMENTAL_MUL   shift and go to state 76
    LEFT_CYCLIC_SHIFT shift and go to state 77
    RIGHT_CYCLIC_SHIFT shift and go to state 78
    TRANSPOSITION   shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    AND             shift and go to state 82


state 156

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET . BEGIN NEW_LINE sentence_list END

    BEGIN           shift and go to state 164


state 157

    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 165


state 158

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 166


state 159

    (62) parameters -> parameters COMMA parameter .

    RIGHT_BRACKET   reduce using rule 62 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 62 (parameters -> parameters COMMA parameter .)


state 160

    (58) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    sentence_list                  shift and go to state 167
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 161

    (65) parameter -> type VARIABLE EQUAL . constant
    (66) parameter -> type VARIABLE EQUAL . LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 169
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    constant                       shift and go to state 168

state 162

    (49) list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    COMMA           reduce using rule 49 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    DOUBLE_DOT      reduce using rule 49 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    RIGHT_BRACKET   reduce using rule 49 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    RIGHT_FIGURE_BRACKET reduce using rule 49 (list_args -> list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 163

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR . NEW_LINE sentence_list ENDFOR

    NEW_LINE        shift and go to state 170


state 164

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN . NEW_LINE sentence_list END

    NEW_LINE        shift and go to state 171


state 165

    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    return_spec                    shift and go to state 15
    sentence_list                  shift and go to state 172
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 166

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    sentence_list                  shift and go to state 173
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 167

    (58) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    END             shift and go to state 174
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 168

    (65) parameter -> type VARIABLE EQUAL constant .

    RIGHT_BRACKET   reduce using rule 65 (parameter -> type VARIABLE EQUAL constant .)
    COMMA           reduce using rule 65 (parameter -> type VARIABLE EQUAL constant .)


state 169

    (66) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET . list_args RIGHT_FIGURE_BRACKET
    (48) list_args -> . LEFT_FIGURE_BRACKET list_expressions RIGHT_FIGURE_BRACKET
    (49) list_args -> . list_args COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (50) list_args -> . list_expressions
    (51) list_expressions -> . list_expressions COMMA expression
    (52) list_expressions -> . expression
    (14) expression -> . math_expression
    (15) expression -> . variable
    (16) expression -> . constant
    (17) math_expression -> . expression PLUS expression
    (18) math_expression -> . expression MINUS expression
    (19) math_expression -> . expression MATRIX_MUL expression
    (20) math_expression -> . expression ELEMENTAL_MUL expression
    (21) math_expression -> . expression LEFT_CYCLIC_SHIFT
    (22) math_expression -> . expression RIGHT_CYCLIC_SHIFT
    (23) math_expression -> . expression TRANSPOSITION
    (24) math_expression -> . expression LESS expression
    (25) math_expression -> . expression GREATER expression
    (26) math_expression -> . NEGATIVE expression
    (27) math_expression -> . expression AND expression
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (44) constant -> . INT_BINARY
    (45) constant -> . INT_DECIMAL
    (46) constant -> . TRUE
    (47) constant -> . FALSE

    LEFT_FIGURE_BRACKET shift and go to state 105
    NEGATIVE        shift and go to state 48
    VARIABLE        shift and go to state 41
    INT_BINARY      shift and go to state 49
    INT_DECIMAL     shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    list_args                      shift and go to state 175
    list_expressions               shift and go to state 120
    expression                     shift and go to state 104
    math_expression                shift and go to state 45
    variable                       shift and go to state 46
    constant                       shift and go to state 47

state 170

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE . sentence_list ENDFOR
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    sentence_list                  shift and go to state 176
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 171

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE . sentence_list END
    (2) sentence_list -> . sentence_list single_sentence
    (3) sentence_list -> . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    return_spec                    shift and go to state 15
    sentence_list                  shift and go to state 177
    single_sentence                shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 172

    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    END             shift and go to state 178
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    return_spec                    shift and go to state 15
    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 173

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    END             shift and go to state 179
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 174

    (58) function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 58 (function -> FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 175

    (66) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args . RIGHT_FIGURE_BRACKET
    (49) list_args -> list_args . COMMA LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET

    RIGHT_FIGURE_BRACKET shift and go to state 180
    COMMA           shift and go to state 136


state 176

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list . ENDFOR
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    ENDFOR          shift and go to state 181
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    return_spec                    shift and go to state 15
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 177

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list . END
    (2) sentence_list -> sentence_list . single_sentence
    (4) single_sentence -> . declaration NEW_LINE
    (5) single_sentence -> . assignment NEW_LINE
    (6) single_sentence -> . if NEW_LINE
    (7) single_sentence -> . for NEW_LINE
    (8) single_sentence -> . function NEW_LINE
    (9) single_sentence -> . call_func NEW_LINE
    (10) declaration -> . type VARIABLE EQUAL expression
    (11) declaration -> . type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (12) assignment -> . variable ASSIGN expression
    (13) assignment -> . variable ASSIGN LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET
    (53) if -> . IF expression BEGINIF NEW_LINE sentence_list ENDIF
    (54) for -> . FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR
    (55) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (56) function -> . return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (57) function -> . FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (58) function -> . FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END
    (67) call_func -> . VARIABLE
    (68) call_func -> . VARIABLE call_list
    (69) call_func -> . ret_list ASSIGN VARIABLE call_list
    (70) call_func -> . CALL ret_list ASSIGN VARIABLE call_list
    (71) call_func -> . CALL ret_list ASSIGN VARIABLE
    (72) call_func -> . variable ASSIGN VARIABLE call_list
    (73) call_func -> . type VARIABLE EQUAL VARIABLE call_list
    (30) type -> . int
    (31) type -> . bool
    (28) variable -> . VARIABLE
    (29) variable -> . VARIABLE LEFT_BRACKET index RIGHT_BRACKET
    (59) return_spec -> . return_spec COMMA type VARIABLE EQUAL
    (60) return_spec -> . type VARIABLE EQUAL
    (61) return_spec -> . type VARIABLE
    (74) ret_list -> . variable
    (75) ret_list -> . ret_list COMMA variable
    (32) int -> . INT
    (33) int -> . CVINT
    (34) int -> . VINT
    (35) int -> . CMINT
    (36) int -> . MINT
    (37) int -> . CINT
    (38) bool -> . BOOL
    (39) bool -> . CMBOOL
    (40) bool -> . MBOOL
    (41) bool -> . CVBOOL
    (42) bool -> . VBOOL
    (43) bool -> . CBOOL

    END             shift and go to state 182
    IF              shift and go to state 13
    FOR             shift and go to state 14
    FUNCTION        shift and go to state 16
    VARIABLE        shift and go to state 11
    CALL            shift and go to state 18
    INT             shift and go to state 21
    CVINT           shift and go to state 22
    VINT            shift and go to state 23
    CMINT           shift and go to state 24
    MINT            shift and go to state 25
    CINT            shift and go to state 26
    BOOL            shift and go to state 27
    CMBOOL          shift and go to state 28
    MBOOL           shift and go to state 29
    CVBOOL          shift and go to state 30
    VBOOL           shift and go to state 31
    CBOOL           shift and go to state 32

    return_spec                    shift and go to state 15
    single_sentence                shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if                             shift and go to state 6
    for                            shift and go to state 7
    function                       shift and go to state 8
    call_func                      shift and go to state 9
    type                           shift and go to state 10
    variable                       shift and go to state 12
    ret_list                       shift and go to state 17
    int                            shift and go to state 19
    bool                           shift and go to state 20

state 178

    (56) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 56 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 179

    (57) function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 57 (function -> FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)


state 180

    (66) parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .

    RIGHT_BRACKET   reduce using rule 66 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)
    COMMA           reduce using rule 66 (parameter -> type VARIABLE EQUAL LEFT_FIGURE_BRACKET list_args RIGHT_FIGURE_BRACKET .)


state 181

    (54) for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .

    NEW_LINE        reduce using rule 54 (for -> FOR VARIABLE EQUAL expression DOUBLE_DOT expression BEGINFOR NEW_LINE sentence_list ENDFOR .)


state 182

    (55) function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .

    NEW_LINE        reduce using rule 55 (function -> return_spec FUNCTION VARIABLE LEFT_BRACKET parameters RIGHT_BRACKET BEGIN NEW_LINE sentence_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 12 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_DOT in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 102 resolved as shift
WARNING: shift/reduce conflict for RIGHT_FIGURE_BRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 112 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 112 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 112 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 112 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 113 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 113 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 113 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 113 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 114 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 114 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 114 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 114 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 115 resolved as shift
WARNING: shift/reduce conflict for ELEMENTAL_MUL in state 115 resolved as shift
WARNING: shift/reduce conflict for LEFT_CYCLIC_SHIFT in state 115 resolved as shift
WARNING: shift/reduce conflict for RIGHT_CYCLIC_SHIFT in state 115 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSITION in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (list_expressions -> expression)
WARNING: rejected rule (index -> expression) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (list_args -> list_expressions)
WARNING: rejected rule (index -> list_expressions) in state 67
WARNING: reduce/reduce conflict in state 102 resolved using rule (list_args -> list_expressions)
WARNING: rejected rule (index -> ind list_expressions) in state 102
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index -> list_expressions) is never reduced
WARNING: Rule (index -> ind list_expressions) is never reduced
